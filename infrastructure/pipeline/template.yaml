Description: 'Template containing webapp pipeline, all its resources and the deployment.'

Parameters:
  EnvName:
    Description: 'Environment where it has to be deployed'
    Type: String
  ImageTag:
    Description: 'Tag how the .zip file is tagged'
    Type: String
  ProjectName:
    Description: 'Name of the project'
    Type: Stringg
  BucketESName:
    Description: 'Name of the S3 bucket where the app in ES is hosted'
    Type: String
  BucketENName:
    Description: 'Name of the S3 bucket where the app in EN is hosted'
    Type: String
  ArtifactBucket:
    Description: Bucket where pipeline store its artifacts
    Type: String
    Default: "codebuild-cache-wallapop"
  S3SourceBucket:
    Description: Bucket where the .zip file is pushed to trigger this pipeline
    Type: String
    Default: "wallapop-trigger-link-cicd"

# TODO: clean this up and leave a single config for the beta environment when everything is migrated to the new account
# We need this for now to be able to have a bucket in the  new account with a different name than the current one in beta
Mappings:
  ConfigFileName:
    '745640521341':
      beta: 'beta'
      prod: 'prod'
    '139222918132':
      beta: 'beta_account'

Resources:
  CodeBuildDeployScripts:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "webapp-deploy-service-${EnvName}"
      Description: !Sub "Uploads webapp project to ${EnvName} hosting buckets"
      ServiceRole:
        Fn::ImportValue: execute-predeploy-role
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
              build:
                  commands:
                    - >
                      if [ -d "en/" ] && [ -d "es/" ]; then
                        aws s3 sync es/ s3://$HOSTING_BUCKET_ES --delete
                        aws s3 cp es/index.html s3://$HOSTING_BUCKET_ES/index.html --cache-control max-age=0
                        aws s3 sync en/ s3://$HOSTING_BUCKET_EN --delete
                        aws s3 cp en/index.html s3://$HOSTING_BUCKET_EN/index.html --cache-control max-age=0
                      else
                        aws s3 sync dist/es s3://$HOSTING_BUCKET_ES --delete
                        aws s3 cp dist/es/index.html s3://$HOSTING_BUCKET_ES/index.html --cache-control max-age=0
                      fi
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/docker:17.09.0"
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: HOSTING_BUCKET_ES
            Value: !Ref BucketESName
          - Name: HOSTING_BUCKET_EN
            Value: !Ref BucketENName
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue:
              !Sub "Core-${EnvName}-SSHSecurityGroup"
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvName}-vpc"
        Subnets:
          - Fn::ImportValue:
              !Sub "${EnvName}-public-subnet-a"
      Tags:
        - Key: Env
          Value: !Ref EnvName
        - Key: Project
          Value: !Ref ProjectName

  DeployServiceCodebuildLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/codebuild/webapp-deploy-service-${EnvName}"
      RetentionInDays: 90

  CodeBuildScripts:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "webapp-invalidate-caches-${EnvName}"
      Description: !Sub "Invalidate caches for webapp ${EnvName} distributions"
      ServiceRole:
        Fn::ImportValue: execute-predeploy-role
      Artifacts:
        Type: NO_ARTIFACTS
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
              build:
                  commands:
                    - aws cloudfront create-invalidation --distribution-id $EN_DISTRIBUTION --paths "/index.html" "/ngsw.json"
                    - aws cloudfront create-invalidation --distribution-id $ES_DISTRIBUTION --paths "/index.html" "/ngsw.json"
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/docker:17.09.0"
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: EN_DISTRIBUTION
            Value:
              Fn::ImportValue: !Sub webapp-en-cloudfront-distribution-id-${EnvName}
          - Name: ES_DISTRIBUTION
            Value:
              Fn::ImportValue: !Sub webapp-es-cloudfront-distribution-id-${EnvName}
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue:
              !Sub "Core-${EnvName}-SSHSecurityGroup"
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvName}-vpc"
        Subnets:
          - Fn::ImportValue:
              !Sub "${EnvName}-private-subnet-a"
      Tags:
        - Key: Env
          Value: !Ref EnvName
        - Key: Project
          Value: !Ref ProjectName

  InvalidateCachesCodebuildLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/codebuild/webapp-invalidate-caches-${EnvName}"
      RetentionInDays: 90

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub webapp-${EnvName}
      RoleArn:
        Fn::ImportValue: execute-pipeline-role
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: webapp
              ActionTypeId:
                Category: Source
                Provider: S3
                Owner: AWS
                Version: "1"
              Configuration:
                S3Bucket: !Ref S3SourceBucket
                S3ObjectKey: !Sub webapp/webapp-${ImageTag}.zip
              OutputArtifacts:
                - Name: App

        - Name: Infrastructure
          Actions:
            - Name: Pipeline
              ActionTypeId:
                Category: Deploy
                Provider: CloudFormation
                Owner: AWS
                Version: "1"
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM
                StackName: !Sub webapp-pipeline-${EnvName}
                TemplateConfiguration:
                  !Sub
                    - 'App::infrastructure/pipeline/${ConfigFile}.json'
                    - ConfigFile: !FindInMap [ConfigFileName, !Ref "AWS::AccountId", !Ref EnvName]
                TemplatePath: App::infrastructure/pipeline/template.yaml
                RoleArn:
                  Fn::ImportValue: manage-pipeline-stack-role
              InputArtifacts:
                - Name: App
              RunOrder: 1
            - Name: S3
              ActionTypeId:
                Category: Deploy
                Provider: CloudFormation
                Owner: AWS
                Version: "1"
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM
                StackName: !Sub webapp-s3-${EnvName}
                TemplateConfiguration:
                  !Sub
                  - 'App::infrastructure/s3/${ConfigFile}.json'
                  - ConfigFile: !FindInMap [ ConfigFileName, !Ref "AWS::AccountId", !Ref EnvName ]
                TemplatePath: App::infrastructure/s3/template.yml
                RoleArn:
                  Fn::ImportValue: manage-serverless-stack-role
              InputArtifacts:
                - Name: App
              RunOrder: 2
            - Name: Cloudfront
              ActionTypeId:
                Category: Deploy
                Provider: CloudFormation
                Owner: AWS
                Version: "1"
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM
                StackName: !Sub Webapp-${EnvName}
                TemplateConfiguration:
                  !Sub
                  - 'App::infrastructure/cloudfront/${ConfigFile}.json'
                  - ConfigFile: !FindInMap [ ConfigFileName, !Ref "AWS::AccountId", !Ref EnvName ]
                TemplatePath: App::infrastructure/cloudfront/template.yaml
                RoleArn:
                  Fn::ImportValue: manage-serverless-stack-role
              InputArtifacts:
                - Name: App
              RunOrder: 3

        - Name: Deploy
          Actions:
            - Name: Service
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildDeployScripts
              InputArtifacts:
                - Name: App
              RunOrder: 1
            - Name: Invalidate-Caches
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildScripts
              InputArtifacts:
                - Name: App
              RunOrder: 2
