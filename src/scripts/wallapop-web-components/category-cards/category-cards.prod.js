/*! For license information please see category-cards.prod.js.LICENSE.txt */
(()=>{var t={575:function(t,e,n){(function(){"use strict";var t;function e(t){var e=0;return function(){return e<t.length?{done:!1,value:t[e++]}:{done:!0}}}var r,o="function"==typeof Object.defineProperties?Object.defineProperty:function(t,e,n){return t==Array.prototype||t==Object.prototype||(t[e]=n.value),t},i=function(t){t=["object"==typeof globalThis&&globalThis,t,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof n.g&&n.g];for(var e=0;e<t.length;++e){var r=t[e];if(r&&r.Math==Math)return r}throw Error("Cannot find global object")}(this);function a(t,e){if(e)t:{var n=i;t=t.split(".");for(var r=0;r<t.length-1;r++){var a=t[r];if(!(a in n))break t;n=n[a]}(e=e(r=n[t=t[t.length-1]]))!=r&&null!=e&&o(n,t,{configurable:!0,writable:!0,value:e})}}function s(t){return(t={next:t})[Symbol.iterator]=function(){return this},t}function u(t){var n="undefined"!=typeof Symbol&&Symbol.iterator&&t[Symbol.iterator];return n?n.call(t):{next:e(t)}}function c(t){if(!(t instanceof Array)){t=u(t);for(var e,n=[];!(e=t.next()).done;)n.push(e.value);t=n}return t}if(a("Symbol",(function(t){function e(t,e){this.g=t,o(this,"description",{configurable:!0,writable:!0,value:e})}if(t)return t;e.prototype.toString=function(){return this.g};var n=0;return function t(r){if(this instanceof t)throw new TypeError("Symbol is not a constructor");return new e("jscomp_symbol_"+(r||"")+"_"+n++,r)}})),a("Symbol.iterator",(function(t){if(t)return t;t=Symbol("Symbol.iterator");for(var n="Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "),r=0;r<n.length;r++){var a=i[n[r]];"function"==typeof a&&"function"!=typeof a.prototype[t]&&o(a.prototype,t,{configurable:!0,writable:!0,value:function(){return s(e(this))}})}return t})),"function"==typeof Object.setPrototypeOf)r=Object.setPrototypeOf;else{var l;t:{var f={};try{f.__proto__={a:!0},l=f.a;break t}catch(M){}l=!1}r=l?function(t,e){if(t.__proto__=e,t.__proto__!==e)throw new TypeError(t+" is not extensible");return t}:null}var h=r;function d(){this.u=!1,this.h=null,this.Ka=void 0,this.g=1,this.da=0,this.i=null}function p(t){if(t.u)throw new TypeError("Generator is already running");t.u=!0}function v(t,e){t.i={Wa:e,$a:!0},t.g=t.da}function y(t,e){return t.g=3,{value:e}}function m(t){this.g=new d,this.h=t}function _(t,e,n,r){try{var o=e.call(t.g.h,n);if(!(o instanceof Object))throw new TypeError("Iterator result "+o+" is not an object");if(!o.done)return t.g.u=!1,o;var i=o.value}catch(e){return t.g.h=null,v(t.g,e),b(t)}return t.g.h=null,r.call(t.g,i),b(t)}function b(t){for(;t.g.g;)try{var e=t.h(t.g);if(e)return t.g.u=!1,{value:e.value,done:!1}}catch(e){t.g.Ka=void 0,v(t.g,e)}if(t.g.u=!1,t.g.i){if(e=t.g.i,t.g.i=null,e.$a)throw e.Wa;return{value:e.return,done:!0}}return{value:void 0,done:!0}}function g(t){this.next=function(e){return p(t.g),t.g.h?e=_(t,t.g.h.next,e,t.g.O):(t.g.O(e),e=b(t)),e},this.throw=function(e){return p(t.g),t.g.h?e=_(t,t.g.h.throw,e,t.g.O):(v(t.g,e),e=b(t)),e},this.return=function(e){return function(t,e){p(t.g);var n=t.g.h;return n?_(t,"return"in n?n.return:function(t){return{value:t,done:!0}},e,t.g.return):(t.g.return(e),b(t))}(t,e)},this[Symbol.iterator]=function(){return this}}function w(t,e){return e=new g(new m(e)),h&&t.prototype&&h(e,t.prototype),e}d.prototype.O=function(t){this.Ka=t},d.prototype.return=function(t){this.i={return:t},this.g=this.da},Array.from||(Array.from=function(t){return[].slice.call(t)}),Object.assign||(Object.assign=function(t){for(var e,n=[].slice.call(arguments,1),r=0;r<n.length;r++)if(e=n[r])for(var o=t,i=Object.keys(e),a=0;a<i.length;a++){var s=i[a];o[s]=e[s]}return t});var E=setTimeout;function C(){}function N(t){if(!(this instanceof N))throw new TypeError("Promises must be constructed via new");if("function"!=typeof t)throw new TypeError("not a function");this.N=0,this.Ea=!1,this.I=void 0,this.ba=[],A(t,this)}function S(t,e){for(;3===t.N;)t=t.I;0===t.N?t.ba.push(e):(t.Ea=!0,R((function(){var n=1===t.N?e.bb:e.cb;if(null===n)(1===t.N?x:T)(e.promise,t.I);else{try{var r=n(t.I)}catch(t){return void T(e.promise,t)}x(e.promise,r)}})))}function x(t,e){try{if(e===t)throw new TypeError("A promise cannot be resolved with itself.");if(e&&("object"==typeof e||"function"==typeof e)){var n=e.then;if(e instanceof N)return t.N=3,t.I=e,void O(t);if("function"==typeof n)return void A(function(t,e){return function(){t.apply(e,arguments)}}(n,e),t)}t.N=1,t.I=e,O(t)}catch(e){T(t,e)}}function T(t,e){t.N=2,t.I=e,O(t)}function O(t){2===t.N&&0===t.ba.length&&R((function(){t.Ea||"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",t.I)}));for(var e=0,n=t.ba.length;e<n;e++)S(t,t.ba[e]);t.ba=null}function D(t,e,n){this.bb="function"==typeof t?t:null,this.cb="function"==typeof e?e:null,this.promise=n}function A(t,e){var n=!1;try{t((function(t){n||(n=!0,x(e,t))}),(function(t){n||(n=!0,T(e,t))}))}catch(t){n||(n=!0,T(e,t))}}function P(t){return t&&"object"==typeof t&&t.constructor===N?t:new N((function(e){e(t)}))}N.prototype.catch=function(t){return this.then(null,t)},N.prototype.then=function(t,e){var n=new this.constructor(C);return S(this,new D(t,e,n)),n},N.prototype.finally=function(t){var e=this.constructor;return this.then((function(n){return e.resolve(t()).then((function(){return n}))}),(function(n){return e.resolve(t()).then((function(){return e.reject(n)}))}))};var M,j,L,k,I,F,R="function"==typeof setImmediate&&function(t){setImmediate(t)}||function(t){E(t,0)};if(!window.Promise){window.Promise=N,N.prototype.then=N.prototype.then,N.all=function(t){return new N((function(e,n){function r(t,a){try{if(a&&("object"==typeof a||"function"==typeof a)){var s=a.then;if("function"==typeof s)return void s.call(a,(function(e){r(t,e)}),n)}o[t]=a,0==--i&&e(o)}catch(t){n(t)}}if(!t||void 0===t.length)return n(new TypeError("Promise.all accepts an array"));var o=Array.prototype.slice.call(t);if(0===o.length)return e([]);for(var i=o.length,a=0;a<o.length;a++)r(a,o[a])}))},N.race=function(t){return new N((function(e,n){if(!t||void 0===t.length)return n(new TypeError("Promise.race accepts an array"));for(var r=0,o=t.length;r<o;r++)P(t[r]).then(e,n)}))},N.resolve=P,N.reject=function(t){return new N((function(e,n){n(t)}))};var H=document.createTextNode(""),U=[];new MutationObserver((function(){for(var t=U.length,e=0;e<t;e++)U[e]();U.splice(0,t)})).observe(H,{characterData:!0}),R=function(t){U.push(t),H.textContent=0<H.textContent.length?"":"a"}}!function(t,e){if(!(e in t)){var r=typeof n.g==typeof r?window:n.g,o=0,i=String(Math.random()),a="__symbol@@"+i,s=t.getOwnPropertyNames,u=t.getOwnPropertyDescriptor,c=t.create,l=t.keys,f=t.freeze||t,h=t.defineProperty,d=t.defineProperties,p=u(t,"getOwnPropertyNames"),v=t.prototype,y=v.hasOwnProperty,m=v.propertyIsEnumerable,_=v.toString,b=function(t,e,n){y.call(t,a)||h(t,a,{enumerable:!1,configurable:!1,writable:!1,value:{}}),t[a]["@@"+e]=n},g=function(t,e){var n=c(t);return s(e).forEach((function(t){N.call(e,t)&&A(n,t,e[t])})),n},w=function(){},E=function(t){return t!=a&&!y.call(T,t)},C=function(t){return t!=a&&y.call(T,t)},N=function(t){var e=String(t);return C(e)?y.call(this,e)&&!!this[a]&&this[a]["@@"+e]:m.call(this,t)},S=function(e){return h(v,e,{enumerable:!1,configurable:!0,get:w,set:function(t){M(this,e,{enumerable:!1,configurable:!0,writable:!0,value:t}),b(this,e,!0)}}),T[e]=h(t(e),"constructor",O),f(T[e])},x=function t(e){if(this instanceof t)throw new TypeError("Symbol is not a constructor");return S("__symbol:".concat(e||"",i,++o))},T=c(null),O={value:x},D=function(t){return T[t]},A=function(t,e,n){var r=String(e);if(C(r)){if(e=M,n.enumerable){var o=c(n);o.enumerable=!1}else o=n;e(t,r,o),b(t,r,!!n.enumerable)}else h(t,e,n);return t},P=function(t){return s(t).filter(C).map(D)};p.value=A,h(t,"defineProperty",p),p.value=P,h(t,e,p),p.value=function(t){return s(t).filter(E)},h(t,"getOwnPropertyNames",p),p.value=function(t,e){var n=P(e);return n.length?l(e).concat(n).forEach((function(n){N.call(e,n)&&A(t,n,e[n])})):d(t,e),t},h(t,"defineProperties",p),p.value=N,h(v,"propertyIsEnumerable",p),p.value=x,h(r,"Symbol",p),p.value=function(t){return(t="__symbol:".concat("__symbol:",t,i))in v?T[t]:S(t)},h(x,"for",p),p.value=function(t){if(E(t))throw new TypeError(t+" is not a symbol");if(y.call(T,t)&&"__symbol:"===(t=t.slice(10)).slice(0,10)&&(t=t.slice(10))!==i)return 0<(t=t.slice(0,t.length-i.length)).length?t:void 0},h(x,"keyFor",p),p.value=function(t,e){var n=u(t,e);return n&&C(e)&&(n.enumerable=N.call(t,e)),n},h(t,"getOwnPropertyDescriptor",p),p.value=function(t,e){return 1===arguments.length||void 0===e?c(t):g(t,e)},h(t,"create",p),p.value=function(){var t=_.call(this);return"[object String]"===t&&C(this)?"[object Symbol]":t},h(v,"toString",p);try{if(!0!==c(h({},"__symbol:",{get:function(){return h(this,"__symbol:",{value:!0})["__symbol:"]}}))["__symbol:"])throw"IE11";var M=h}catch(t){M=function(t,e,n){var r=u(v,e);delete v[e],h(t,e,n),h(v,e,r)}}}}(Object,"getOwnPropertySymbols"),M=Object,j=Symbol,k=M.defineProperty,I=M.prototype,F=I.toString,"iterator match replace search split hasInstance isConcatSpreadable unscopables species toPrimitive toStringTag".split(" ").forEach((function(t){t in j||(k(j,t,{value:j(t)}),"toStringTag"===t&&((L=M.getOwnPropertyDescriptor(I,"toString")).value=function(){var t=F.call(this),e=null==this?this:this[j.toStringTag];return null==e?t:"[object "+e+"]"},k(I,"toString",L)))})),function(t,e,n){function r(){return this}e[t]||(e[t]=function(){var e=0,n=this,o={next:function(){var t=n.length<=e;return t?{done:t}:{done:t,value:n[e++]}}};return o[t]=r,o}),n[t]||(n[t]=function(){var e=String.fromCodePoint,n=this,o=0,i=n.length,a={next:function(){var t=i<=o,r=t?"":e(n.codePointAt(o));return o+=r.length,t?{done:t}:{done:t,value:r}}};return a[t]=r,a})}(Symbol.iterator,Array.prototype,String.prototype);var B=Object.prototype.toString;Object.prototype.toString=function(){return void 0===this?"[object Undefined]":null===this?"[object Null]":B.call(this)},Object.keys=function(t){return Object.getOwnPropertyNames(t).filter((function(e){return(e=Object.getOwnPropertyDescriptor(t,e))&&e.enumerable}))},String.prototype[Symbol.iterator]&&String.prototype.codePointAt||(String.prototype[Symbol.iterator]=function t(){var e,n=this;return w(t,(function(t){if(1==t.g&&(e=0),3!=t.g)return e<n.length?t=y(t,n[e]):(t.g=0,t=void 0),t;e++,t.g=2}))}),Set.prototype[Symbol.iterator]||(Set.prototype[Symbol.iterator]=function t(){var e,n,r=this;return w(t,(function(t){if(1==t.g&&(e=[],r.forEach((function(t){e.push(t)})),n=0),3!=t.g)return n<e.length?t=y(t,e[n]):(t.g=0,t=void 0),t;n++,t.g=2}))}),Map.prototype[Symbol.iterator]||(Map.prototype[Symbol.iterator]=function t(){var e,n,r=this;return w(t,(function(t){if(1==t.g&&(e=[],r.forEach((function(t,n){e.push([n,t])})),n=0),3!=t.g)return n<e.length?t=y(t,e[n]):(t.g=0,t=void 0),t;n++,t.g=2}))});var W=document.createEvent("Event");if(W.initEvent("foo",!0,!0),W.preventDefault(),!W.defaultPrevented){var q=Event.prototype.preventDefault;Event.prototype.preventDefault=function(){this.cancelable&&(q.call(this),Object.defineProperty(this,"defaultPrevented",{get:function(){return!0},configurable:!0}))}}var V=/Trident/.test(navigator.userAgent);if(!window.Event||V&&"function"!=typeof window.Event){var G=window.Event;if(window.Event=function(t,e){e=e||{};var n=document.createEvent("Event");return n.initEvent(t,!!e.bubbles,!!e.cancelable),n},G){for(var z in G)window.Event[z]=G[z];window.Event.prototype=G.prototype}}if((!window.CustomEvent||V&&"function"!=typeof window.CustomEvent)&&(window.CustomEvent=function(t,e){e=e||{};var n=document.createEvent("CustomEvent");return n.initCustomEvent(t,!!e.bubbles,!!e.cancelable,e.detail),n},window.CustomEvent.prototype=window.Event.prototype),!window.MouseEvent||V&&"function"!=typeof window.MouseEvent){var K=window.MouseEvent;if(window.MouseEvent=function(t,e){e=e||{};var n=document.createEvent("MouseEvent");return n.initMouseEvent(t,!!e.bubbles,!!e.cancelable,e.view||window,e.detail,e.screenX,e.screenY,e.clientX,e.clientY,e.ctrlKey,e.altKey,e.shiftKey,e.metaKey,e.button,e.relatedTarget),n},K)for(var X in K)window.MouseEvent[X]=K[X];window.MouseEvent.prototype=K.prototype}Object.getOwnPropertyDescriptor(Node.prototype,"baseURI")||Object.defineProperty(Node.prototype,"baseURI",{get:function(){var t=(this.ownerDocument||this).querySelector("base[href]");return t&&t.href||window.location.href},configurable:!0,enumerable:!0});var Y,$,J=Element.prototype,Z=null!==(Y=Object.getOwnPropertyDescriptor(J,"attributes"))&&void 0!==Y?Y:Object.getOwnPropertyDescriptor(Node.prototype,"attributes"),Q=null!==($=null==Z?void 0:Z.get)&&void 0!==$?$:function(){return this.attributes},tt=Array.prototype.map;J.hasOwnProperty("getAttributeNames")||(J.getAttributeNames=function(){return tt.call(Q.call(this),(function(t){return t.name}))});var et,nt=Element.prototype;nt.hasOwnProperty("matches")||(nt.matches=null!==(et=nt.webkitMatchesSelector)&&void 0!==et?et:nt.msMatchesSelector);var rt=Node.prototype.appendChild;function ot(t){(t=t.prototype).hasOwnProperty("append")||Object.defineProperty(t,"append",{configurable:!0,enumerable:!0,writable:!0,value:function(t){for(var e=[],n=0;n<arguments.length;++n)e[n]=arguments[n];for(n=(e=u(e)).next();!n.done;n=e.next())n=n.value,rt.call(this,"string"==typeof n?document.createTextNode(n):n)}})}ot(Document),ot(DocumentFragment),ot(Element);var it,at,st=Node.prototype.insertBefore,ut=null!==(at=null===(it=Object.getOwnPropertyDescriptor(Node.prototype,"firstChild"))||void 0===it?void 0:it.get)&&void 0!==at?at:function(){return this.firstChild};function ct(t){(t=t.prototype).hasOwnProperty("prepend")||Object.defineProperty(t,"prepend",{configurable:!0,enumerable:!0,writable:!0,value:function(t){for(var e=[],n=0;n<arguments.length;++n)e[n]=arguments[n];n=ut.call(this);for(var r=(e=u(e)).next();!r.done;r=e.next())r=r.value,st.call(this,"string"==typeof r?document.createTextNode(r):r,n)}})}ct(Document),ct(DocumentFragment),ct(Element);var lt,ft,ht=Node.prototype.appendChild,dt=Node.prototype.removeChild,pt=null!==(ft=null===(lt=Object.getOwnPropertyDescriptor(Node.prototype,"firstChild"))||void 0===lt?void 0:lt.get)&&void 0!==ft?ft:function(){return this.firstChild};function vt(t){(t=t.prototype).hasOwnProperty("replaceChildren")||Object.defineProperty(t,"replaceChildren",{configurable:!0,enumerable:!0,writable:!0,value:function(t){for(var e=[],n=0;n<arguments.length;++n)e[n]=arguments[n];for(;null!==(n=pt.call(this));)dt.call(this,n);for(n=(e=u(e)).next();!n.done;n=e.next())n=n.value,ht.call(this,"string"==typeof n?document.createTextNode(n):n)}})}vt(Document),vt(DocumentFragment),vt(Element);var yt,mt,_t,bt,gt=Node.prototype.insertBefore,wt=null!==(mt=null===(yt=Object.getOwnPropertyDescriptor(Node.prototype,"parentNode"))||void 0===yt?void 0:yt.get)&&void 0!==mt?mt:function(){return this.parentNode},Et=null!==(bt=null===(_t=Object.getOwnPropertyDescriptor(Node.prototype,"nextSibling"))||void 0===_t?void 0:_t.get)&&void 0!==bt?bt:function(){return this.nextSibling};function Ct(t){(t=t.prototype).hasOwnProperty("after")||Object.defineProperty(t,"after",{configurable:!0,enumerable:!0,writable:!0,value:function(t){for(var e=[],n=0;n<arguments.length;++n)e[n]=arguments[n];if(null!==(n=wt.call(this)))for(var r=Et.call(this),o=(e=u(e)).next();!o.done;o=e.next())o=o.value,gt.call(n,"string"==typeof o?document.createTextNode(o):o,r)}})}Ct(CharacterData),Ct(Element);var Nt,St,xt=Node.prototype.insertBefore,Tt=null!==(St=null===(Nt=Object.getOwnPropertyDescriptor(Node.prototype,"parentNode"))||void 0===Nt?void 0:Nt.get)&&void 0!==St?St:function(){return this.parentNode};function Ot(t){(t=t.prototype).hasOwnProperty("before")||Object.defineProperty(t,"before",{configurable:!0,enumerable:!0,writable:!0,value:function(t){for(var e=[],n=0;n<arguments.length;++n)e[n]=arguments[n];if(null!==(n=Tt.call(this)))for(var r=(e=u(e)).next();!r.done;r=e.next())r=r.value,xt.call(n,"string"==typeof r?document.createTextNode(r):r,this)}})}Ot(CharacterData),Ot(Element);var Dt,At,Pt=Node.prototype.removeChild,Mt=null!==(At=null===(Dt=Object.getOwnPropertyDescriptor(Node.prototype,"parentNode"))||void 0===Dt?void 0:Dt.get)&&void 0!==At?At:function(){return this.parentNode};function jt(t){(t=t.prototype).hasOwnProperty("remove")||Object.defineProperty(t,"remove",{configurable:!0,enumerable:!0,writable:!0,value:function(){var t=Mt.call(this);t&&Pt.call(t,this)}})}jt(CharacterData),jt(Element);var Lt,kt,It=Node.prototype.insertBefore,Ft=Node.prototype.removeChild,Rt=null!==(kt=null===(Lt=Object.getOwnPropertyDescriptor(Node.prototype,"parentNode"))||void 0===Lt?void 0:Lt.get)&&void 0!==kt?kt:function(){return this.parentNode};function Ht(t){(t=t.prototype).hasOwnProperty("replaceWith")||Object.defineProperty(t,"replaceWith",{configurable:!0,enumerable:!0,writable:!0,value:function(t){for(var e=[],n=0;n<arguments.length;++n)e[n]=arguments[n];if(null!==(n=Rt.call(this))){for(var r=(e=u(e)).next();!r.done;r=e.next())r=r.value,It.call(n,"string"==typeof r?document.createTextNode(r):r,this);Ft.call(n,this)}}})}Ht(CharacterData),Ht(Element);var Ut=window.Element.prototype,Bt=window.HTMLElement.prototype,Wt=window.SVGElement.prototype;!Bt.hasOwnProperty("classList")||Ut.hasOwnProperty("classList")||Wt.hasOwnProperty("classList")||Object.defineProperty(Ut,"classList",Object.getOwnPropertyDescriptor(Bt,"classList"));var qt=document.createElement("style");qt.textContent="body {transition: opacity ease-in 0.2s; } \nbody[unresolved] {opacity: 0; display: block; overflow: hidden; position: relative; } \n";var Vt=document.querySelector("head");Vt.insertBefore(qt,Vt.firstChild);var Gt=window;Gt.WebComponents=Gt.WebComponents||{flags:{}};var zt=document.querySelector('script[src*="webcomponents-bundle"]'),Kt=/wc-(.+)/,Xt={};if(!Xt.noOpts){if(location.search.slice(1).split("&").forEach((function(t){var e;(t=t.split("="))[0]&&(e=t[0].match(Kt))&&(Xt[e[1]]=t[1]||!0)})),zt)for(var Yt=0,$t=void 0;$t=zt.attributes[Yt];Yt++)"src"!==$t.name&&(Xt[$t.name]=$t.value||!0);var Jt={};Xt.log&&Xt.log.split&&Xt.log.split(",").forEach((function(t){Jt[t]=!0})),Xt.log=Jt}Gt.WebComponents.flags=Xt;var Zt=Xt.shadydom;if(Zt){Gt.ShadyDOM=Gt.ShadyDOM||{},Gt.ShadyDOM.force=Zt;var Qt=Xt.noPatch;Gt.ShadyDOM.noPatch="true"===Qt||Qt}var te=Xt.register||Xt.ce;function ee(){}function ne(t){return t.__shady||(t.__shady=new ee),t.__shady}function re(t){return t&&t.__shady}te&&window.customElements&&(Gt.customElements.forcePolyfill=te),function(){function t(){}function e(t,e){if(!t.childNodes.length)return[];switch(t.nodeType){case Node.DOCUMENT_NODE:return v.call(t,e);case Node.DOCUMENT_FRAGMENT_NODE:return y.call(t,e);default:return p.call(t,e)}}var n="undefined"==typeof HTMLTemplateElement,r=!(document.createDocumentFragment().cloneNode()instanceof DocumentFragment),o=!1;/Trident/.test(navigator.userAgent)&&function(){function t(t,e){if(t instanceof DocumentFragment)for(var r;r=t.firstChild;)n.call(this,r,e);else n.call(this,t,e);return t}o=!0;var e=Node.prototype.cloneNode;Node.prototype.cloneNode=function(t){return t=e.call(this,t),this instanceof DocumentFragment&&(t.__proto__=DocumentFragment.prototype),t},DocumentFragment.prototype.querySelectorAll=HTMLElement.prototype.querySelectorAll,DocumentFragment.prototype.querySelector=HTMLElement.prototype.querySelector,Object.defineProperties(DocumentFragment.prototype,{nodeType:{get:function(){return Node.DOCUMENT_FRAGMENT_NODE},configurable:!0},localName:{get:function(){},configurable:!0},nodeName:{get:function(){return"#document-fragment"},configurable:!0}});var n=Node.prototype.insertBefore;Node.prototype.insertBefore=t;var r=Node.prototype.appendChild;Node.prototype.appendChild=function(e){return e instanceof DocumentFragment?t.call(this,e,null):r.call(this,e),e};var i=Node.prototype.removeChild,a=Node.prototype.replaceChild;Node.prototype.replaceChild=function(e,n){return e instanceof DocumentFragment?(t.call(this,e,n),i.call(this,n)):a.call(this,e,n),n},Document.prototype.createDocumentFragment=function(){var t=this.createElement("df");return t.__proto__=DocumentFragment.prototype,t};var s=Document.prototype.importNode;Document.prototype.importNode=function(t,e){return e=s.call(this,t,e||!1),t instanceof DocumentFragment&&(e.__proto__=DocumentFragment.prototype),e}}();var i=Node.prototype.cloneNode,a=Document.prototype.createElement,s=Document.prototype.importNode,u=Node.prototype.removeChild,c=Node.prototype.appendChild,l=Node.prototype.replaceChild,f=DOMParser.prototype.parseFromString,h=Object.getOwnPropertyDescriptor(window.HTMLElement.prototype,"innerHTML")||{get:function(){return this.innerHTML},set:function(t){this.innerHTML=t}},d=Object.getOwnPropertyDescriptor(window.Node.prototype,"childNodes")||{get:function(){return this.childNodes}},p=Element.prototype.querySelectorAll,v=Document.prototype.querySelectorAll,y=DocumentFragment.prototype.querySelectorAll,m=function(){if(!n){var t=document.createElement("template"),e=document.createElement("template");return e.content.appendChild(document.createElement("div")),t.content.appendChild(e),0===(t=t.cloneNode(!0)).content.childNodes.length||0===t.content.firstChild.content.childNodes.length||r}}();if(n){var _=document.implementation.createHTMLDocument("template"),b=!0,g=document.createElement("style");g.textContent="template{display:none;}";var w=document.head;w.insertBefore(g,w.firstElementChild),t.prototype=Object.create(HTMLElement.prototype);var E=!document.createElement("div").hasOwnProperty("innerHTML");t.Z=function(e){if(!e.content&&e.namespaceURI===document.documentElement.namespaceURI){e.content=_.createDocumentFragment();for(var n;n=e.firstChild;)c.call(e.content,n);if(E)e.__proto__=t.prototype;else if(e.cloneNode=function(e){return t.sa(this,e)},b)try{N(e),S(e)}catch(t){b=!1}t.bootstrap(e.content)}};var C={option:["select"],thead:["table"],col:["colgroup","table"],tr:["tbody","table"],th:["tr","tbody","table"],td:["tr","tbody","table"]},N=function(e){Object.defineProperty(e,"innerHTML",{get:function(){return P(this)},set:function(e){var n=C[(/<([a-z][^/\0>\x20\t\r\n\f]+)/i.exec(e)||["",""])[1].toLowerCase()];if(n)for(var r=0;r<n.length;r++)e="<"+n[r]+">"+e+"</"+n[r]+">";for(_.body.innerHTML=e,t.bootstrap(_);this.content.firstChild;)u.call(this.content,this.content.firstChild);if(e=_.body,n)for(r=0;r<n.length;r++)e=e.lastChild;for(;e.firstChild;)c.call(this.content,e.firstChild)},configurable:!0})},S=function(t){Object.defineProperty(t,"outerHTML",{get:function(){return"<template>"+this.innerHTML+"</template>"},set:function(t){if(!this.parentNode)throw Error("Failed to set the 'outerHTML' property on 'Element': This element has no parent node.");for(_.body.innerHTML=t,t=this.ownerDocument.createDocumentFragment();_.body.firstChild;)c.call(t,_.body.firstChild);l.call(this.parentNode,t,this)},configurable:!0})};N(t.prototype),S(t.prototype),t.bootstrap=function(n){for(var r,o=0,i=(n=e(n,"template")).length;o<i&&(r=n[o]);o++)t.Z(r)},document.addEventListener("DOMContentLoaded",(function(){t.bootstrap(document)})),Document.prototype.createElement=function(){var e=a.apply(this,arguments);return"template"===e.localName&&t.Z(e),e},DOMParser.prototype.parseFromString=function(){var e=f.apply(this,arguments);return t.bootstrap(e),e},Object.defineProperty(HTMLElement.prototype,"innerHTML",{get:function(){return P(this)},set:function(e){h.set.call(this,e),t.bootstrap(this)},configurable:!0,enumerable:!0});var x=/[&\u00A0"]/g,T=/[&\u00A0<>]/g,O=function(t){switch(t){case"&":return"&amp;";case"<":return"&lt;";case">":return"&gt;";case'"':return"&quot;";case" ":return"&nbsp;"}},D=(g=function(t){for(var e={},n=0;n<t.length;n++)e[t[n]]=!0;return e})("area base br col command embed hr img input keygen link meta param source track wbr".split(" ")),A=g("style script xmp iframe noembed noframes plaintext noscript".split(" ")),P=function(t,e){"template"===t.localName&&(t=t.content);for(var n,r="",o=e?e(t):d.get.call(t),i=0,a=o.length;i<a&&(n=o[i]);i++){t:{var s=n,u=t,c=e;switch(s.nodeType){case Node.ELEMENT_NODE:for(var l=s.localName,f="<"+l,h=s.attributes,p=0;u=h[p];p++)f+=" "+u.name+'="'+u.value.replace(x,O)+'"';f+=">",s=D[l]?f:f+P(s,c)+"</"+l+">";break t;case Node.TEXT_NODE:s=s.data,s=u&&A[u.localName]?s:s.replace(T,O);break t;case Node.COMMENT_NODE:s="\x3c!--"+s.data+"--\x3e";break t;default:throw window.console.error(s),Error("not implemented")}}r+=s}return r}}if(n||m){t.sa=function(t,e){var n=i.call(t,!1);return this.Z&&this.Z(n),e&&(c.call(n.content,i.call(t.content,!0)),M(n.content,t.content)),n};var M=function(n,r){if(r.querySelectorAll&&0!==(r=e(r,"template")).length)for(var o,i,a=0,s=(n=e(n,"template")).length;a<s;a++)i=r[a],o=n[a],t&&t.Z&&t.Z(i),l.call(o.parentNode,j.call(i,!0),o)},j=Node.prototype.cloneNode=function(e){if(!o&&r&&this instanceof DocumentFragment){if(!e)return this.ownerDocument.createDocumentFragment();var n=L.call(this.ownerDocument,this,!0)}else n=this.nodeType===Node.ELEMENT_NODE&&"template"===this.localName&&this.namespaceURI==document.documentElement.namespaceURI?t.sa(this,e):i.call(this,e);return e&&M(n,this),n},L=Document.prototype.importNode=function(n,r){if(r=r||!1,"template"===n.localName)return t.sa(n,r);var o=s.call(this,n,r);if(r){M(o,n),n=e(o,'script:not([type]),script[type="application/javascript"],script[type="text/javascript"]');for(var i,u=0;u<n.length;u++){i=n[u],(r=a.call(document,"script")).textContent=i.textContent;for(var c,f=i.attributes,h=0;h<f.length;h++)c=f[h],r.setAttribute(c.name,c.value);l.call(i.parentNode,r,i)}}return o}}n&&(window.HTMLTemplateElement=t)}(),ee.prototype.toJSON=function(){return{}};var oe=window.ShadyDOM||{};oe.Ya=!(!Element.prototype.attachShadow||!Node.prototype.getRootNode);var ie=Object.getOwnPropertyDescriptor(Node.prototype,"firstChild");function ae(){return Document.prototype.msElementsFromPoint?"msElementsFromPoint":"elementsFromPoint"}function se(t){return(t=re(t))&&void 0!==t.firstChild}function ue(t){return t instanceof ShadowRoot}function ce(t){return(t=(t=re(t))&&t.root)&&Yr(t)}oe.H=!!(ie&&ie.configurable&&ie.get),oe.ya=oe.force||!oe.Ya,oe.J=oe.noPatch||!1,oe.fa=oe.preferPerformance,oe.Aa="on-demand"===oe.J,oe.Na=navigator.userAgent.match("Trident");var le=Element.prototype,fe=le.matches||le.matchesSelector||le.mozMatchesSelector||le.msMatchesSelector||le.oMatchesSelector||le.webkitMatchesSelector,he=document.createTextNode(""),de=0,pe=[];function ve(t){pe.push(t),he.textContent=de++}new MutationObserver((function(){for(;pe.length;)try{pe.shift()()}catch(t){throw he.textContent=de++,t}})).observe(he,{characterData:!0});var ye=document.contains?function(t,e){return t.__shady_native_contains(e)}:function(t,e){return t===e||t.documentElement&&t.documentElement.__shady_native_contains(e)};function me(t,e){for(;e;){if(e==t)return!0;e=e.__shady_parentNode}return!1}function _e(t){for(var e=t.length-1;0<=e;e--){var n=t[e],r=n.getAttribute("id")||n.getAttribute("name");r&&"length"!==r&&isNaN(r)&&(t[r]=n)}return t.item=function(e){return t[e]},t.namedItem=function(e){if("length"!==e&&isNaN(e)&&t[e])return t[e];for(var n=u(t),r=n.next();!r.done;r=n.next())if(((r=r.value).getAttribute("id")||r.getAttribute("name"))==e)return r;return null},t}function be(t){var e=[];for(t=t.__shady_native_firstChild;t;t=t.__shady_native_nextSibling)e.push(t);return e}function ge(t){var e=[];for(t=t.__shady_firstChild;t;t=t.__shady_nextSibling)e.push(t);return e}function we(t,e,n){if(n.configurable=!0,n.value)t[e]=n.value;else try{Object.defineProperty(t,e,n)}catch(t){}}function Ee(t,e,n,r){for(var o in n=void 0===n?"":n,e)r&&0<=r.indexOf(o)||we(t,n+o,e[o])}function Ce(t,e){for(var n in e)n in t&&we(t,n,e[n])}function Ne(t){var e={};return Object.getOwnPropertyNames(t).forEach((function(n){e[n]=Object.getOwnPropertyDescriptor(t,n)})),e}function Se(t,e){for(var n,r=Object.getOwnPropertyNames(e),o=0;o<r.length;o++)t[n=r[o]]=e[n]}function xe(t){return t instanceof Node?t:document.createTextNode(""+t)}function Te(t){for(var e=[],n=0;n<arguments.length;++n)e[n]=arguments[n];if(1===e.length)return xe(e[0]);n=document.createDocumentFragment();for(var r=(e=u(e)).next();!r.done;r=e.next())n.appendChild(xe(r.value));return n}var Oe,De=[];function Ae(t){Oe||(Oe=!0,ve(Pe)),De.push(t)}function Pe(){Oe=!1;for(var t=!!De.length;De.length;)De.shift()();return t}function Me(){this.g=!1,this.addedNodes=[],this.removedNodes=[],this.oa=new Set}Pe.list=De,Me.prototype.flush=function(){if(this.g){this.g=!1;var t=this.takeRecords();t.length&&this.oa.forEach((function(e){e(t)}))}},Me.prototype.takeRecords=function(){if(this.addedNodes.length||this.removedNodes.length){var t=[{addedNodes:this.addedNodes,removedNodes:this.removedNodes}];return this.addedNodes=[],this.removedNodes=[],t}return[]};var je=/[&\u00A0"]/g,Le=/[&\u00A0<>]/g;function ke(t){switch(t){case"&":return"&amp;";case"<":return"&lt;";case">":return"&gt;";case'"':return"&quot;";case" ":return"&nbsp;"}}function Ie(t){for(var e={},n=0;n<t.length;n++)e[t[n]]=!0;return e}var Fe=Ie("area base br col command embed hr img input keygen link meta param source track wbr".split(" ")),Re=Ie("style script xmp iframe noembed noframes plaintext noscript".split(" "));function He(t,e){"template"===t.localName&&(t=t.content);for(var n="",r=e?e(t):t.childNodes,o=0,i=r.length,a=void 0;o<i&&(a=r[o]);o++){t:{var s=a,u=t,c=e;switch(s.nodeType){case Node.ELEMENT_NODE:for(var l,f="<"+(u=s.localName),h=s.attributes,d=0;l=h[d];d++)f+=" "+l.name+'="'+l.value.replace(je,ke)+'"';f+=">",s=Fe[u]?f:f+He(s,c)+"</"+u+">";break t;case Node.TEXT_NODE:s=s.data,s=u&&Re[u.localName]?s:s.replace(Le,ke);break t;case Node.COMMENT_NODE:s="\x3c!--"+s.data+"--\x3e";break t;default:throw window.console.error(s),Error("not implemented")}}n+=s}return n}var Ue=oe.H,Be={querySelector:function(t){return this.__shady_native_querySelector(t)},querySelectorAll:function(t){return this.__shady_native_querySelectorAll(t)}},We={};function qe(t){We[t]=function(e){return e["__shady_native_"+t]}}function Ve(t,e){for(var n in Ee(t,e,"__shady_native_"),e)qe(n)}function Ge(t,e){e=void 0===e?[]:e;for(var n=0;n<e.length;n++){var r=e[n],o=Object.getOwnPropertyDescriptor(t,r);o&&(Object.defineProperty(t,"__shady_native_"+r,o),o.value?Be[r]||(Be[r]=o.value):qe(r))}}var ze=document.createTreeWalker(document,NodeFilter.SHOW_ALL,null,!1),Ke=document.createTreeWalker(document,NodeFilter.SHOW_ELEMENT,null,!1),Xe=document.implementation.createHTMLDocument("inert");function Ye(t){for(var e;e=t.__shady_native_firstChild;)t.__shady_native_removeChild(e)}var $e=["firstElementChild","lastElementChild","children","childElementCount"],Je=["querySelector","querySelectorAll","append","prepend","replaceChildren"],Ze=Ne({get childNodes(){return this.__shady_childNodes},get firstChild(){return this.__shady_firstChild},get lastChild(){return this.__shady_lastChild},get childElementCount(){return this.__shady_childElementCount},get children(){return this.__shady_children},get firstElementChild(){return this.__shady_firstElementChild},get lastElementChild(){return this.__shady_lastElementChild},get shadowRoot(){return this.__shady_shadowRoot}}),Qe=Ne({get textContent(){return this.__shady_textContent},set textContent(t){this.__shady_textContent=t},get innerHTML(){return this.__shady_innerHTML},set innerHTML(t){this.__shady_innerHTML=t}}),tn=Ne({get parentElement(){return this.__shady_parentElement},get parentNode(){return this.__shady_parentNode},get nextSibling(){return this.__shady_nextSibling},get previousSibling(){return this.__shady_previousSibling},get nextElementSibling(){return this.__shady_nextElementSibling},get previousElementSibling(){return this.__shady_previousElementSibling},get className(){return this.__shady_className},set className(t){this.__shady_className=t}});function en(t){for(var e in t){var n=t[e];n&&(n.enumerable=!1)}}en(Ze),en(Qe),en(tn);var nn=oe.H||!0===oe.J,rn=nn?function(){}:function(t){var e=ne(t);e.Pa||(e.Pa=!0,Ce(t,tn))},on=nn?function(){}:function(t){var e=ne(t);e.Oa||(e.Oa=!0,Ce(t,Ze),window.customElements&&window.customElements.polyfillWrapFlushCallback&&!oe.J||Ce(t,Qe))},an="__eventWrappers"+Date.now(),sn=function(){var t=Object.getOwnPropertyDescriptor(Event.prototype,"composed");return t?function(e){return t.get.call(e)}:null}(),un=function(){function t(){}var e=!1,n={get capture(){return e=!0,!1}};return window.addEventListener("test",t,n),window.removeEventListener("test",t,n),e}();function cn(t){if(t&&"object"==typeof t)var e=!!t.capture,n=!!t.once,r=!!t.passive,o=t.U;else e=!!t,r=n=!1;return{La:o,capture:e,once:n,passive:r,Ja:un?t:e}}var ln={blur:!0,focus:!0,focusin:!0,focusout:!0,click:!0,dblclick:!0,mousedown:!0,mouseenter:!0,mouseleave:!0,mousemove:!0,mouseout:!0,mouseover:!0,mouseup:!0,wheel:!0,beforeinput:!0,input:!0,keydown:!0,keyup:!0,compositionstart:!0,compositionupdate:!0,compositionend:!0,touchstart:!0,touchend:!0,touchmove:!0,touchcancel:!0,pointerover:!0,pointerenter:!0,pointerdown:!0,pointermove:!0,pointerup:!0,pointercancel:!0,pointerout:!0,pointerleave:!0,gotpointercapture:!0,lostpointercapture:!0,dragstart:!0,drag:!0,dragenter:!0,dragleave:!0,dragover:!0,drop:!0,dragend:!0,DOMActivate:!0,DOMFocusIn:!0,DOMFocusOut:!0,keypress:!0},fn={DOMAttrModified:!0,DOMAttributeNameChanged:!0,DOMCharacterDataModified:!0,DOMElementNameChanged:!0,DOMNodeInserted:!0,DOMNodeInsertedIntoDocument:!0,DOMNodeRemoved:!0,DOMNodeRemovedFromDocument:!0,DOMSubtreeModified:!0};function hn(t){return t instanceof Node?t.__shady_getRootNode():t}function dn(t,e){var n=[],r=t;for(t=hn(t);r;)n.push(r),r=r.__shady_assignedSlot?r.__shady_assignedSlot:r.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&r.host&&(e||r!==t)?r.host:r.__shady_parentNode;return n[n.length-1]===document&&n.push(window),n}function pn(t,e){if(!ue)return t;t=dn(t,!0);for(var n,r,o=0,i=void 0,a=void 0;o<e.length;o++)if((r=hn(n=e[o]))!==i&&(a=t.indexOf(r),i=r),!ue(r)||-1<a)return n}function vn(t){function e(e,n){return(e=new t(e,n)).__composed=n&&!!n.composed,e}return e.__proto__=t,e.prototype=t.prototype,e}var yn={focus:!0,blur:!0};function mn(t){return t.__target!==t.target||t.__relatedTarget!==t.relatedTarget}function _n(t,e,n){if(n=e.__handlers&&e.__handlers[t.type]&&e.__handlers[t.type][n])for(var r,o=0;(r=n[o])&&(!mn(t)||t.target!==t.relatedTarget)&&(r.call(e,t),!t.__immediatePropagationStopped);o++);}function bn(t){var e=t.composedPath(),n=e.map((function(t){return pn(t,e)})),r=t.bubbles;Object.defineProperty(t,"currentTarget",{configurable:!0,enumerable:!0,get:function(){return a}});var o=Event.CAPTURING_PHASE;Object.defineProperty(t,"eventPhase",{configurable:!0,enumerable:!0,get:function(){return o}});for(var i=e.length-1;0<=i;i--){var a=e[i];if(o=a===n[i]?Event.AT_TARGET:Event.CAPTURING_PHASE,_n(t,a,"capture"),t.ra)return}for(i=0;i<e.length;i++){var s=(a=e[i])===n[i];if((s||r)&&(o=s?Event.AT_TARGET:Event.BUBBLING_PHASE,_n(t,a,"bubble"),t.ra))return}o=0,a=null}function gn(t,e,n,r,o,i){for(var a=0;a<t.length;a++){var s=t[a],u=s.type,c=s.capture,l=s.once,f=s.passive;if(e===s.node&&n===u&&r===c&&o===l&&i===f)return a}return-1}function wn(t){return Pe(),!oe.fa&&this instanceof Node&&!ye(document,this)?(t.__target||Sn(t,this),bn(t)):this.__shady_native_dispatchEvent(t)}function En(t,e,n){var r=cn(n),o=r.capture,i=r.once,a=r.passive,s=r.La;if(r=r.Ja,e){var u=typeof e;if(("function"===u||"object"===u)&&("object"!==u||e.handleEvent&&"function"==typeof e.handleEvent)){if(fn[t])return this.__shady_native_addEventListener(t,e,r);var c=s||this;if(s=e[an]){if(-1<gn(s,c,t,o,i,a))return}else e[an]=[];s=function(r){if(i&&this.__shady_removeEventListener(t,e,n),r.__target||Sn(r),c!==this){var a=Object.getOwnPropertyDescriptor(r,"currentTarget");Object.defineProperty(r,"currentTarget",{get:function(){return c},configurable:!0});var s=Object.getOwnPropertyDescriptor(r,"eventPhase");Object.defineProperty(r,"eventPhase",{configurable:!0,enumerable:!0,get:function(){return o?Event.CAPTURING_PHASE:Event.BUBBLING_PHASE}})}if(r.__previousCurrentTarget=r.currentTarget,(!ue(c)&&"slot"!==c.localName||-1!=r.composedPath().indexOf(c))&&(r.composed||-1<r.composedPath().indexOf(c)))if(mn(r)&&r.target===r.relatedTarget)r.eventPhase===Event.BUBBLING_PHASE&&r.stopImmediatePropagation();else if(r.eventPhase===Event.CAPTURING_PHASE||r.bubbles||r.target===c||c instanceof Window){var l="function"===u?e.call(c,r):e.handleEvent&&e.handleEvent(r);return c!==this&&(a?(Object.defineProperty(r,"currentTarget",a),a=null):delete r.currentTarget,s?(Object.defineProperty(r,"eventPhase",s),s=null):delete r.eventPhase),l}},e[an].push({node:c,type:t,capture:o,once:i,passive:a,pb:s}),this.__handlers=this.__handlers||{},this.__handlers[t]=this.__handlers[t]||{capture:[],bubble:[]},this.__handlers[t][o?"capture":"bubble"].push(s),yn[t]||this.__shady_native_addEventListener(t,s,r)}}}function Cn(t,e,n){if(e){var r=cn(n);n=r.capture;var o=r.once,i=r.passive,a=r.La;if(r=r.Ja,fn[t])return this.__shady_native_removeEventListener(t,e,r);var s=a||this;a=void 0;var u=null;try{u=e[an]}catch(t){}u&&-1<(o=gn(u,s,t,n,o,i))&&(a=u.splice(o,1)[0].pb,u.length||(e[an]=void 0)),this.__shady_native_removeEventListener(t,a||e,r),a&&this.__handlers&&this.__handlers[t]&&-1<(e=(t=this.__handlers[t][n?"capture":"bubble"]).indexOf(a))&&t.splice(e,1)}}var Nn=Ne({get composed(){return void 0===this.__composed&&(sn?this.__composed="focusin"===this.type||"focusout"===this.type||sn(this):!1!==this.isTrusted&&(this.__composed=ln[this.type])),this.__composed||!1},composedPath:function(){return this.__composedPath||(this.__composedPath=dn(this.__target,this.composed)),this.__composedPath},get target(){return pn(this.currentTarget||this.__previousCurrentTarget,this.composedPath())},get relatedTarget(){return this.__relatedTarget?(this.__relatedTargetComposedPath||(this.__relatedTargetComposedPath=dn(this.__relatedTarget,!0)),pn(this.currentTarget||this.__previousCurrentTarget,this.__relatedTargetComposedPath)):null},stopPropagation:function(){Event.prototype.stopPropagation.call(this),this.ra=!0},stopImmediatePropagation:function(){Event.prototype.stopImmediatePropagation.call(this),this.ra=this.__immediatePropagationStopped=!0}});function Sn(t,e){if(e=void 0===e?t.target:e,t.__target=e,t.__relatedTarget=t.relatedTarget,oe.H){if(!(e=Object.getPrototypeOf(t)).hasOwnProperty("__shady_patchedProto")){var n=Object.create(e);n.__shady_sourceProto=e,Ee(n,Nn),e.__shady_patchedProto=n}t.__proto__=e.__shady_patchedProto}else Ee(t,Nn)}var xn=vn(Event),Tn=vn(CustomEvent),On=vn(MouseEvent),Dn=Object.getOwnPropertyNames(Element.prototype).filter((function(t){return"on"===t.substring(0,2)})),An=Object.getOwnPropertyNames(HTMLElement.prototype).filter((function(t){return"on"===t.substring(0,2)}));function Pn(t){return{set:function(e){var n=ne(this),r=t.substring(2);n.T||(n.T={}),n.T[t]&&this.removeEventListener(r,n.T[t]),this.__shady_addEventListener(r,e),n.T[t]=e},get:function(){var e=re(this);return e&&e.T&&e.T[t]},configurable:!0}}function Mn(t,e){return{index:t,ga:[],na:e}}function jn(t,e,n,r){var o=0,i=0,a=0,s=0,u=Math.min(e-o,r-i);if(0==o&&0==i)t:{for(a=0;a<u;a++)if(t[a]!==n[a])break t;a=u}if(e==t.length&&r==n.length){s=t.length;for(var c=n.length,l=0;l<u-a&&Ln(t[--s],n[--c]);)l++;s=l}if(i+=a,r-=s,0==(e-=s)-(o+=a)&&0==r-i)return[];if(o==e){for(e=Mn(o,0);i<r;)e.ga.push(n[i++]);return[e]}if(i==r)return[Mn(o,e-o)];for(r=r-(a=i)+1,s=e-(u=o)+1,e=Array(r),c=0;c<r;c++)e[c]=Array(s),e[c][0]=c;for(c=0;c<s;c++)e[0][c]=c;for(c=1;c<r;c++)for(l=1;l<s;l++)if(t[u+l-1]===n[a+c-1])e[c][l]=e[c-1][l-1];else{var f=e[c-1][l]+1,h=e[c][l-1]+1;e[c][l]=f<h?f:h}for(u=e.length-1,a=e[0].length-1,r=e[u][a],t=[];0<u||0<a;)0==u?(t.push(2),a--):0==a?(t.push(3),u--):(s=e[u-1][a-1],(f=(c=e[u-1][a])<(l=e[u][a-1])?c<s?c:s:l<s?l:s)==s?(s==r?t.push(0):(t.push(1),r=s),u--,a--):f==c?(t.push(3),u--,r=c):(t.push(2),a--,r=l));for(t.reverse(),e=void 0,u=[],a=0;a<t.length;a++)switch(t[a]){case 0:e&&(u.push(e),e=void 0),o++,i++;break;case 1:e||(e=Mn(o,0)),e.na++,o++,e.ga.push(n[i]),i++;break;case 2:e||(e=Mn(o,0)),e.na++,o++;break;case 3:e||(e=Mn(o,0)),e.ga.push(n[i]),i++}return e&&u.push(e),u}function Ln(t,e){return t===e}var kn=Ne({dispatchEvent:wn,addEventListener:En,removeEventListener:Cn}),In=null;function Fn(){return In||(In=window.ShadyCSS&&window.ShadyCSS.ScopingShim),In||null}function Rn(t,e,n){var r=Fn();return!(!r||"class"!==e||(r.setElementClass(t,n),0))}function Hn(t,e){var n=Fn();n&&n.unscopeNode(t,e)}function Un(t,e){var n=Fn();if(!n)return!0;if(t.nodeType===Node.DOCUMENT_FRAGMENT_NODE){for(n=!0,t=t.__shady_firstChild;t;t=t.__shady_nextSibling)n=n&&Un(t,e);return n}return t.nodeType!==Node.ELEMENT_NODE||n.currentScopeForNode(t)===e}function Bn(t){if(t.nodeType!==Node.ELEMENT_NODE)return"";var e=Fn();return e?e.currentScopeForNode(t):""}function Wn(t,e){if(t)for(t.nodeType===Node.ELEMENT_NODE&&e(t),t=t.__shady_firstChild;t;t=t.__shady_nextSibling)t.nodeType===Node.ELEMENT_NODE&&Wn(t,e)}var qn=window.document,Vn=oe.fa,Gn=Object.getOwnPropertyDescriptor(Node.prototype,"isConnected"),zn=Gn&&Gn.get;function Kn(t){for(var e;e=t.__shady_firstChild;)t.__shady_removeChild(e)}function Xn(t){var e=re(t);if(e&&void 0!==e.qa)for(e=t.__shady_firstChild;e;e=e.__shady_nextSibling)Xn(e);(t=re(t))&&(t.qa=void 0)}function Yn(t){var e=t;if(t&&"slot"===t.localName){var n=re(t);(n=n&&n.aa)&&(e=n.length?n[0]:Yn(t.__shady_nextSibling))}return e}function $n(t,e,n){if(t=(t=re(t))&&t.ea){if(e)if(e.nodeType===Node.DOCUMENT_FRAGMENT_NODE)for(var r=0,o=e.childNodes.length;r<o;r++)t.addedNodes.push(e.childNodes[r]);else t.addedNodes.push(e);n&&t.removedNodes.push(n),function(t){t.g||(t.g=!0,ve((function(){t.flush()})))}(t)}}var Jn=Ne({get parentNode(){var t=re(this);return void 0!==(t=t&&t.parentNode)?t:this.__shady_native_parentNode},get firstChild(){var t=re(this);return void 0!==(t=t&&t.firstChild)?t:this.__shady_native_firstChild},get lastChild(){var t=re(this);return void 0!==(t=t&&t.lastChild)?t:this.__shady_native_lastChild},get nextSibling(){var t=re(this);return void 0!==(t=t&&t.nextSibling)?t:this.__shady_native_nextSibling},get previousSibling(){var t=re(this);return void 0!==(t=t&&t.previousSibling)?t:this.__shady_native_previousSibling},get childNodes(){if(se(this)){var t=re(this);if(!t.childNodes){t.childNodes=[];for(var e=this.__shady_firstChild;e;e=e.__shady_nextSibling)t.childNodes.push(e)}var n=t.childNodes}else n=this.__shady_native_childNodes;return n.item=function(t){return n[t]},n},get parentElement(){var t=re(this);return(t=t&&t.parentNode)&&t.nodeType!==Node.ELEMENT_NODE&&(t=null),void 0!==t?t:this.__shady_native_parentElement},get isConnected(){if(zn&&zn.call(this))return!0;if(this.nodeType==Node.DOCUMENT_FRAGMENT_NODE)return!1;var t=this.ownerDocument;if(null===t||ye(t,this))return!0;for(t=this;t&&!(t instanceof Document);)t=t.__shady_parentNode||(ue(t)?t.host:void 0);return!!(t&&t instanceof Document)},get textContent(){if(se(this)){for(var t=[],e=this.__shady_firstChild;e;e=e.__shady_nextSibling)e.nodeType!==Node.COMMENT_NODE&&t.push(e.__shady_textContent);return t.join("")}return this.__shady_native_textContent},set textContent(t){switch(null==t&&(t=""),this.nodeType){case Node.ELEMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:if(!se(this)&&oe.H){var e=this.__shady_firstChild;(e!=this.__shady_lastChild||e&&e.nodeType!=Node.TEXT_NODE)&&Kn(this),this.__shady_native_textContent=t}else Kn(this),(0<t.length||this.nodeType===Node.ELEMENT_NODE)&&this.__shady_insertBefore(document.createTextNode(t));break;default:this.nodeValue=t}},insertBefore:function(t,e){if(this.ownerDocument!==qn&&t.ownerDocument!==qn)return this.__shady_native_insertBefore(t,e),t;if(t===this)throw Error("Failed to execute 'appendChild' on 'Node': The new child element contains the parent.");if(e){var n=re(e);if(void 0!==(n=n&&n.parentNode)&&n!==this||void 0===n&&e.__shady_native_parentNode!==this)throw Error("Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.")}if(e===t)return t;$n(this,t);var r=[],o=(n=Qr(this))?n.host.localName:Bn(this),i=t.__shady_parentNode;if(i){var a=Bn(t),s=!!n||!Qr(t)||Vn&&void 0!==this.__noInsertionPoint;i.__shady_removeChild(t,s)}i=!0;var u=(!Vn||void 0===t.__noInsertionPoint&&void 0===this.__noInsertionPoint)&&!Un(t,o),l=n&&!t.__noInsertionPoint&&(!Vn||t.nodeType===Node.DOCUMENT_FRAGMENT_NODE);return(l||u)&&(u&&(a=a||Bn(t)),Wn(t,(function(t){if(l&&"slot"===t.localName&&r.push(t),u){var e=a;Fn()&&(e&&Hn(t,e),(e=Fn())&&e.scopeNode(t,o))}}))),r.length&&(Gr(n),n.i.push.apply(n.i,c(r)),Ur(n)),se(this)&&(function(t,e,n){Dr(e,2);var r=ne(e);if(void 0!==r.firstChild&&(r.childNodes=null),t.nodeType===Node.DOCUMENT_FRAGMENT_NODE)for(t=t.__shady_native_firstChild;t;t=t.__shady_native_nextSibling)Ar(t,e,r,n);else Ar(t,e,r,n)}(t,this,e),(s=re(this)).root?(i=!1,ce(this)&&Ur(s.root)):n&&"slot"===this.localName&&(i=!1,Ur(n))),i?(n=ue(this)?this.host:this,e?(e=Yn(e),n.__shady_native_insertBefore(t,e)):n.__shady_native_appendChild(t)):t.ownerDocument!==this.ownerDocument&&this.ownerDocument.adoptNode(t),t},appendChild:function(t){if(this!=t||!ue(t))return this.__shady_insertBefore(t)},removeChild:function(t,e){if(e=void 0!==e&&e,this.ownerDocument!==qn)return this.__shady_native_removeChild(t);if(t.__shady_parentNode!==this)throw Error("The node to be removed is not a child of this node: "+t);$n(this,null,t);var n=Qr(t),r=n&&function(t,e){if(t.g){zr(t);var n,r=t.h;for(n in r)for(var o=r[n],i=0;i<o.length;i++){var a=o[i];if(me(e,a)){o.splice(i,1);var s=t.g.indexOf(a);if(0<=s&&(t.g.splice(s,1),(s=re(a.__shady_parentNode))&&s.ia&&s.ia--),i--,s=(a=re(a)).aa)for(var u=0;u<s.length;u++){var c=s[u],l=c.__shady_native_parentNode;l&&l.__shady_native_removeChild(c)}a.aa=[],a.assignedNodes=[],s=!0}}return s}}(n,t),o=re(this);if(se(this)&&(function(t,e){var n=ne(t);t===(e=ne(e)).firstChild&&(e.firstChild=n.nextSibling),t===e.lastChild&&(e.lastChild=n.previousSibling),t=n.previousSibling;var r=n.nextSibling;t&&(ne(t).nextSibling=r),r&&(ne(r).previousSibling=t),n.parentNode=n.previousSibling=n.nextSibling=void 0,void 0!==e.childNodes&&(e.childNodes=null)}(t,this),ce(this))){Ur(o.root);var i=!0}if(Fn()&&!e&&n&&t.nodeType!==Node.TEXT_NODE){var a=Bn(t);Wn(t,(function(t){Hn(t,a)}))}return Xn(t),n&&((e="slot"===this.localName)&&(i=!0),(r||e)&&Ur(n)),i||(i=ue(this)?this.host:this,(!o.root&&"slot"!==t.localName||i===t.__shady_native_parentNode)&&i.__shady_native_removeChild(t)),t},replaceChild:function(t,e){return this.__shady_insertBefore(t,e),this.__shady_removeChild(e),t},cloneNode:function(t){if("template"==this.localName)return this.__shady_native_cloneNode(t);var e=this.__shady_native_cloneNode(!1);if(t&&e.nodeType!==Node.ATTRIBUTE_NODE){t=this.__shady_firstChild;for(var n;t;t=t.__shady_nextSibling)n=t.__shady_cloneNode(!0),e.__shady_appendChild(n)}return e},getRootNode:function(t){if(this&&this.nodeType){var e=ne(this),n=e.qa;return void 0===n&&(ue(this)?(n=this,e.qa=n):(n=(n=this.__shady_parentNode)?n.__shady_getRootNode(t):this,document.documentElement.__shady_native_contains(this)&&(e.qa=n))),n}},contains:function(t){return me(this,t)}}),Zn=Ne({get assignedSlot(){var t=this.__shady_parentNode;return(t=t&&t.__shady_shadowRoot)&&Br(t),(t=re(this))&&t.assignedSlot||null}});function Qn(t,e,n){var r=[];return tr(t,e,n,r),r}function tr(t,e,n,r){for(t=t.__shady_firstChild;t;t=t.__shady_nextSibling){var o;if(o=t.nodeType===Node.ELEMENT_NODE){var i=e,a=n,s=r,u=i(o=t);u&&s.push(o),a&&a(u)?o=u:(tr(o,i,a,s),o=void 0)}if(o)break}}var er={get firstElementChild(){var t=re(this);if(t&&void 0!==t.firstChild){for(t=this.__shady_firstChild;t&&t.nodeType!==Node.ELEMENT_NODE;)t=t.__shady_nextSibling;return t}return this.__shady_native_firstElementChild},get lastElementChild(){var t=re(this);if(t&&void 0!==t.lastChild){for(t=this.__shady_lastChild;t&&t.nodeType!==Node.ELEMENT_NODE;)t=t.__shady_previousSibling;return t}return this.__shady_native_lastElementChild},get children(){return se(this)?_e(Array.prototype.filter.call(ge(this),(function(t){return t.nodeType===Node.ELEMENT_NODE}))):this.__shady_native_children},get childElementCount(){var t=this.__shady_children;return t?t.length:0}},nr=Ne((er.append=function(t){for(var e=[],n=0;n<arguments.length;++n)e[n]=arguments[n];this.__shady_insertBefore(Te.apply(null,c(e)),null)},er.prepend=function(t){for(var e=[],n=0;n<arguments.length;++n)e[n]=arguments[n];this.__shady_insertBefore(Te.apply(null,c(e)),this.__shady_firstChild)},er.replaceChildren=function(t){for(var e=[],n=0;n<arguments.length;++n)e[n]=arguments[n];for(;null!==(n=this.__shady_firstChild);)this.__shady_removeChild(n);this.__shady_insertBefore(Te.apply(null,c(e)),null)},er)),rr=Ne({querySelector:function(t){return Qn(this,(function(e){return fe.call(e,t)}),(function(t){return!!t}))[0]||null},querySelectorAll:function(t,e){if(e){e=Array.prototype.slice.call(this.__shady_native_querySelectorAll(t));var n=this.__shady_getRootNode();return _e(e.filter((function(t){return t.__shady_getRootNode()==n})))}return _e(Qn(this,(function(e){return fe.call(e,t)})))}}),or=oe.fa&&!oe.J?Se({},nr):nr;Se(nr,rr);var ir=Ne({after:function(t){for(var e=[],n=0;n<arguments.length;++n)e[n]=arguments[n];if(null!==(n=this.__shady_parentNode)){var r=this.__shady_nextSibling;n.__shady_insertBefore(Te.apply(null,c(e)),r)}},before:function(t){for(var e=[],n=0;n<arguments.length;++n)e[n]=arguments[n];null!==(n=this.__shady_parentNode)&&n.__shady_insertBefore(Te.apply(null,c(e)),this)},remove:function(){var t=this.__shady_parentNode;null!==t&&t.__shady_removeChild(this)},replaceWith:function(t){for(var e=[],n=0;n<arguments.length;++n)e[n]=arguments[n];if(null!==(n=this.__shady_parentNode)){var r=this.__shady_nextSibling;n.__shady_removeChild(this),n.__shady_insertBefore(Te.apply(null,c(e)),r)}}}),ar=window.document;function sr(t,e){if("slot"===e)ce(t=t.__shady_parentNode)&&Ur(re(t).root);else if("slot"===t.localName&&"name"===e&&(e=Qr(t))){if(e.g){zr(e);var n=t.Qa,r=Kr(t);if(r!==n){var o=(n=e.h[n]).indexOf(t);0<=o&&n.splice(o,1),(n=e.h[r]||(e.h[r]=[])).push(t),1<n.length&&(e.h[r]=Xr(n))}}Ur(e)}}var ur=Ne({get previousElementSibling(){var t=re(this);if(t&&void 0!==t.previousSibling){for(t=this.__shady_previousSibling;t&&t.nodeType!==Node.ELEMENT_NODE;)t=t.__shady_previousSibling;return t}return this.__shady_native_previousElementSibling},get nextElementSibling(){var t=re(this);if(t&&void 0!==t.nextSibling){for(t=this.__shady_nextSibling;t&&t.nodeType!==Node.ELEMENT_NODE;)t=t.__shady_nextSibling;return t}return this.__shady_native_nextElementSibling},get slot(){return this.getAttribute("slot")},set slot(t){this.__shady_setAttribute("slot",t)},get className(){return this.getAttribute("class")||""},set className(t){this.__shady_setAttribute("class",t)},setAttribute:function(t,e){this.ownerDocument!==ar?this.__shady_native_setAttribute(t,e):Rn(this,t,e)||(this.__shady_native_setAttribute(t,e),sr(this,t))},removeAttribute:function(t){this.ownerDocument!==ar?this.__shady_native_removeAttribute(t):Rn(this,t,"")?""===this.getAttribute(t)&&this.__shady_native_removeAttribute(t):(this.__shady_native_removeAttribute(t),sr(this,t))}});oe.fa||Dn.forEach((function(t){ur[t]=Pn(t)}));var cr=Ne({attachShadow:function(t){if(!this)throw Error("Must provide a host.");if(!t)throw Error("Not enough arguments.");if(t.shadyUpgradeFragment&&!oe.Na){var e=t.shadyUpgradeFragment;if(e.__proto__=ShadowRoot.prototype,Hr(e,this,t),Pr(e,e),t=e.__noInsertionPoint?null:e.querySelectorAll("slot"),e.__noInsertionPoint=void 0,t&&t.length){var n=e;Gr(n),n.i.push.apply(n.i,c(t)),Ur(e)}e.host.__shady_native_appendChild(e)}else e=new Rr(kr,this,t);return this.__CE_shadowRoot=e},get shadowRoot(){var t=re(this);return t&&t.gb||null}});Se(ur,cr);var lr=document.implementation.createHTMLDocument("inert"),fr=Ne({get innerHTML(){return se(this)?He("template"===this.localName?this.content:this,ge):this.__shady_native_innerHTML},set innerHTML(t){if("template"===this.localName)this.__shady_native_innerHTML=t;else{Kn(this);var e=this.localName||"div";for(e=this.namespaceURI&&this.namespaceURI!==lr.namespaceURI?lr.createElementNS(this.namespaceURI,e):lr.createElement(e),oe.H?e.__shady_native_innerHTML=t:e.innerHTML=t;t=e.__shady_firstChild;)this.__shady_insertBefore(t)}}}),hr=Ne({blur:function(){var t=re(this);(t=(t=t&&t.root)&&t.activeElement)?t.__shady_blur():this.__shady_native_blur()}});oe.fa||An.forEach((function(t){hr[t]=Pn(t)}));var dr=Ne({assignedNodes:function(t){if("slot"===this.localName){var e=this.__shady_getRootNode();return e&&ue(e)&&Br(e),(e=re(this))&&(t&&t.flatten?e.aa:e.assignedNodes)||[]}},addEventListener:function(t,e,n){if("slot"!==this.localName||"slotchange"===t)En.call(this,t,e,n);else{"object"!=typeof n&&(n={capture:!!n});var r=this.__shady_parentNode;if(!r)throw Error("ShadyDOM cannot attach event to slot unless it has a `parentNode`");n.U=this,r.__shady_addEventListener(t,e,n)}},removeEventListener:function(t,e,n){if("slot"!==this.localName||"slotchange"===t)Cn.call(this,t,e,n);else{"object"!=typeof n&&(n={capture:!!n});var r=this.__shady_parentNode;if(!r)throw Error("ShadyDOM cannot attach event to slot unless it has a `parentNode`");n.U=this,r.__shady_removeEventListener(t,e,n)}}}),pr=Ne({getElementById:function(t){return""===t?null:Qn(this,(function(e){return e.id==t}),(function(t){return!!t}))[0]||null}});function vr(t,e){for(var n;e&&!t.has(n=e.__shady_getRootNode());)e=n.host;return e}var yr="__shady_native_"+ae(),mr=Ne({get activeElement(){var t=oe.H?document.__shady_native_activeElement:document.activeElement;if(!t||!t.nodeType)return null;var e=!!ue(this);if(!(this===document||e&&this.host!==t&&this.host.__shady_native_contains(t)))return null;for(e=Qr(t);e&&e!==this;)e=Qr(t=e.host);return this===document?e?null:t:e===this?t:null},elementsFromPoint:function(t,e){t=[].slice.call(document[yr](t,e)),e=function(t){var e=new Set;for(e.add(t);ue(t)&&t.host;)t=t.host.__shady_getRootNode(),e.add(t);return e}(this);for(var n=new Set,r=0;r<t.length;r++)n.add(vr(e,t[r]));var o=[];return n.forEach((function(t){return o.push(t)})),o},elementFromPoint:function(t,e){return this.__shady_elementsFromPoint(t,e)[0]||null}}),_r=window.document,br=Ne({importNode:function(t,e){if(t.ownerDocument!==_r||"template"===t.localName)return this.__shady_native_importNode(t,e);var n=this.__shady_native_importNode(t,!1);if(e)for(t=t.__shady_firstChild;t;t=t.__shady_nextSibling)e=this.__shady_importNode(t,!0),n.__shady_appendChild(e);return n}}),gr=Ne({dispatchEvent:wn,addEventListener:En.bind(window),removeEventListener:Cn.bind(window)}),wr={};Object.getOwnPropertyDescriptor(HTMLElement.prototype,"parentElement")&&(wr.parentElement=Jn.parentElement),Object.getOwnPropertyDescriptor(HTMLElement.prototype,"contains")&&(wr.contains=Jn.contains),Object.getOwnPropertyDescriptor(HTMLElement.prototype,"children")&&(wr.children=nr.children),Object.getOwnPropertyDescriptor(HTMLElement.prototype,"innerHTML")&&(wr.innerHTML=fr.innerHTML),Object.getOwnPropertyDescriptor(HTMLElement.prototype,"className")&&(wr.className=ur.className);var Er={EventTarget:[kn],Node:[Jn,window.EventTarget?null:kn],Text:[Zn],Comment:[Zn],CDATASection:[Zn],ProcessingInstruction:[Zn],Element:[ur,nr,ir,Zn,!oe.H||"innerHTML"in Element.prototype?fr:null,window.HTMLSlotElement?null:dr],HTMLElement:[hr,wr],HTMLSlotElement:[dr],DocumentFragment:[or,pr],Document:[br,or,pr,mr],Window:[gr],CharacterData:[ir]},Cr=oe.H?null:["innerHTML","textContent"];function Nr(t,e,n,r){e.forEach((function(e){return t&&e&&Ee(t,e,n,r)}))}function Sr(t){var e,n=t?null:Cr;for(e in Er)Nr(window[e]&&window[e].prototype,Er[e],t,n)}function xr(t){return t.__shady_protoIsPatched=!0,Nr(t,Er.EventTarget),Nr(t,Er.Node),Nr(t,Er.Element),Nr(t,Er.HTMLElement),Nr(t,Er.HTMLSlotElement),t}["Text","Comment","CDATASection","ProcessingInstruction"].forEach((function(t){var e=window[t],n=Object.create(e.prototype);n.__shady_protoIsPatched=!0,Nr(n,Er.EventTarget),Nr(n,Er.Node),Er[t]&&Nr(n,Er[t]),e.prototype.__shady_patchedProto=n}));var Tr=oe.Aa,Or=oe.H;function Dr(t,e){if(Tr&&!t.__shady_protoIsPatched&&!ue(t)){var n=Object.getPrototypeOf(t),r=n.hasOwnProperty("__shady_patchedProto")&&n.__shady_patchedProto;r||(xr(r=Object.create(n)),n.__shady_patchedProto=r),Object.setPrototypeOf(t,r)}Or||(1===e?rn(t):2===e&&on(t))}function Ar(t,e,n,r){Dr(t,1),r=r||null;var o=ne(t),i=r?ne(r):null;o.previousSibling=r?i.previousSibling:e.__shady_lastChild,(i=re(o.previousSibling))&&(i.nextSibling=t),(i=re(o.nextSibling=r))&&(i.previousSibling=t),o.parentNode=e,r?r===n.firstChild&&(n.firstChild=t):(n.lastChild=t,n.firstChild||(n.firstChild=t)),n.childNodes=null}function Pr(t,e){var n=ne(t);if(e||void 0===n.firstChild){n.childNodes=null;var r=n.firstChild=t.__shady_native_firstChild;for(n.lastChild=t.__shady_native_lastChild,Dr(t,2),n=r,r=void 0;n;n=n.__shady_native_nextSibling){var o=ne(n);o.parentNode=e||t,o.nextSibling=n.__shady_native_nextSibling,o.previousSibling=r||null,r=n,Dr(n,1)}}}var Mr=Ne({addEventListener:function(t,e,n){"object"!=typeof n&&(n={capture:!!n}),n.U=n.U||this,this.host.__shady_addEventListener(t,e,n)},removeEventListener:function(t,e,n){"object"!=typeof n&&(n={capture:!!n}),n.U=n.U||this,this.host.__shady_removeEventListener(t,e,n)}});function jr(t,e){Ee(t,Mr,e),Ee(t,mr,e),Ee(t,fr,e),Ee(t,nr,e),oe.J&&!e?(Ee(t,Jn,e),Ee(t,pr,e)):oe.H||(Ee(t,tn),Ee(t,Ze),Ee(t,Qe))}var Lr,kr={},Ir=oe.deferConnectionCallbacks&&"loading"===document.readyState;function Fr(t){var e=[];do{e.unshift(t)}while(t=t.__shady_parentNode);return e}function Rr(t,e,n){if(t!==kr)throw new TypeError("Illegal constructor");this.g=null,Hr(this,e,n)}function Hr(t,e,n){if(t.host=e,t.mode=n&&n.mode,Pr(t.host),(e=ne(t.host)).root=t,e.gb="closed"!==t.mode?t:null,(e=ne(t)).firstChild=e.lastChild=e.parentNode=e.nextSibling=e.previousSibling=null,oe.preferPerformance)for(;e=t.host.__shady_native_firstChild;)t.host.__shady_native_removeChild(e);else Ur(t)}function Ur(t){t.Y||(t.Y=!0,Ae((function(){return Br(t)})))}function Br(t){var e;if(e=t.Y){for(var n;t;)t.Y&&(n=t),ue(t=(e=t).host.__shady_getRootNode())&&(e=re(e.host))&&0<e.ia||(t=void 0);e=n}(n=e)&&n._renderSelf()}function Wr(t,e,n){var r=ne(e),o=r.ua;r.ua=null,n||(n=(t=t.h[e.__shady_slot||"__catchall"])&&t[0]),n?(ne(n).assignedNodes.push(e),r.assignedSlot=n):r.assignedSlot=void 0,o!==r.assignedSlot&&r.assignedSlot&&(ne(r.assignedSlot).xa=!0)}function qr(t,e,n){for(var r=0,o=void 0;r<n.length&&(o=n[r]);r++)if("slot"==o.localName){var i=re(o).assignedNodes;i&&i.length&&qr(t,e,i)}else e.push(n[r])}function Vr(t,e){e.__shady_native_dispatchEvent(new Event("slotchange")),(e=re(e)).assignedSlot&&Vr(t,e.assignedSlot)}function Gr(t){t.i=t.i||[],t.g=t.g||[],t.h=t.h||{}}function zr(t){if(t.i&&t.i.length){for(var e,n=t.i,r=0;r<n.length;r++){var o=n[r];Pr(o);var i=o.__shady_parentNode;Pr(i),(i=re(i)).ia=(i.ia||0)+1,i=Kr(o),t.h[i]?((e=e||{})[i]=!0,t.h[i].push(o)):t.h[i]=[o],t.g.push(o)}if(e)for(var a in e)t.h[a]=Xr(t.h[a]);t.i=[]}}function Kr(t){var e=t.name||t.getAttribute("name")||"__catchall";return t.Qa=e}function Xr(t){return t.sort((function(t,e){t=Fr(t);for(var n=Fr(e),r=0;r<t.length;r++){e=t[r];var o=n[r];if(e!==o)return(t=ge(e.__shady_parentNode)).indexOf(e)-t.indexOf(o)}}))}function Yr(t){return zr(t),!(!t.g||!t.g.length)}if(Rr.prototype._renderSelf=function(){var t=Ir;if(Ir=!0,this.Y=!1,this.g){zr(this);for(var e,n=0;n<this.g.length;n++){var r=re(e=this.g[n]),o=r.assignedNodes;if(r.assignedNodes=[],r.aa=[],r.Ga=o)for(r=0;r<o.length;r++){var i=re(o[r]);i.ua=i.assignedSlot,i.assignedSlot===e&&(i.assignedSlot=null)}}for(n=this.host.__shady_firstChild;n;n=n.__shady_nextSibling)Wr(this,n);for(n=0;n<this.g.length;n++){if(!(o=re(e=this.g[n])).assignedNodes.length)for(r=e.__shady_firstChild;r;r=r.__shady_nextSibling)Wr(this,r,e);if((r=(r=re(e.__shady_parentNode))&&r.root)&&(Yr(r)||r.Y)&&r._renderSelf(),qr(this,o.aa,o.assignedNodes),r=o.Ga){for(i=0;i<r.length;i++)re(r[i]).ua=null;o.Ga=null,r.length>o.assignedNodes.length&&(o.xa=!0)}o.xa&&(o.xa=!1,Vr(this,e))}for(e=this.g,n=[],o=0;o<e.length;o++)(i=re(r=e[o].__shady_parentNode))&&i.root||!(0>n.indexOf(r))||n.push(r);for(e=0;e<n.length;e++){for(o=(i=n[e])===this?this.host:i,r=[],i=i.__shady_firstChild;i;i=i.__shady_nextSibling)if("slot"==i.localName)for(var a=re(i).aa,s=0;s<a.length;s++)r.push(a[s]);else r.push(i);i=be(o),a=jn(r,r.length,i,i.length);for(var u=s=0,c=void 0;s<a.length&&(c=a[s]);s++){for(var l=0,f=void 0;l<c.ga.length&&(f=c.ga[l]);l++)f.__shady_native_parentNode===o&&o.__shady_native_removeChild(f),i.splice(c.index+u,1);u-=c.na}for(u=0,c=void 0;u<a.length&&(c=a[u]);u++)for(s=i[c.index],l=c.index;l<c.index+c.na;l++)f=r[l],o.__shady_native_insertBefore(f,s),i.splice(l,0,f)}}if(!oe.preferPerformance&&!this.Fa)for(n=this.host.__shady_firstChild;n;n=n.__shady_nextSibling)e=re(n),n.__shady_native_parentNode!==this.host||"slot"!==n.localName&&e.assignedSlot||this.host.__shady_native_removeChild(n);this.Fa=!0,Ir=t,Lr&&Lr()},function(t){t.__proto__=DocumentFragment.prototype,jr(t,"__shady_"),jr(t),Object.defineProperties(t,{nodeType:{value:Node.DOCUMENT_FRAGMENT_NODE,configurable:!0},nodeName:{value:"#document-fragment",configurable:!0},nodeValue:{value:null,configurable:!0}}),["localName","namespaceURI","prefix"].forEach((function(e){Object.defineProperty(t,e,{value:void 0,configurable:!0})})),["ownerDocument","baseURI","isConnected"].forEach((function(e){Object.defineProperty(t,e,{get:function(){return this.host[e]},configurable:!0})}))}(Rr.prototype),window.customElements&&window.customElements.define&&oe.ya&&!oe.preferPerformance){var $r=new Map;Lr=function(){var t=[];$r.forEach((function(e,n){t.push([n,e])})),$r.clear();for(var e=0;e<t.length;e++){var n=t[e][0];t[e][1]?n.__shadydom_connectedCallback():n.__shadydom_disconnectedCallback()}},Ir&&document.addEventListener("readystatechange",(function(){Ir=!1,Lr()}),{once:!0});var Jr=window.customElements.define,Zr=function(t,e){var n=e.prototype.connectedCallback,r=e.prototype.disconnectedCallback;Jr.call(window.customElements,t,function(t,e,n){var r=0,o="__isConnected"+r++;return(e||n)&&(t.prototype.connectedCallback=t.prototype.__shadydom_connectedCallback=function(){Ir?$r.set(this,!0):this[o]||(this[o]=!0,e&&e.call(this))},t.prototype.disconnectedCallback=t.prototype.__shadydom_disconnectedCallback=function(){Ir?this.isConnected||$r.set(this,!1):this[o]&&(this[o]=!1,n&&n.call(this))}),t}(e,n,r)),e.prototype.connectedCallback=n,e.prototype.disconnectedCallback=r};window.customElements.define=Zr,Object.defineProperty(window.CustomElementRegistry.prototype,"define",{value:Zr,configurable:!0})}function Qr(t){if(ue(t=t.__shady_getRootNode()))return t}function to(t){this.node=t}function eo(t){Object.defineProperty(to.prototype,t,{get:function(){return this.node["__shady_"+t]},set:function(e){this.node["__shady_"+t]=e},configurable:!0})}(t=to.prototype).addEventListener=function(t,e,n){return this.node.__shady_addEventListener(t,e,n)},t.removeEventListener=function(t,e,n){return this.node.__shady_removeEventListener(t,e,n)},t.appendChild=function(t){return this.node.__shady_appendChild(t)},t.insertBefore=function(t,e){return this.node.__shady_insertBefore(t,e)},t.removeChild=function(t){return this.node.__shady_removeChild(t)},t.replaceChild=function(t,e){return this.node.__shady_replaceChild(t,e)},t.cloneNode=function(t){return this.node.__shady_cloneNode(t)},t.getRootNode=function(t){return this.node.__shady_getRootNode(t)},t.contains=function(t){return this.node.__shady_contains(t)},t.dispatchEvent=function(t){return this.node.__shady_dispatchEvent(t)},t.setAttribute=function(t,e){this.node.__shady_setAttribute(t,e)},t.getAttribute=function(t){return this.node.__shady_native_getAttribute(t)},t.hasAttribute=function(t){return this.node.__shady_native_hasAttribute(t)},t.removeAttribute=function(t){this.node.__shady_removeAttribute(t)},t.attachShadow=function(t){return this.node.__shady_attachShadow(t)},t.focus=function(){this.node.__shady_native_focus()},t.blur=function(){this.node.__shady_blur()},t.importNode=function(t,e){if(this.node.nodeType===Node.DOCUMENT_NODE)return this.node.__shady_importNode(t,e)},t.getElementById=function(t){if(this.node.nodeType===Node.DOCUMENT_NODE)return this.node.__shady_getElementById(t)},t.elementsFromPoint=function(t,e){return this.node.__shady_elementsFromPoint(t,e)},t.elementFromPoint=function(t,e){return this.node.__shady_elementFromPoint(t,e)},t.querySelector=function(t){return this.node.__shady_querySelector(t)},t.querySelectorAll=function(t,e){return this.node.__shady_querySelectorAll(t,e)},t.assignedNodes=function(t){if("slot"===this.node.localName)return this.node.__shady_assignedNodes(t)},t.append=function(t){for(var e=[],n=0;n<arguments.length;++n)e[n]=arguments[n];return this.node.__shady_append.apply(this.node,c(e))},t.prepend=function(t){for(var e=[],n=0;n<arguments.length;++n)e[n]=arguments[n];return this.node.__shady_prepend.apply(this.node,c(e))},t.after=function(t){for(var e=[],n=0;n<arguments.length;++n)e[n]=arguments[n];return this.node.__shady_after.apply(this.node,c(e))},t.before=function(t){for(var e=[],n=0;n<arguments.length;++n)e[n]=arguments[n];return this.node.__shady_before.apply(this.node,c(e))},t.remove=function(){return this.node.__shady_remove()},t.replaceWith=function(t){for(var e=[],n=0;n<arguments.length;++n)e[n]=arguments[n];return this.node.__shady_replaceWith.apply(this.node,c(e))},i.Object.defineProperties(to.prototype,{activeElement:{configurable:!0,enumerable:!0,get:function(){if(ue(this.node)||this.node.nodeType===Node.DOCUMENT_NODE)return this.node.__shady_activeElement}},_activeElement:{configurable:!0,enumerable:!0,get:function(){return this.activeElement}},host:{configurable:!0,enumerable:!0,get:function(){if(ue(this.node))return this.node.host}},parentNode:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_parentNode}},firstChild:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_firstChild}},lastChild:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_lastChild}},nextSibling:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_nextSibling}},previousSibling:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_previousSibling}},childNodes:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_childNodes}},parentElement:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_parentElement}},firstElementChild:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_firstElementChild}},lastElementChild:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_lastElementChild}},nextElementSibling:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_nextElementSibling}},previousElementSibling:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_previousElementSibling}},children:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_children}},childElementCount:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_childElementCount}},shadowRoot:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_shadowRoot}},assignedSlot:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_assignedSlot}},isConnected:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_isConnected}},innerHTML:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_innerHTML},set:function(t){this.node.__shady_innerHTML=t}},textContent:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_textContent},set:function(t){this.node.__shady_textContent=t}},slot:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_slot},set:function(t){this.node.__shady_slot=t}},className:{configurable:!0,enumerable:!0,get:function(){return this.node.__shady_className},set:function(t){this.node.__shady_className=t}}}),Dn.forEach((function(t){return eo(t)})),An.forEach((function(t){return eo(t)}));var no=new WeakMap;function ro(t){if(ue(t)||t instanceof to)return t;var e=no.get(t);return e||(e=new to(t),no.set(t,e)),e}if(oe.ya){var oo=oe.H?function(t){return t}:function(t){return on(t),rn(t),t},io={inUse:oe.ya,patch:oo,isShadyRoot:ue,enqueue:Ae,flush:Pe,flushInitial:function(t){!t.Fa&&t.Y&&Br(t)},settings:oe,filterMutations:function(t,e){var n=e.getRootNode();return t.map((function(t){var e=n===t.target.getRootNode();if(e&&t.addedNodes){if(e=[].slice.call(t.addedNodes).filter((function(t){return n===t.getRootNode()})),e.length)return t=Object.create(t),Object.defineProperty(t,"addedNodes",{value:e,configurable:!0}),t}else if(e)return t})).filter((function(t){return t}))},observeChildren:function(t,e){var n=ne(t);n.ea||(n.ea=new Me),n.ea.oa.add(e);var r=n.ea;return{Ra:e,X:r,Sa:t,takeRecords:function(){return r.takeRecords()}}},unobserveChildren:function(t){var e=t&&t.X;e&&(e.oa.delete(t.Ra),e.oa.size||(ne(t.Sa).ea=null))},deferConnectionCallbacks:oe.deferConnectionCallbacks,preferPerformance:oe.preferPerformance,handlesDynamicScoping:!0,wrap:oe.J?ro:oo,wrapIfNeeded:!0===oe.J?ro:function(t){return t},Wrapper:to,composedPath:function(t){return t.__composedPath||(t.__composedPath=dn(t.target,!0)),t.__composedPath},noPatch:oe.J,patchOnDemand:oe.Aa,nativeMethods:Be,nativeTree:We,patchElementProto:xr};window.ShadyDOM=io,function(){var t=["dispatchEvent","addEventListener","removeEventListener"];window.EventTarget?(Ge(window.EventTarget.prototype,t),void 0===window.__shady_native_addEventListener&&Ge(Window.prototype,t)):(Ge(Node.prototype,t),Ge(Window.prototype,t)),Ue?Ge(Node.prototype,"parentNode firstChild lastChild previousSibling nextSibling childNodes parentElement textContent".split(" ")):Ve(Node.prototype,{parentNode:{get:function(){return ze.currentNode=this,ze.parentNode()}},firstChild:{get:function(){return ze.currentNode=this,ze.firstChild()}},lastChild:{get:function(){return ze.currentNode=this,ze.lastChild()}},previousSibling:{get:function(){return ze.currentNode=this,ze.previousSibling()}},nextSibling:{get:function(){return ze.currentNode=this,ze.nextSibling()}},childNodes:{get:function(){var t=[];ze.currentNode=this;for(var e=ze.firstChild();e;)t.push(e),e=ze.nextSibling();return t}},parentElement:{get:function(){return Ke.currentNode=this,Ke.parentNode()}},textContent:{get:function(){switch(this.nodeType){case Node.ELEMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:for(var t,e=document.createTreeWalker(this,NodeFilter.SHOW_TEXT,null,!1),n="";t=e.nextNode();)n+=t.nodeValue;return n;default:return this.nodeValue}},set:function(t){switch(null==t&&(t=""),this.nodeType){case Node.ELEMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:Ye(this),(0<t.length||this.nodeType===Node.ELEMENT_NODE)&&this.__shady_native_insertBefore(document.createTextNode(t),void 0);break;default:this.nodeValue=t}}}}),Ge(Node.prototype,"appendChild insertBefore removeChild replaceChild cloneNode contains".split(" ")),Ge(HTMLElement.prototype,["parentElement","contains"]),t={firstElementChild:{get:function(){return Ke.currentNode=this,Ke.firstChild()}},lastElementChild:{get:function(){return Ke.currentNode=this,Ke.lastChild()}},children:{get:function(){var t=[];Ke.currentNode=this;for(var e=Ke.firstChild();e;)t.push(e),e=Ke.nextSibling();return _e(t)}},childElementCount:{get:function(){return this.children?this.children.length:0}}},Ue?(Ge(Element.prototype,$e),Ge(Element.prototype,["previousElementSibling","nextElementSibling","innerHTML","className"]),Ge(HTMLElement.prototype,["children","innerHTML","className"])):(Ve(Element.prototype,t),Ve(Element.prototype,{previousElementSibling:{get:function(){return Ke.currentNode=this,Ke.previousSibling()}},nextElementSibling:{get:function(){return Ke.currentNode=this,Ke.nextSibling()}},innerHTML:{get:function(){return He(this,be)},set:function(t){var e="template"===this.localName?this.content:this;Ye(e);var n=this.localName||"div";for((n=this.namespaceURI&&this.namespaceURI!==Xe.namespaceURI?Xe.createElementNS(this.namespaceURI,n):Xe.createElement(n)).innerHTML=t,t="template"===this.localName?n.content:n;n=t.__shady_native_firstChild;)e.__shady_native_insertBefore(n,void 0)}},className:{get:function(){return this.getAttribute("class")||""},set:function(t){this.setAttribute("class",t)}}})),Ge(Element.prototype,"setAttribute getAttribute hasAttribute removeAttribute focus blur".split(" ")),Ge(Element.prototype,Je),Ge(HTMLElement.prototype,["focus","blur"]),window.HTMLTemplateElement&&Ge(window.HTMLTemplateElement.prototype,["innerHTML"]),Ue?Ge(DocumentFragment.prototype,$e):Ve(DocumentFragment.prototype,t),Ge(DocumentFragment.prototype,Je),Ue?(Ge(Document.prototype,$e),Ge(Document.prototype,["activeElement"])):Ve(Document.prototype,t),Ge(Document.prototype,["importNode","getElementById","elementFromPoint",ae()]),Ge(Document.prototype,Je)}(),Sr("__shady_"),Object.defineProperty(document,"_activeElement",mr.activeElement),Ee(Window.prototype,gr,"__shady_"),oe.J?oe.Aa&&Ee(Element.prototype,cr):(Sr(),function(){if(!sn&&Object.getOwnPropertyDescriptor(Event.prototype,"isTrusted")){var t=function(){var t=new MouseEvent("click",{bubbles:!0,cancelable:!0,composed:!0});this.__shady_dispatchEvent(t)};Element.prototype.click?Element.prototype.click=t:HTMLElement.prototype.click&&(HTMLElement.prototype.click=t)}}()),function(){for(var t in yn)window.__shady_native_addEventListener(t,(function(t){t.__target||(Sn(t),bn(t))}),!0)}(),window.Event=xn,window.CustomEvent=Tn,window.MouseEvent=On,window.ShadowRoot=Rr}var ao=window.Document.prototype.createElement,so=window.Document.prototype.createElementNS,uo=window.Document.prototype.importNode,co=window.Document.prototype.prepend,lo=window.Document.prototype.append,fo=window.DocumentFragment.prototype.prepend,ho=window.DocumentFragment.prototype.append,po=window.Node.prototype.cloneNode,vo=window.Node.prototype.appendChild,yo=window.Node.prototype.insertBefore,mo=window.Node.prototype.removeChild,_o=window.Node.prototype.replaceChild,bo=Object.getOwnPropertyDescriptor(window.Node.prototype,"textContent"),go=window.Element.prototype.attachShadow,wo=Object.getOwnPropertyDescriptor(window.Element.prototype,"innerHTML"),Eo=window.Element.prototype.getAttribute,Co=window.Element.prototype.setAttribute,No=window.Element.prototype.removeAttribute,So=window.Element.prototype.getAttributeNS,xo=window.Element.prototype.setAttributeNS,To=window.Element.prototype.removeAttributeNS,Oo=window.Element.prototype.insertAdjacentElement,Do=window.Element.prototype.insertAdjacentHTML,Ao=window.Element.prototype.prepend,Po=window.Element.prototype.append,Mo=window.Element.prototype.before,jo=window.Element.prototype.after,Lo=window.Element.prototype.replaceWith,ko=window.Element.prototype.remove,Io=window.HTMLElement,Fo=Object.getOwnPropertyDescriptor(window.HTMLElement.prototype,"innerHTML"),Ro=window.HTMLElement.prototype.insertAdjacentElement,Ho=window.HTMLElement.prototype.insertAdjacentHTML,Uo=new Set;function Bo(t){var e=Uo.has(t);return t=/^[a-z][.0-9_a-z]*-[-.0-9_a-z]*$/.test(t),!e&&t}"annotation-xml color-profile font-face font-face-src font-face-uri font-face-format font-face-name missing-glyph".split(" ").forEach((function(t){return Uo.add(t)}));var Wo=document.contains?document.contains.bind(document):document.documentElement.contains.bind(document.documentElement);function qo(t){var e=t.isConnected;if(void 0!==e)return e;if(Wo(t))return!0;for(;t&&!(t.__CE_isImportDocument||t instanceof Document);)t=t.parentNode||(window.ShadowRoot&&t instanceof ShadowRoot?t.host:void 0);return!(!t||!(t.__CE_isImportDocument||t instanceof Document))}function Vo(t){var e=t.children;if(e)return Array.prototype.slice.call(e);for(e=[],t=t.firstChild;t;t=t.nextSibling)t.nodeType===Node.ELEMENT_NODE&&e.push(t);return e}function Go(t,e){for(;e&&e!==t&&!e.nextSibling;)e=e.parentNode;return e&&e!==t?e.nextSibling:null}function zo(t,e,n){for(var r=t;r;){if(r.nodeType===Node.ELEMENT_NODE){var o=r;e(o);var i=o.localName;if("link"===i&&"import"===o.getAttribute("rel")){if(r=o.import,void 0===n&&(n=new Set),r instanceof Node&&!n.has(r))for(n.add(r),r=r.firstChild;r;r=r.nextSibling)zo(r,e,n);r=Go(t,o);continue}if("template"===i){r=Go(t,o);continue}if(o=o.__CE_shadowRoot)for(o=o.firstChild;o;o=o.nextSibling)zo(o,e,n)}r=r.firstChild?r.firstChild:Go(t,r)}}function Ko(){var t=!(null==di||!di.noDocumentConstructionObserver),e=!(null==di||!di.shadyDomFastWalk);this.ca=[],this.g=[],this.W=!1,this.shadyDomFastWalk=e,this.nb=!t}function Xo(t,e,n,r){var o=window.ShadyDOM;if(t.shadyDomFastWalk&&o&&o.inUse){if(e.nodeType===Node.ELEMENT_NODE&&n(e),e.querySelectorAll)for(t=o.nativeMethods.querySelectorAll.call(e,"*"),e=0;e<t.length;e++)n(t[e])}else zo(e,n,r)}function Yo(t,e){t.W&&Xo(t,e,(function(e){return $o(t,e)}))}function $o(t,e){if(t.W&&!e.__CE_patched){e.__CE_patched=!0;for(var n=0;n<t.ca.length;n++)t.ca[n](e);for(n=0;n<t.g.length;n++)t.g[n](e)}}function Jo(t,e){var n=[];for(Xo(t,e,(function(t){return n.push(t)})),e=0;e<n.length;e++){var r=n[e];1===r.__CE_state?t.connectedCallback(r):ti(t,r)}}function Zo(t,e){var n=[];for(Xo(t,e,(function(t){return n.push(t)})),e=0;e<n.length;e++){var r=n[e];1===r.__CE_state&&t.disconnectedCallback(r)}}function Qo(t,e,n){var r=(n=void 0===n?{}:n).ob,o=n.upgrade||function(e){return ti(t,e)},i=[];for(Xo(t,e,(function(e){if(t.W&&$o(t,e),"link"===e.localName&&"import"===e.getAttribute("rel")){var n=e.import;n instanceof Node&&(n.__CE_isImportDocument=!0,n.__CE_registry=document.__CE_registry),n&&"complete"===n.readyState?n.__CE_documentLoadHandled=!0:e.addEventListener("load",(function(){var n=e.import;if(!n.__CE_documentLoadHandled){n.__CE_documentLoadHandled=!0;var i=new Set;r&&(r.forEach((function(t){return i.add(t)})),i.delete(n)),Qo(t,n,{ob:i,upgrade:o})}}))}else i.push(e)}),r),e=0;e<i.length;e++)o(i[e])}function ti(t,e){try{var n=e.ownerDocument,r=n.__CE_registry,o=r&&(n.defaultView||n.__CE_isImportDocument)?li(r,e.localName):void 0;if(o&&void 0===e.__CE_state){o.constructionStack.push(e);try{try{if(new o.constructorFunction!==e)throw Error("The custom element constructor did not produce the element being upgraded.")}finally{o.constructionStack.pop()}}catch(t){throw e.__CE_state=2,t}if(e.__CE_state=1,e.__CE_definition=o,o.attributeChangedCallback&&e.hasAttributes()){var i=o.observedAttributes;for(o=0;o<i.length;o++){var a=i[o],s=e.getAttribute(a);null!==s&&t.attributeChangedCallback(e,a,null,s,null)}}qo(e)&&t.connectedCallback(e)}}catch(t){ni(t)}}function ei(t,e,n,r){var o=e.__CE_registry;if(o&&(null===r||"http://www.w3.org/1999/xhtml"===r)&&(o=li(o,n)))try{var i=new o.constructorFunction;if(void 0===i.__CE_state||void 0===i.__CE_definition)throw Error("Failed to construct '"+n+"': The returned value was not constructed with the HTMLElement constructor.");if("http://www.w3.org/1999/xhtml"!==i.namespaceURI)throw Error("Failed to construct '"+n+"': The constructed element's namespace must be the HTML namespace.");if(i.hasAttributes())throw Error("Failed to construct '"+n+"': The constructed element must not have any attributes.");if(null!==i.firstChild)throw Error("Failed to construct '"+n+"': The constructed element must not have any children.");if(null!==i.parentNode)throw Error("Failed to construct '"+n+"': The constructed element must not have a parent node.");if(i.ownerDocument!==e)throw Error("Failed to construct '"+n+"': The constructed element's owner document is incorrect.");if(i.localName!==n)throw Error("Failed to construct '"+n+"': The constructed element's local name is incorrect.");return i}catch(o){return ni(o),e=null===r?ao.call(e,n):so.call(e,r,n),Object.setPrototypeOf(e,HTMLUnknownElement.prototype),e.__CE_state=2,e.__CE_definition=void 0,$o(t,e),e}return $o(t,e=null===r?ao.call(e,n):so.call(e,r,n)),e}function ni(t){var e=t.message,n=t.sourceURL||t.fileName||"",r=t.line||t.lineNumber||0,o=t.column||t.columnNumber||0,i=void 0;void 0===ErrorEvent.prototype.initErrorEvent?i=new ErrorEvent("error",{cancelable:!0,message:e,filename:n,lineno:r,colno:o,error:t}):((i=document.createEvent("ErrorEvent")).initErrorEvent("error",!1,!0,e,n,r),i.preventDefault=function(){Object.defineProperty(this,"defaultPrevented",{configurable:!0,get:function(){return!0}})}),void 0===i.error&&Object.defineProperty(i,"error",{configurable:!0,enumerable:!0,get:function(){return t}}),window.dispatchEvent(i),i.defaultPrevented||console.error(t)}function ri(){var t=this;this.I=void 0,this.Ha=new Promise((function(e){t.g=e}))}function oi(t){var e=document;this.X=void 0,this.S=t,this.g=e,Qo(this.S,this.g),"loading"===this.g.readyState&&(this.X=new MutationObserver(this.h.bind(this)),this.X.observe(this.g,{childList:!0,subtree:!0}))}function ii(t){t.X&&t.X.disconnect()}function ai(t){this.ka=new Map,this.la=new Map,this.Ca=new Map,this.ta=!1,this.wa=new Map,this.ja=function(t){return t()},this.V=!1,this.ma=[],this.S=t,this.Da=t.nb?new oi(t):void 0}function si(t,e){if(!Bo(e))throw new SyntaxError("The element name '"+e+"' is not valid.");if(li(t,e))throw Error("A custom element with name '"+e+"' has already been defined.");if(t.ta)throw Error("A custom element is already being defined.")}function ui(t,e,n){var r;t.ta=!0;try{var o=n.prototype;if(!(o instanceof Object))throw new TypeError("The custom element constructor's prototype is not an object.");var i=function(t){var e=o[t];if(void 0!==e&&!(e instanceof Function))throw Error("The '"+t+"' callback must be a function.");return e},a=i("connectedCallback"),s=i("disconnectedCallback"),u=i("adoptedCallback"),c=(r=i("attributeChangedCallback"))&&n.observedAttributes||[]}catch(t){throw t}finally{t.ta=!1}return n={localName:e,constructorFunction:n,connectedCallback:a,disconnectedCallback:s,adoptedCallback:u,attributeChangedCallback:r,observedAttributes:c,constructionStack:[]},t.la.set(e,n),t.Ca.set(n.constructorFunction,n),n}function ci(t){if(!1!==t.V){t.V=!1;for(var e=[],n=t.ma,r=new Map,o=0;o<n.length;o++)r.set(n[o],[]);for(Qo(t.S,document,{upgrade:function(n){if(void 0===n.__CE_state){var o=n.localName,i=r.get(o);i?i.push(n):t.la.has(o)&&e.push(n)}}}),o=0;o<e.length;o++)ti(t.S,e[o]);for(o=0;o<n.length;o++){for(var i=n[o],a=r.get(i),s=0;s<a.length;s++)ti(t.S,a[s]);(i=t.wa.get(i))&&i.resolve(void 0)}n.length=0}}function li(t,e){var n=t.la.get(e);if(n)return n;if(n=t.ka.get(e)){t.ka.delete(e);try{return ui(t,e,n())}catch(t){ni(t)}}}function fi(t,e,n){function r(e){return function(n){for(var r=[],o=0;o<arguments.length;++o)r[o]=arguments[o];o=[];for(var i=[],a=0;a<r.length;a++){var s=r[a];if(s instanceof Element&&qo(s)&&i.push(s),s instanceof DocumentFragment)for(s=s.firstChild;s;s=s.nextSibling)o.push(s);else o.push(s)}for(e.apply(this,r),r=0;r<i.length;r++)Zo(t,i[r]);if(qo(this))for(r=0;r<o.length;r++)(i=o[r])instanceof Element&&Jo(t,i)}}void 0!==n.prepend&&(e.prepend=r(n.prepend)),void 0!==n.append&&(e.append=r(n.append))}Ko.prototype.connectedCallback=function(t){var e=t.__CE_definition;if(e.connectedCallback)try{e.connectedCallback.call(t)}catch(t){ni(t)}},Ko.prototype.disconnectedCallback=function(t){var e=t.__CE_definition;if(e.disconnectedCallback)try{e.disconnectedCallback.call(t)}catch(t){ni(t)}},Ko.prototype.attributeChangedCallback=function(t,e,n,r,o){var i=t.__CE_definition;if(i.attributeChangedCallback&&-1<i.observedAttributes.indexOf(e))try{i.attributeChangedCallback.call(t,e,n,r,o)}catch(t){ni(t)}},ri.prototype.resolve=function(t){if(this.I)throw Error("Already resolved.");this.I=t,this.g(t)},oi.prototype.h=function(t){var e=this.g.readyState;for("interactive"!==e&&"complete"!==e||ii(this),e=0;e<t.length;e++)for(var n=t[e].addedNodes,r=0;r<n.length;r++)Qo(this.S,n[r])},(t=ai.prototype).eb=function(t,e){var n=this;if(!(e instanceof Function))throw new TypeError("Custom element constructor getters must be functions.");si(this,t),this.ka.set(t,e),this.ma.push(t),this.V||(this.V=!0,this.ja((function(){return ci(n)})))},t.define=function(t,e){var n=this;if(!(e instanceof Function))throw new TypeError("Custom element constructors must be functions.");si(this,t),ui(this,t,e),this.ma.push(t),this.V||(this.V=!0,this.ja((function(){return ci(n)})))},t.upgrade=function(t){Qo(this.S,t)},t.get=function(t){if(t=li(this,t))return t.constructorFunction},t.whenDefined=function(t){if(!Bo(t))return Promise.reject(new SyntaxError("'"+t+"' is not a valid custom element name."));var e=this.wa.get(t);if(e)return e.Ha;e=new ri,this.wa.set(t,e);var n=this.la.has(t)||this.ka.has(t);return t=-1===this.ma.indexOf(t),n&&t&&e.resolve(void 0),e.Ha},t.polyfillWrapFlushCallback=function(t){this.Da&&ii(this.Da);var e=this.ja;this.ja=function(n){return t((function(){return e(n)}))}},window.CustomElementRegistry=ai,ai.prototype.define=ai.prototype.define,ai.prototype.upgrade=ai.prototype.upgrade,ai.prototype.get=ai.prototype.get,ai.prototype.whenDefined=ai.prototype.whenDefined,ai.prototype.polyfillDefineLazy=ai.prototype.eb,ai.prototype.polyfillWrapFlushCallback=ai.prototype.polyfillWrapFlushCallback;var hi={},di=window.customElements;function pi(){var t=new Ko;!function(t){function e(){var e=this.constructor,n=document.__CE_registry.Ca.get(e);if(!n)throw Error("Failed to construct a custom element: The constructor was not registered with `customElements`.");var r=n.constructionStack;if(0===r.length)return r=ao.call(document,n.localName),Object.setPrototypeOf(r,e.prototype),r.__CE_state=1,r.__CE_definition=n,$o(t,r),r;var o=r.length-1,i=r[o];if(i===hi)throw Error("Failed to construct '"+n.localName+"': This element was already constructed.");return r[o]=hi,Object.setPrototypeOf(i,e.prototype),$o(t,i),i}e.prototype=Io.prototype,Object.defineProperty(HTMLElement.prototype,"constructor",{writable:!0,configurable:!0,enumerable:!1,value:e}),window.HTMLElement=e}(t),function(t){Document.prototype.createElement=function(e){return ei(t,this,e,null)},Document.prototype.importNode=function(e,n){return e=uo.call(this,e,!!n),this.__CE_registry?Qo(t,e):Yo(t,e),e},Document.prototype.createElementNS=function(e,n){return ei(t,this,n,e)},fi(t,Document.prototype,{prepend:co,append:lo})}(t),fi(t,DocumentFragment.prototype,{prepend:fo,append:ho}),function(t){function e(e,n){Object.defineProperty(e,"textContent",{enumerable:n.enumerable,configurable:!0,get:n.get,set:function(e){if(this.nodeType===Node.TEXT_NODE)n.set.call(this,e);else{var r=void 0;if(this.firstChild){var o=this.childNodes,i=o.length;if(0<i&&qo(this)){r=Array(i);for(var a=0;a<i;a++)r[a]=o[a]}}if(n.set.call(this,e),r)for(e=0;e<r.length;e++)Zo(t,r[e])}}})}Node.prototype.insertBefore=function(e,n){if(e instanceof DocumentFragment){var r=Vo(e);if(e=yo.call(this,e,n),qo(this))for(n=0;n<r.length;n++)Jo(t,r[n]);return e}return r=e instanceof Element&&qo(e),n=yo.call(this,e,n),r&&Zo(t,e),qo(this)&&Jo(t,e),n},Node.prototype.appendChild=function(e){if(e instanceof DocumentFragment){var n=Vo(e);if(e=vo.call(this,e),qo(this))for(var r=0;r<n.length;r++)Jo(t,n[r]);return e}return n=e instanceof Element&&qo(e),r=vo.call(this,e),n&&Zo(t,e),qo(this)&&Jo(t,e),r},Node.prototype.cloneNode=function(e){return e=po.call(this,!!e),this.ownerDocument.__CE_registry?Qo(t,e):Yo(t,e),e},Node.prototype.removeChild=function(e){var n=e instanceof Element&&qo(e),r=mo.call(this,e);return n&&Zo(t,e),r},Node.prototype.replaceChild=function(e,n){if(e instanceof DocumentFragment){var r=Vo(e);if(e=_o.call(this,e,n),qo(this))for(Zo(t,n),n=0;n<r.length;n++)Jo(t,r[n]);return e}r=e instanceof Element&&qo(e);var o=_o.call(this,e,n),i=qo(this);return i&&Zo(t,n),r&&Zo(t,e),i&&Jo(t,e),o},bo&&bo.get?e(Node.prototype,bo):function(t,e){t.W=!0,t.ca.push(e)}(t,(function(t){e(t,{enumerable:!0,configurable:!0,get:function(){for(var t=[],e=this.firstChild;e;e=e.nextSibling)e.nodeType!==Node.COMMENT_NODE&&t.push(e.textContent);return t.join("")},set:function(t){for(;this.firstChild;)mo.call(this,this.firstChild);null!=t&&""!==t&&vo.call(this,document.createTextNode(t))}})}))}(t),function(t){function e(e,n){Object.defineProperty(e,"innerHTML",{enumerable:n.enumerable,configurable:!0,get:n.get,set:function(e){var r=this,o=void 0;if(qo(this)&&(o=[],Xo(t,this,(function(t){t!==r&&o.push(t)}))),n.set.call(this,e),o)for(var i=0;i<o.length;i++){var a=o[i];1===a.__CE_state&&t.disconnectedCallback(a)}return this.ownerDocument.__CE_registry?Qo(t,this):Yo(t,this),e}})}function n(e,n){e.insertAdjacentElement=function(e,r){var o=qo(r);return e=n.call(this,e,r),o&&Zo(t,r),qo(e)&&Jo(t,r),e}}function r(e,n){function r(e,n){for(var r=[];e!==n;e=e.nextSibling)r.push(e);for(n=0;n<r.length;n++)Qo(t,r[n])}e.insertAdjacentHTML=function(t,e){if("beforebegin"===(t=t.toLowerCase())){var o=this.previousSibling;n.call(this,t,e),r(o||this.parentNode.firstChild,this)}else if("afterbegin"===t)o=this.firstChild,n.call(this,t,e),r(this.firstChild,o);else if("beforeend"===t)o=this.lastChild,n.call(this,t,e),r(o||this.firstChild,null);else{if("afterend"!==t)throw new SyntaxError("The value provided ("+String(t)+") is not one of 'beforebegin', 'afterbegin', 'beforeend', or 'afterend'.");o=this.nextSibling,n.call(this,t,e),r(this.nextSibling,o)}}}go&&(Element.prototype.attachShadow=function(e){if(e=go.call(this,e),t.W&&!e.__CE_patched){e.__CE_patched=!0;for(var n=0;n<t.ca.length;n++)t.ca[n](e)}return this.__CE_shadowRoot=e}),wo&&wo.get?e(Element.prototype,wo):Fo&&Fo.get?e(HTMLElement.prototype,Fo):function(t,e){t.W=!0,t.g.push(e)}(t,(function(t){e(t,{enumerable:!0,configurable:!0,get:function(){return po.call(this,!0).innerHTML},set:function(t){var e="template"===this.localName,n=e?this.content:this,r=so.call(document,this.namespaceURI,this.localName);for(r.innerHTML=t;0<n.childNodes.length;)mo.call(n,n.childNodes[0]);for(t=e?r.content:r;0<t.childNodes.length;)vo.call(n,t.childNodes[0])}})})),Element.prototype.setAttribute=function(e,n){if(1!==this.__CE_state)return Co.call(this,e,n);var r=Eo.call(this,e);Co.call(this,e,n),n=Eo.call(this,e),t.attributeChangedCallback(this,e,r,n,null)},Element.prototype.setAttributeNS=function(e,n,r){if(1!==this.__CE_state)return xo.call(this,e,n,r);var o=So.call(this,e,n);xo.call(this,e,n,r),r=So.call(this,e,n),t.attributeChangedCallback(this,n,o,r,e)},Element.prototype.removeAttribute=function(e){if(1!==this.__CE_state)return No.call(this,e);var n=Eo.call(this,e);No.call(this,e),null!==n&&t.attributeChangedCallback(this,e,n,null,null)},Element.prototype.removeAttributeNS=function(e,n){if(1!==this.__CE_state)return To.call(this,e,n);var r=So.call(this,e,n);To.call(this,e,n);var o=So.call(this,e,n);r!==o&&t.attributeChangedCallback(this,n,r,o,e)},Ro?n(HTMLElement.prototype,Ro):Oo&&n(Element.prototype,Oo),Ho?r(HTMLElement.prototype,Ho):Do&&r(Element.prototype,Do),fi(t,Element.prototype,{prepend:Ao,append:Po}),function(t){function e(e){return function(n){for(var r=[],o=0;o<arguments.length;++o)r[o]=arguments[o];o=[];for(var i=[],a=0;a<r.length;a++){var s=r[a];if(s instanceof Element&&qo(s)&&i.push(s),s instanceof DocumentFragment)for(s=s.firstChild;s;s=s.nextSibling)o.push(s);else o.push(s)}for(e.apply(this,r),r=0;r<i.length;r++)Zo(t,i[r]);if(qo(this))for(r=0;r<o.length;r++)(i=o[r])instanceof Element&&Jo(t,i)}}var n=Element.prototype;void 0!==Mo&&(n.before=e(Mo)),void 0!==jo&&(n.after=e(jo)),void 0!==Lo&&(n.replaceWith=function(e){for(var n=[],r=0;r<arguments.length;++r)n[r]=arguments[r];r=[];for(var o=[],i=0;i<n.length;i++){var a=n[i];if(a instanceof Element&&qo(a)&&o.push(a),a instanceof DocumentFragment)for(a=a.firstChild;a;a=a.nextSibling)r.push(a);else r.push(a)}for(i=qo(this),Lo.apply(this,n),n=0;n<o.length;n++)Zo(t,o[n]);if(i)for(Zo(t,this),n=0;n<r.length;n++)(o=r[n])instanceof Element&&Jo(t,o)}),void 0!==ko&&(n.remove=function(){var e=qo(this);ko.call(this),e&&Zo(t,this)})}(t)}(t),t=new ai(t),document.__CE_registry=t,Object.defineProperty(window,"customElements",{configurable:!0,enumerable:!0,value:t})}function vi(){this.end=this.start=0,this.rules=this.parent=this.previous=null,this.cssText=this.parsedCssText="",this.atRule=!1,this.type=0,this.parsedSelector=this.selector=this.keyframesName=""}function yi(t){var e=t=t.replace(Si,"").replace(xi,""),n=new vi;n.start=0,n.end=e.length;for(var r=n,o=0,i=e.length;o<i;o++)if("{"===e[o]){r.rules||(r.rules=[]);var a=r,s=a.rules[a.rules.length-1]||null;(r=new vi).start=o+1,r.parent=a,r.previous=s,a.rules.push(r)}else"}"===e[o]&&(r.end=o+1,r=r.parent||n);return mi(n,t)}function mi(t,e){var n=e.substring(t.start,t.end-1);if(t.parsedCssText=t.cssText=n.trim(),t.parent&&(n=function(t){return t.replace(/\\([0-9a-f]{1,6})\s/gi,(function(t,e){for(e=6-(t=e).length;e--;)t="0"+t;return"\\"+t}))}(n=e.substring(t.previous?t.previous.end:t.parent.start,t.start-1)),n=(n=n.replace(Mi," ")).substring(n.lastIndexOf(";")+1),n=t.parsedSelector=t.selector=n.trim(),t.atRule=0===n.indexOf("@"),t.atRule?0===n.indexOf("@media")?t.type=Ci:n.match(Pi)&&(t.type=Ei,t.keyframesName=t.selector.split(Mi).pop()):t.type=0===n.indexOf("--")?Ni:wi),n=t.rules)for(var r=0,o=n.length,i=void 0;r<o&&(i=n[r]);r++)mi(i,e);return t}function _i(t,e,n){n=void 0===n?"":n;var r="";if(t.cssText||t.rules){var o,i=t.rules;if((o=i)&&(o=!((o=i[0])&&o.selector&&0===o.selector.indexOf("--"))),o){o=0;for(var a=i.length,s=void 0;o<a&&(s=i[o]);o++)r=_i(s,e,r)}else(r=(e=e?t.cssText:(e=(e=t.cssText).replace(Ti,"").replace(Oi,"")).replace(Di,"").replace(Ai,"")).trim())&&(r="  "+r+"\n")}return r&&(t.selector&&(n+=t.selector+" {\n"),n+=r,t.selector&&(n+="}\n\n")),n}di&&!di.forcePolyfill&&"function"==typeof di.define&&"function"==typeof di.get||pi(),window.__CE_installPolyfill=pi;var bi,gi,wi=1,Ei=7,Ci=4,Ni=1e3,Si=/\/\*[^*]*\*+([^/*][^*]*\*+)*\//gim,xi=/@import[^;]*;/gim,Ti=/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\n]|$)/gim,Oi=/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\n]|$)?/gim,Di=/@apply\s*\(?[^);]*\)?\s*(?:[;\n]|$)?/gim,Ai=/[^;:]*?:[^;]*?var\([^;]*\)(?:[;\n]|$)?/gim,Pi=/^@[^\s]*keyframes/,Mi=/\s+/g,ji=!(window.ShadyDOM&&window.ShadyDOM.inUse);function Li(t){bi=(!t||!t.shimcssproperties)&&(ji||!(navigator.userAgent.match(/AppleWebKit\/601|Edge\/15/)||!window.CSS||!CSS.supports||!CSS.supports("box-shadow","0 0 0 var(--foo)")))}window.ShadyCSS&&void 0!==window.ShadyCSS.cssBuild&&(gi=window.ShadyCSS.cssBuild);var ki=!(!window.ShadyCSS||!window.ShadyCSS.disableRuntime);window.ShadyCSS&&void 0!==window.ShadyCSS.nativeCss?bi=window.ShadyCSS.nativeCss:window.ShadyCSS?(Li(window.ShadyCSS),window.ShadyCSS=void 0):Li(window.WebComponents&&window.WebComponents.flags);var Ii=bi,Fi=/(?:^|[;\s{]\s*)(--[\w-]*?)\s*:\s*(?:((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};{])+)|\{([^}]*)\}(?:(?=[;\s}])|$))/gi,Ri=/(?:^|\W+)@apply\s*\(?([^);\n]*)\)?/gi,Hi=/(--[\w-]+)\s*([:,;)]|$)/gi,Ui=/(animation\s*:)|(animation-name\s*:)/,Bi=/@media\s(.*)/,Wi=/\{[^}]*\}/g,qi=new Set;function Vi(t,e){return t?("string"==typeof t&&(t=yi(t)),e&&Ki(t,e),_i(t,Ii)):""}function Gi(t){return!t.__cssRules&&t.textContent&&(t.__cssRules=yi(t.textContent)),t.__cssRules||null}function zi(t){return!!t.parent&&t.parent.type===Ei}function Ki(t,e,n,r){if(t){var o=!1,i=t.type;if(r&&i===Ci){var a=t.selector.match(Bi);a&&(window.matchMedia(a[1]).matches||(o=!0))}if(i===wi?e(t):n&&i===Ei?n(t):i===Ni&&(o=!0),(t=t.rules)&&!o)for(o=0,i=t.length,a=void 0;o<i&&(a=t[o]);o++)Ki(a,e,n,r)}}function Xi(t,e,n,r){var o=document.createElement("style");return e&&o.setAttribute("scope",e),o.textContent=t,Ji(o,n,r),o}var Yi=null;function $i(t){t=document.createComment(" Shady DOM styles for "+t+" ");var e=document.head;return e.insertBefore(t,(Yi?Yi.nextSibling:null)||e.firstChild),Yi=t}function Ji(t,e,n){(e=e||document.head).insertBefore(t,n&&n.nextSibling||e.firstChild),Yi?t.compareDocumentPosition(Yi)===Node.DOCUMENT_POSITION_PRECEDING&&(Yi=t):Yi=t}function Zi(t,e){for(var n=0,r=t.length;e<r;e++)if("("===t[e])n++;else if(")"===t[e]&&0==--n)return e;return-1}function Qi(t,e){var n=t.indexOf("var(");if(-1===n)return e(t,"","","");var r=Zi(t,n+3),o=t.substring(n+4,r);return n=t.substring(0,n),t=Qi(t.substring(r+1),e),-1===(r=o.indexOf(","))?e(n,o.trim(),"",t):e(n,o.substring(0,r).trim(),o.substring(r+1).trim(),t)}function ta(t,e){ji?t.setAttribute("class",e):window.ShadyDOM.nativeMethods.setAttribute.call(t,"class",e)}var ea=window.ShadyDOM&&window.ShadyDOM.wrap||function(t){return t};function na(t){var e=t.localName,n="";return e?-1<e.indexOf("-")||(n=e,e=t.getAttribute&&t.getAttribute("is")||""):(e=t.is,n=t.extends),{is:e,ha:n}}function ra(t){for(var e=[],n="",r=0;0<=r&&r<t.length;r++)if("("===t[r]){var o=Zi(t,r);n+=t.slice(r,o+1),r=o}else","===t[r]?(e.push(n),n=""):n+=t[r];return n&&e.push(n),e}function oa(t){if(void 0!==gi)return gi;if(void 0===t.__cssBuild){var e=t.getAttribute("css-build");if(e)t.__cssBuild=e;else{if(""!==(e=(e="template"===t.localName?t.content.firstChild:t.firstChild)instanceof Comment&&"css-build"===(e=e.textContent.trim().split(":"))[0]?e[1]:"")){var n="template"===t.localName?t.content.firstChild:t.firstChild;n.parentNode.removeChild(n)}t.__cssBuild=e}}return t.__cssBuild||""}function ia(t){return!(""===(t=void 0===t?"":t)||!Ii)&&(ji?"shadow"===t:"shady"===t)}function aa(){}function sa(t,e,n){var r;if(e.nodeType===Node.ELEMENT_NODE&&n(e),r="template"===e.localName?(e.content||e._content||e).childNodes:e.children||e.childNodes)for(e=0;e<r.length;e++)sa(t,r[e],n)}function ua(t,e,n){if(e)if(t.classList)n?(t.classList.remove("style-scope"),t.classList.remove(e)):(t.classList.add("style-scope"),t.classList.add(e));else if(t.getAttribute){var r=t.getAttribute("class");n?r&&ta(t,e=r.replace("style-scope","").replace(e,"")):ta(t,(r?r+" ":"")+"style-scope "+e)}}function ca(t,e,n){sa(Sa,t,(function(t){ua(t,e,!0),ua(t,n)}))}function la(t,e){sa(Sa,t,(function(t){ua(t,e||"",!0)}))}function fa(t,e,n,r,o){var i=Sa;return""===(o=void 0===o?"":o)&&(o=ji||"shady"===(void 0===r?"":r)?Vi(e,n):function(t,e,n,r,o){var i=ha(n,r);return n=n?"."+n:"",Vi(e,(function(e){e.i||(e.selector=e.F=da(t,e,t.h,n,i),e.i=!0),o&&o(e,n,i)}))}(i,e,(t=na(t)).is,t.ha,n)+"\n\n"),o.trim()}function ha(t,e){return e?"[is="+t+"]":t}function da(t,e,n,r,o){var i=ra(e.selector);if(!zi(e)){e=0;for(var a=i.length,s=void 0;e<a&&(s=i[e]);e++)i[e]=n.call(t,s,r,o)}return i.filter((function(t){return!!t})).join(",")}function pa(t){return t.replace(ma,(function(t,e,n){return-1<n.indexOf("+")?n=n.replace(/\+/g,"___"):-1<n.indexOf("___")&&(n=n.replace(/___/g,"+")),":"+e+"("+n+")"}))}function va(t,e){t=t.split(/(\[.+?\])/);for(var n=[],r=0;r<t.length;r++)if(1==r%2)n.push(t[r]);else{var o=t[r];""===o&&r===t.length-1||((o=o.split(":"))[0]+=e,n.push(o.join(":")))}return n.join("")}function ya(t){":root"===t.selector&&(t.selector="html")}aa.prototype.h=function(t,e,n){var r=!1;t=t.trim();var o=ma.test(t);o&&(t=pa(t=t.replace(ma,(function(t,e,n){return":"+e+"("+n.replace(/\s/g,"")+")"}))));var i=Na.test(t);if(i){var a=function(t){for(var e,n=[];e=t.match(Na);){var r=e.index,o=Zi(t,r);if(-1===o)throw Error(e.input+" selector missing ')'");e=t.slice(r,o+1),t=t.replace(e,""),n.push(e)}return{Ba:t,matches:n}}(t);t=a.Ba,a=a.matches}return t=(t=t.replace(ga,":host $1")).replace(_a,(function(t,o,i){return r||(t=function(t,e,n,r){var o=t.indexOf("::slotted");if(0<=t.indexOf(":host")?t=function(t,e){var n=t.match(wa);return(n=n&&n[2].trim()||"")?n[0].match(ba)?t.replace(wa,(function(t,n,r){return e+r})):n.split(ba)[0]===e?n:"should_not_match":t.replace(":host",e)}(t,r):0!==o&&(t=n?va(t,n):t),n=!1,0<=o&&(e="",n=!0),n){var i=!0;n&&(t=t.replace(Ea,(function(t,e){return" > "+e})))}return{value:t,Ua:e,stop:i}}(i,o,e,n),r=r||t.stop,o=t.Ua,i=t.value),o+i})),i&&(t=function(t,e){var n=t.split("");return e.reduce((function(t,e,r){return t+e+n[r+1]}),n[0])}(t,a)),o&&(t=pa(t)),t.replace(Ca,(function(t,e,n,r){return'[dir="'+n+'"] '+e+r+", "+e+'[dir="'+n+'"]'+r}))},aa.prototype.i=function(t){return t.match(":host")?"":t.match("::slotted")?this.h(t,":not(.style-scope)"):va(t.trim(),":not(.style-scope)")},i.Object.defineProperties(aa.prototype,{g:{configurable:!0,enumerable:!0,get:function(){return"style-scope"}}});var ma=/:(nth[-\w]+)\(([^)]+)\)/,_a=/(^|[\s>+~]+)((?:\[.+?\]|[^\s>+~=[])+)/g,ba=/[[.:#*]/,ga=/^(::slotted)/,wa=/(:host)(?:\(((?:\([^)(]*\)|[^)(]*)+?)\))/,Ea=/(?:::slotted)(?:\(((?:\([^)(]*\)|[^)(]*)+?)\))/,Ca=/(.*):dir\((?:(ltr|rtl))\)(.*)/,Na=/:(?:matches|any|-(?:webkit|moz)-any)/,Sa=new aa;function xa(t,e,n,r,o){this.M=t||null,this.h=e||null,this.za=n||[],this.K=null,this.cssBuild=o||"",this.ha=r||"",this.g=this.L=this.R=null}function Ta(t){return t?t.__styleInfo:null}function Oa(t,e){return t.__styleInfo=e}function Da(t){var e=this.matches||this.matchesSelector||this.mozMatchesSelector||this.msMatchesSelector||this.oMatchesSelector||this.webkitMatchesSelector;return e&&e.call(this,t)}xa.prototype.i=function(){return this.M},xa.prototype._getStyleRules=xa.prototype.i;var Aa=/:host\s*>\s*/,Pa=navigator.userAgent.match("Trident");function Ma(){}function ja(t){if(!t.D){var e={},n={};La(t,n)&&(e.P=n,t.rules=null),e.cssText=t.parsedCssText.replace(Wi,"").replace(Fi,""),t.D=e}}function La(t,e){var n=t.D;if(!n){n=t.parsedCssText;for(var r;t=Fi.exec(n);)"inherit"===(r=(t[2]||t[3]).trim())&&"unset"===r||(e[t[1].trim()]=r),r=!0;return r}if(n.P)return Object.assign(e,n.P),!0}function ka(t,e,n){return e&&(e=0<=e.indexOf(";")?Ia(t,e,n):Qi(e,(function(e,r,o,i){return r?((r=ka(t,n[r],n))&&"initial"!==r?"apply-shim-inherit"===r&&(r="inherit"):r=ka(t,n[o]||o,n)||o,e+(r||"")+i):e+i}))),e&&e.trim()||""}function Ia(t,e,n){e=e.split(";");for(var r,o,i=0;i<e.length;i++)if(r=e[i]){if(Ri.lastIndex=0,o=Ri.exec(r))r=ka(t,n[o[1]],n);else if(-1!==(o=r.indexOf(":"))){var a=r.substring(o);a=ka(t,a=a.trim(),n)||a,r=r.substring(0,o)+a}e[i]=r&&r.lastIndexOf(";")===r.length-1?r.slice(0,-1):r||""}return e.join(";")}function Fa(t){return function(e){return e.replace(t.u,t.g)}}function Ra(t,e){var n=Ha,r=Gi(t);t.textContent=Vi(r,(function(t){var r=t.cssText=t.parsedCssText;t.D&&t.D.cssText&&(r=r.replace(Ti,"").replace(Oi,""),t.cssText=Ia(n,r,e))}))}i.Object.defineProperties(Ma.prototype,{g:{configurable:!0,enumerable:!0,get:function(){return"x-scope"}}});var Ha=new Ma,Ua={},Ba=window.customElements;if(Ba&&!ji&&!ki){var Wa=Ba.define;Ba.define=function(t,e,n){Ua[t]||(Ua[t]=$i(t)),Wa.call(Ba,t,e,n)}}function qa(){this.cache={}}function Va(){}qa.prototype.store=function(t,e,n,r){var o=this.cache[t]||[];o.push({P:e,styleElement:n,L:r}),100<o.length&&o.shift(),this.cache[t]=o};var Ga=new RegExp(Sa.g+"\\s*([^\\s]*)");function za(t){return(t=(t.classList&&t.classList.value?t.classList.value:t.getAttribute("class")||"").match(Ga))?t[1]:""}function Ka(t){var e=ea(t).getRootNode();return e===t||e===t.ownerDocument?"":(t=e.host)?na(t).is:""}function Xa(t){for(var e=0;e<t.length;e++){var n=t[e];if(n.target!==document.documentElement&&n.target!==document.head)for(var r=0;r<n.addedNodes.length;r++){var o=n.addedNodes[r];if(o.nodeType===Node.ELEMENT_NODE){var i=o.getRootNode(),a=za(o);if(a&&i===o.ownerDocument&&("style"!==o.localName&&"template"!==o.localName||""===oa(o)))la(o,a);else if(i instanceof ShadowRoot)for((i=Ka(o))!==a&&ca(o,a,i),o=window.ShadyDOM.nativeMethods.querySelectorAll.call(o,":not(."+Sa.g+")"),a=0;a<o.length;a++){var s=Ka(i=o[a]);s&&ua(i,s)}}}}}if(!(ji||window.ShadyDOM&&window.ShadyDOM.handlesDynamicScoping)){var Ya=new MutationObserver(Xa),$a=function(t){Ya.observe(t,{childList:!0,subtree:!0})};if(window.customElements&&!window.customElements.polyfillWrapFlushCallback)$a(document);else{var Ja=function(){$a(document.body)};window.HTMLImports?window.HTMLImports.whenReady(Ja):requestAnimationFrame((function(){if("loading"===document.readyState){var t=function(){Ja(),document.removeEventListener("readystatechange",t)};document.addEventListener("readystatechange",t)}else Ja()}))}Va=function(){Xa(Ya.takeRecords())}}var Za={},Qa=Promise.resolve();function ts(t){(t=Za[t])&&(t._applyShimCurrentVersion=t._applyShimCurrentVersion||0,t._applyShimValidatingVersion=t._applyShimValidatingVersion||0,t._applyShimNextVersion=(t._applyShimNextVersion||0)+1)}function es(t){return t._applyShimCurrentVersion===t._applyShimNextVersion}var ns={},rs=new qa;function os(){this.da={},this.i=document.documentElement;var t=new vi;t.rules=[],this.u=Oa(this.i,new xa(t)),this.O=!1,this.g=this.h=null}function is(t){var e=na(t),n=e.is;e=e.ha;var r=Ua[n]||null,o=Za[n];if(o)return Oa(t,e=new xa(n=o._styleAst,r,o.g,e,o=oa(o))),e}function as(t){if(!t.h&&window.ShadyCSS&&window.ShadyCSS.ApplyShim){t.h=window.ShadyCSS.ApplyShim,t.h.invalidCallback=ts;var e=!0}else e=!1;return function(t){!t.g&&window.ShadyCSS&&window.ShadyCSS.CustomStyleInterface&&(t.g=window.ShadyCSS.CustomStyleInterface,t.g.transformCallback=function(e){t.Ma(e)},t.g.validateCallback=function(){requestAnimationFrame((function(){(t.g.enqueued||t.O)&&t.flushCustomStyles()}))})}(t),e}function ss(t,e,n){var r=na(e).is;if(n.K){var o,i=n.K;for(o in i)null===o?e.style.removeProperty(o):e.style.setProperty(o,i[o])}!(i=Za[r])&&e!==t.i||i&&""!==oa(i)||!i||!i._style||es(i)||((es(i)||i._applyShimValidatingVersion!==i._applyShimNextVersion)&&(as(t),t.h&&t.h.transformRules(i._styleAst,r),i._style.textContent=fa(e,n.M),function(t){t._applyShimValidatingVersion=t._applyShimNextVersion,t._validating||(t._validating=!0,Qa.then((function(){t._applyShimCurrentVersion=t._applyShimNextVersion,t._validating=!1})))}(i)),ji&&(t=e.shadowRoot)&&(t=t.querySelector("style"))&&(t.textContent=fa(e,n.M)),n.M=i._styleAst)}function us(t,e){return(e=ea(e).getRootNode().host)?Ta(e)||is(e)?e:us(t,e):t.i}function cs(t,e,n){var r=us(t,e),o=Ta(r),i=o.R;for(var a in r===t.i||i||(cs(t,r,o),i=o.R),t=Object.create(i||null),r=function(t,e,n){var r={},o={};return Ki(e,(function(e){!function(t,e,n,r){if(e.D||ja(e),e.D.P){var o=na(t);t=o.is,o=o.ha,o=t?ha(t,o):"html";var i=e.parsedSelector,a=!!i.match(Aa)||"html"===o&&-1<i.indexOf("html"),s=0===i.indexOf(":host")&&!a;"shady"===n&&(s=!(a=i===o+" > *."+o||-1!==i.indexOf("html"))&&0===i.indexOf(o)),(a||s)&&(n=o,s&&(e.F||(e.F=da(Sa,e,Sa.h,t?"."+t:"",o)),n=e.F||o),a&&"html"===o&&(n=e.F||e.O),r({Ba:n,ab:s,qb:a}))}}(t,e,n,(function(n){Da.call(t._element||t,n.Ba)&&(n.ab?La(e,r):La(e,o))}))}),null,!0),{hb:o,Za:r}}(e,n.M,n.cssBuild),e=function(t,e){var n={},r=[];return Ki(t,(function(t){t.D||ja(t);var o=t.F||t.parsedSelector;e&&t.D.P&&o&&Da.call(e,o)&&(La(t,n),t=t.index,o=parseInt(t/32,10),r[o]=(r[o]||0)|1<<t%32)}),null,!0),{P:n,key:r}}(o.M,e).P,Object.assign(t,r.Za,e,r.hb),e=n.K)((o=e[a])||0===o)&&(t[a]=o);for(a=Ha,e=Object.getOwnPropertyNames(t),o=0;o<e.length;o++)t[r=e[o]]=ka(a,t[r],t);n.R=t}(t=os.prototype).flush=function(){Va()},t.Xa=function(t){return Gi(t)},t.lb=function(t){return Vi(t)},t.prepareTemplate=function(t,e,n){this.prepareTemplateDom(t,e),this.prepareTemplateStyles(t,e,n)},t.prepareTemplateStyles=function(t,e,n){if(!t._prepared&&!ki){ji||Ua[e]||(Ua[e]=$i(e)),t._prepared=!0,t.name=e,t.extends=n,Za[e]=t;var r=oa(t),o=ia(r);n={is:e,extends:n};for(var i=[],a=t.content.querySelectorAll("style"),s=0;s<a.length;s++){var u=a[s];if(u.hasAttribute("shady-unscoped")){if(!ji){var c=u.textContent;if(!qi.has(c)){qi.add(c);var l=document.createElement("style");l.setAttribute("shady-unscoped",""),l.textContent=c,document.head.appendChild(l)}u.parentNode.removeChild(u)}}else i.push(u.textContent),u.parentNode.removeChild(u)}i=i.join("").trim()+(ns[e]||""),as(this),o||((a=!r)&&(a=Ri.test(i)||Fi.test(i),Ri.lastIndex=0,Fi.lastIndex=0),s=yi(i),a&&Ii&&this.h&&this.h.transformRules(s,e),t._styleAst=s),a=[],Ii||(a=function(t){var e={},n=[],r=0;for(var o in Ki(t,(function(t){ja(t),t.index=r++,t=t.D.cssText;for(var n;n=Hi.exec(t);){var o=n[1];":"!==n[2]&&(e[o]=!0)}}),(function(t){n.push(t)})),t.h=n,t=[],e)t.push(o);return t}(t._styleAst)),a.length&&!Ii||(s=ji?t.content:null,e=Ua[e]||null,r=(r=fa(n,t._styleAst,null,r,o?i:"")).length?Xi(r,n.is,s,e):null,t._style=r),t.g=a}},t.fb=function(t,e){ns[e]=t.join(" ")},t.prepareTemplateDom=function(t,e){if(!ki){var n=oa(t);ji||"shady"===n||t._domPrepared||(t._domPrepared=!0,function(t,e){sa(Sa,t,(function(t){ua(t,e||"")}))}(t.content,e))}},t.flushCustomStyles=function(){if(!ki){var t=as(this);if(this.g){var e=this.g.processStyles();if((t||this.g.enqueued)&&!ia(this.u.cssBuild)){if(Ii){if(!this.u.cssBuild)for(t=0;t<e.length;t++){var n=this.g.getStyleForCustomStyle(e[t]);if(n&&Ii&&this.h){var r=Gi(n);as(this),this.h.transformRules(r),n.textContent=Vi(r)}}}else{for(function(t,e){e=e.map((function(e){return t.g.getStyleForCustomStyle(e)})).filter((function(t){return!!t})),e.sort((function(t,e){return(t=e.compareDocumentPosition(t))&Node.DOCUMENT_POSITION_FOLLOWING?1:t&Node.DOCUMENT_POSITION_PRECEDING?-1:0})),t.u.M.rules=e.map((function(t){return Gi(t)}))}(this,e),cs(this,this.i,this.u),t=0;t<e.length;t++)(n=this.g.getStyleForCustomStyle(e[t]))&&Ra(n,this.u.R);this.O&&this.styleDocument()}this.g.enqueued=!1}}}},t.styleElement=function(t,e){if(ki){if(e){Ta(t)||Oa(t,new xa(null));var n=Ta(t);n.K=n.K||{},Object.assign(n.K,e),ss(this,t,n)}}else if(n=Ta(t)||is(t))if(t!==this.i&&(this.O=!0),e&&(n.K=n.K||{},Object.assign(n.K,e)),Ii)ss(this,t,n);else if(this.flush(),cs(this,t,n),n.za&&n.za.length){var r;e=na(t).is;t:{if(r=rs.cache[e])for(var o=r.length-1;0<=o;o--){var i=r[o];e:{for(var a=n.za,s=0;s<a.length;s++){var u=a[s];if(i.P[u]!==n.R[u]){a=!1;break e}}a=!0}if(a){r=i;break t}}r=void 0}a=r?r.styleElement:null,o=n.L,(i=r&&r.L)||(i=e+"-"+(i=this.da[e]=(this.da[e]||0)+1)),n.L=i,i=n.L,s=Ha,s=a?a.textContent||"":function(t,e,n,r){var o=na(e),i=ha(o.is,o.ha),a=new RegExp("(?:^|[^.#[:])"+(e.extends?"\\"+i.slice(0,-1)+"\\]":i)+"($|[.:[\\s>+~])"),s=Ta(e);o=s.M,s=s.cssBuild;var u=function(t,e){t=t.h;var n={};if(!ji&&t)for(var r=0,o=t[r];r<t.length;o=t[++r]){var i=o,a=e;i.u=new RegExp("\\b"+i.keyframesName+"(?!\\B|-)","g"),i.g=i.keyframesName+"-"+a,i.F=i.F||i.selector,i.selector=i.F.replace(i.keyframesName,i.g),n[o.keyframesName]=Fa(o)}return n}(o,r);return fa(e,o,(function(e){var o="";if(e.D||ja(e),e.D.cssText&&(o=Ia(t,e.D.cssText,n)),e.cssText=o,!ji&&!zi(e)&&e.cssText){var s=o=e.cssText;if(null==e.Ia&&(e.Ia=Ui.test(o)),e.Ia)if(null==e.pa)for(var c in e.pa=[],u)o!==(s=(s=u[c])(o))&&(o=s,e.pa.push(c));else{for(c=0;c<e.pa.length;++c)o=(s=u[e.pa[c]])(o);s=o}e.cssText=s,e.F=e.F||e.selector,o="."+r,s=0;for(var l=(c=ra(e.F)).length,f=void 0;s<l&&(f=c[s]);s++)c[s]=f.match(a)?f.replace(i,o):o+" "+f;e.selector=c.join(",")}}),s)}(s,t,n.R,i);var c=(u=Ta(t)).g;c&&!ji&&c!==a&&(c._useCount--,0>=c._useCount&&c.parentNode&&c.parentNode.removeChild(c)),ji?u.g?(u.g.textContent=s,a=u.g):s&&(a=Xi(s,i,t.shadowRoot,u.h)):a?a.parentNode||(Pa&&-1<s.indexOf("@media")&&(a.textContent=s),Ji(a,null,u.h)):s&&(a=Xi(s,i,null,u.h)),a&&(a._useCount=a._useCount||0,u.g!=a&&a._useCount++,u.g=a),i=a,ji||(a=n.L,u=s=t.getAttribute("class")||"",o&&(u=s.replace(new RegExp("\\s*x-scope\\s*"+o+"\\s*","g")," ")),s!==(u+=(u?" ":"")+"x-scope "+a)&&ta(t,u)),r||rs.store(e,n.R,i,n.L)}},t.styleDocument=function(t){this.styleSubtree(this.i,t)},t.styleSubtree=function(t,e){var n=ea(t),r=n.shadowRoot,o=t===this.i;if((r||o)&&this.styleElement(t,e),t=o?n:r)for(t=Array.from(t.querySelectorAll("*")).filter((function(t){return ea(t).shadowRoot})),e=0;e<t.length;e++)this.styleSubtree(t[e])},t.Ma=function(t){var e=this,n=oa(t);if(n!==this.u.cssBuild&&(this.u.cssBuild=n),!ia(n)){var r=Gi(t);Ki(r,(function(t){if(ji)ya(t);else{var r=Sa;t.selector=t.parsedSelector,ya(t),t.selector=t.F=da(r,t,r.i,void 0,void 0)}Ii&&""===n&&(as(e),e.h&&e.h.transformRule(t))})),Ii?t.textContent=Vi(r):this.u.M.rules.push(r)}},t.getComputedStyleValue=function(t,e){var n;return Ii||(n=(Ta(t)||Ta(us(this,t))).R[e]),(n=n||window.getComputedStyle(t).getPropertyValue(e))?n.trim():""},t.kb=function(t,e){var n=ea(t).getRootNode();if(e=e?("string"==typeof e?e:String(e)).split(/\s/):[],!(n=n.host&&n.host.localName)){var r=t.getAttribute("class");if(r){r=r.split(/\s/);for(var o=0;o<r.length;o++)if(r[o]===Sa.g){n=r[o+1];break}}}n&&e.push(Sa.g,n),Ii||(n=Ta(t))&&n.L&&e.push(Ha.g,n.L),ta(t,e.join(" "))},t.Ta=function(t){return Ta(t)},t.jb=function(t,e){ua(t,e)},t.mb=function(t,e){ua(t,e,!0)},t.ib=function(t){return Ka(t)},t.Va=function(t){return za(t)},os.prototype.flush=os.prototype.flush,os.prototype.prepareTemplate=os.prototype.prepareTemplate,os.prototype.styleElement=os.prototype.styleElement,os.prototype.styleDocument=os.prototype.styleDocument,os.prototype.styleSubtree=os.prototype.styleSubtree,os.prototype.getComputedStyleValue=os.prototype.getComputedStyleValue,os.prototype.setElementClass=os.prototype.kb,os.prototype._styleInfoForNode=os.prototype.Ta,os.prototype.transformCustomStyleForDocument=os.prototype.Ma,os.prototype.getStyleAst=os.prototype.Xa,os.prototype.styleAstToString=os.prototype.lb,os.prototype.flushCustomStyles=os.prototype.flushCustomStyles,os.prototype.scopeNode=os.prototype.jb,os.prototype.unscopeNode=os.prototype.mb,os.prototype.scopeForNode=os.prototype.ib,os.prototype.currentScopeForNode=os.prototype.Va,os.prototype.prepareAdoptedCssText=os.prototype.fb,Object.defineProperties(os.prototype,{nativeShadow:{get:function(){return ji}},nativeCss:{get:function(){return Ii}}});var ls,fs,hs=new os;window.ShadyCSS&&(ls=window.ShadyCSS.ApplyShim,fs=window.ShadyCSS.CustomStyleInterface),window.ShadyCSS={ScopingShim:hs,prepareTemplate:function(t,e,n){hs.flushCustomStyles(),hs.prepareTemplate(t,e,n)},prepareTemplateDom:function(t,e){hs.prepareTemplateDom(t,e)},prepareTemplateStyles:function(t,e,n){hs.flushCustomStyles(),hs.prepareTemplateStyles(t,e,n)},styleSubtree:function(t,e){hs.flushCustomStyles(),hs.styleSubtree(t,e)},styleElement:function(t){hs.flushCustomStyles(),hs.styleElement(t)},styleDocument:function(t){hs.flushCustomStyles(),hs.styleDocument(t)},flushCustomStyles:function(){hs.flushCustomStyles()},getComputedStyleValue:function(t,e){return hs.getComputedStyleValue(t,e)},nativeCss:Ii,nativeShadow:ji,cssBuild:gi,disableRuntime:ki},ls&&(window.ShadyCSS.ApplyShim=ls),fs&&(window.ShadyCSS.CustomStyleInterface=fs),function(t){function e(t){return""==t&&(i.call(this),this.m=!0),t.toLowerCase()}function n(t){var e=t.charCodeAt(0);return 32<e&&127>e&&-1==[34,35,60,62,63,96].indexOf(e)?t:encodeURIComponent(t)}function r(t){var e=t.charCodeAt(0);return 32<e&&127>e&&-1==[34,35,60,62,96].indexOf(e)?t:encodeURIComponent(t)}function o(t,o,a){function s(t){m.push(t)}var u=o||"scheme start",d=0,p="",v=!1,y=!1,m=[];t:for(;(null!=t[d-1]||0==d)&&!this.m;){var _=t[d];switch(u){case"scheme start":if(!_||!f.test(_)){if(o){s("Invalid scheme.");break t}p="",u="no scheme";continue}p+=_.toLowerCase(),u="scheme";break;case"scheme":if(_&&h.test(_))p+=_.toLowerCase();else{if(":"!=_){if(o){null!=_&&s("Code point not allowed in scheme: "+_);break t}p="",d=0,u="no scheme";continue}if(this.l=p,p="",o)break t;void 0!==c[this.l]&&(this.G=!0),u="file"==this.l?"relative":this.G&&a&&a.l==this.l?"relative or authority":this.G?"authority first slash":"scheme data"}break;case"scheme data":"?"==_?(this.A="?",u="query"):"#"==_?(this.C="#",u="fragment"):null!=_&&"\t"!=_&&"\n"!=_&&"\r"!=_&&(this.va+=n(_));break;case"no scheme":if(a&&void 0!==c[a.l]){u="relative";continue}s("Missing scheme."),i.call(this),this.m=!0;break;case"relative or authority":if("/"!=_||"/"!=t[d+1]){s("Expected /, got: "+_),u="relative";continue}u="authority ignore slashes";break;case"relative":if(this.G=!0,"file"!=this.l&&(this.l=a.l),null==_){this.o=a.o,this.v=a.v,this.s=a.s.slice(),this.A=a.A,this.B=a.B,this.j=a.j;break t}if("/"==_||"\\"==_)"\\"==_&&s("\\ is an invalid code point."),u="relative slash";else if("?"==_)this.o=a.o,this.v=a.v,this.s=a.s.slice(),this.A="?",this.B=a.B,this.j=a.j,u="query";else{if("#"!=_){u=t[d+1];var b=t[d+2];("file"!=this.l||!f.test(_)||":"!=u&&"|"!=u||null!=b&&"/"!=b&&"\\"!=b&&"?"!=b&&"#"!=b)&&(this.o=a.o,this.v=a.v,this.B=a.B,this.j=a.j,this.s=a.s.slice(),this.s.pop()),u="relative path";continue}this.o=a.o,this.v=a.v,this.s=a.s.slice(),this.A=a.A,this.C="#",this.B=a.B,this.j=a.j,u="fragment"}break;case"relative slash":if("/"!=_&&"\\"!=_){"file"!=this.l&&(this.o=a.o,this.v=a.v,this.B=a.B,this.j=a.j),u="relative path";continue}"\\"==_&&s("\\ is an invalid code point."),u="file"==this.l?"file host":"authority ignore slashes";break;case"authority first slash":if("/"!=_){s("Expected '/', got: "+_),u="authority ignore slashes";continue}u="authority second slash";break;case"authority second slash":if(u="authority ignore slashes","/"!=_){s("Expected '/', got: "+_);continue}break;case"authority ignore slashes":if("/"!=_&&"\\"!=_){u="authority";continue}s("Expected authority, got: "+_);break;case"authority":if("@"==_){for(v&&(s("@ already seen."),p+="%40"),v=!0,_=0;_<p.length;_++)"\t"==(b=p[_])||"\n"==b||"\r"==b?s("Invalid whitespace in authority."):":"==b&&null===this.j?this.j="":(b=n(b),null!==this.j?this.j+=b:this.B+=b);p=""}else{if(null==_||"/"==_||"\\"==_||"?"==_||"#"==_){d-=p.length,p="",u="host";continue}p+=_}break;case"file host":if(null==_||"/"==_||"\\"==_||"?"==_||"#"==_){2!=p.length||!f.test(p[0])||":"!=p[1]&&"|"!=p[1]?(0!=p.length&&(this.o=e.call(this,p),p=""),u="relative path start"):u="relative path";continue}"\t"==_||"\n"==_||"\r"==_?s("Invalid whitespace in file host."):p+=_;break;case"host":case"hostname":if(":"!=_||y){if(null==_||"/"==_||"\\"==_||"?"==_||"#"==_){if(this.o=e.call(this,p),p="",u="relative path start",o)break t;continue}"\t"!=_&&"\n"!=_&&"\r"!=_?("["==_?y=!0:"]"==_&&(y=!1),p+=_):s("Invalid code point in host/hostname: "+_)}else if(this.o=e.call(this,p),p="",u="port","hostname"==o)break t;break;case"port":if(/[0-9]/.test(_))p+=_;else{if(null==_||"/"==_||"\\"==_||"?"==_||"#"==_||o){if(""!=p&&((p=parseInt(p,10))!=c[this.l]&&(this.v=p+""),p=""),o)break t;u="relative path start";continue}"\t"==_||"\n"==_||"\r"==_?s("Invalid code point in port: "+_):(i.call(this),this.m=!0)}break;case"relative path start":if("\\"==_&&s("'\\' not allowed in path."),u="relative path","/"!=_&&"\\"!=_)continue;break;case"relative path":null!=_&&"/"!=_&&"\\"!=_&&(o||"?"!=_&&"#"!=_)?"\t"!=_&&"\n"!=_&&"\r"!=_&&(p+=n(_)):("\\"==_&&s("\\ not allowed in relative path."),(b=l[p.toLowerCase()])&&(p=b),".."==p?(this.s.pop(),"/"!=_&&"\\"!=_&&this.s.push("")):"."==p&&"/"!=_&&"\\"!=_?this.s.push(""):"."!=p&&("file"==this.l&&0==this.s.length&&2==p.length&&f.test(p[0])&&"|"==p[1]&&(p=p[0]+":"),this.s.push(p)),p="","?"==_?(this.A="?",u="query"):"#"==_&&(this.C="#",u="fragment"));break;case"query":o||"#"!=_?null!=_&&"\t"!=_&&"\n"!=_&&"\r"!=_&&(this.A+=r(_)):(this.C="#",u="fragment");break;case"fragment":null!=_&&"\t"!=_&&"\n"!=_&&"\r"!=_&&(this.C+=_)}d++}}function i(){this.B=this.va=this.l="",this.j=null,this.v=this.o="",this.s=[],this.C=this.A="",this.G=this.m=!1}function a(t,e){void 0===e||e instanceof a||(e=new a(String(e))),this.g=t,i.call(this),o.call(this,this.g.replace(/^[ \t\r\n\f]+|[ \t\r\n\f]+$/g,""),null,e)}var s=!1;try{var u=new URL("b","http://a");u.pathname="c%20d",s="http://a/c%20d"===u.href}catch(t){}if(!s){var c=Object.create(null);c.ftp=21,c.file=0,c.gopher=70,c.http=80,c.https=443,c.ws=80,c.wss=443;var l=Object.create(null);l["%2e"]=".",l[".%2e"]="..",l["%2e."]="..",l["%2e%2e"]="..";var f=/[a-zA-Z]/,h=/[a-zA-Z0-9+\-.]/;a.prototype={toString:function(){return this.href},get href(){if(this.m)return this.g;var t="";return""==this.B&&null==this.j||(t=this.B+(null!=this.j?":"+this.j:"")+"@"),this.protocol+(this.G?"//"+t+this.host:"")+this.pathname+this.A+this.C},set href(t){i.call(this),o.call(this,t)},get protocol(){return this.l+":"},set protocol(t){this.m||o.call(this,t+":","scheme start")},get host(){return this.m?"":this.v?this.o+":"+this.v:this.o},set host(t){!this.m&&this.G&&o.call(this,t,"host")},get hostname(){return this.o},set hostname(t){!this.m&&this.G&&o.call(this,t,"hostname")},get port(){return this.v},set port(t){!this.m&&this.G&&o.call(this,t,"port")},get pathname(){return this.m?"":this.G?"/"+this.s.join("/"):this.va},set pathname(t){!this.m&&this.G&&(this.s=[],o.call(this,t,"relative path start"))},get search(){return this.m||!this.A||"?"==this.A?"":this.A},set search(t){!this.m&&this.G&&(this.A="?","?"==t[0]&&(t=t.slice(1)),o.call(this,t,"query"))},get hash(){return this.m||!this.C||"#"==this.C?"":this.C},set hash(t){this.m||(t?(this.C="#","#"==t[0]&&(t=t.slice(1)),o.call(this,t,"fragment")):this.C="")},get origin(){var t;if(this.m||!this.l)return"";switch(this.l){case"data":case"file":case"javascript":case"mailto":return"null"}return(t=this.host)?this.l+"://"+t:""}};var d=t.URL;d&&(a.createObjectURL=function(t){return d.createObjectURL.apply(d,arguments)},a.revokeObjectURL=function(t){d.revokeObjectURL(t)}),t.URL=a}}(window);var ds=window.customElements,ps=!1,vs=null;function ys(){window.HTMLTemplateElement.bootstrap&&window.HTMLTemplateElement.bootstrap(window.document),vs&&vs(),ps=!0,window.WebComponents.ready=!0,document.dispatchEvent(new CustomEvent("WebComponentsReady",{bubbles:!0}))}ds.polyfillWrapFlushCallback&&ds.polyfillWrapFlushCallback((function(t){vs=t,ps&&t()})),"complete"!==document.readyState?(window.addEventListener("load",ys),window.addEventListener("DOMContentLoaded",(function(){window.removeEventListener("load",ys),ys()}))):ys()}).call(this)},788:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>r});const r='.WCategoryCards{display:flex;font-family:"Wallie";width:100%}.WCategoryCards__card{border-radius:16px;box-sizing:border-box;cursor:pointer;display:inline-block;height:90px;margin:0px 4px;min-width:160px;overflow:hidden;padding:16px;position:relative;width:160px}.WCategoryCards__card--no-image{align-items:center;display:flex;height:60px;justify-content:left}.WCategoryCards__card__title{display:inline-block;font-size:14px;font-weight:bold;line-height:18px;position:relative;width:80%;word-break:break-word;z-index:1}@media(min-width: 576px){.WCategoryCards__card__title{font-size:16px}}.WCategoryCards__card__image{bottom:-24px;height:90px;position:absolute;right:-26px;width:119px;z-index:0}'},652:(t,e,n)=>{"use strict";n.r(e),n.d(e,{ArgumentOutOfRangeError:()=>le,AsyncSubject:()=>it,BehaviorSubject:()=>nt,ConnectableObservable:()=>z,EMPTY:()=>At,EmptyError:()=>se,NEVER:()=>Ze,NotFoundError:()=>fe,Notification:()=>oe,NotificationKind:()=>Wt,ObjectUnsubscribedError:()=>Q,Observable:()=>H,ReplaySubject:()=>ot,Scheduler:()=>yt,SequenceError:()=>he,Subject:()=>tt,Subscriber:()=>T,Subscription:()=>v,TimeoutError:()=>pe,UnsubscriptionError:()=>d,VirtualAction:()=>Dt,VirtualTimeScheduler:()=>Ot,animationFrame:()=>Tt,animationFrameScheduler:()=>xt,animationFrames:()=>Y,asap:()=>bt,asapScheduler:()=>_t,async:()=>wt,asyncScheduler:()=>gt,audit:()=>pn,auditTime:()=>vn,bindCallback:()=>we,bindNodeCallback:()=>Ee,buffer:()=>yn,bufferCount:()=>mn,bufferTime:()=>_n,bufferToggle:()=>bn,bufferWhen:()=>gn,catchError:()=>wn,combineAll:()=>On,combineLatest:()=>De,combineLatestAll:()=>Tn,combineLatestWith:()=>An,concat:()=>Ie,concatAll:()=>ke,concatMap:()=>Pn,concatMapTo:()=>Mn,concatWith:()=>Ln,config:()=>b,connect:()=>In,connectable:()=>He,count:()=>Fn,debounce:()=>Rn,debounceTime:()=>Hn,defaultIfEmpty:()=>Un,defer:()=>Fe,delay:()=>Gn,delayWhen:()=>Vn,dematerialize:()=>zn,distinct:()=>Kn,distinctUntilChanged:()=>Xn,distinctUntilKeyChanged:()=>$n,elementAt:()=>Qn,empty:()=>Pt,endWith:()=>tr,every:()=>er,exhaust:()=>rr,exhaustAll:()=>nr,exhaustMap:()=>or,expand:()=>ir,filter:()=>sn,finalize:()=>ar,find:()=>sr,findIndex:()=>cr,first:()=>lr,firstValueFrom:()=>ce,flatMap:()=>mr,forkJoin:()=>Ue,from:()=>ee,fromEvent:()=>Ve,fromEventPattern:()=>ze,generate:()=>Ke,groupBy:()=>fr,identity:()=>I,ignoreElements:()=>Wn,iif:()=>Xe,interval:()=>$e,isEmpty:()=>hr,isObservable:()=>ae,last:()=>pr,lastValueFrom:()=>ue,map:()=>me,mapTo:()=>qn,materialize:()=>vr,max:()=>yr,merge:()=>Je,mergeAll:()=>Le,mergeMap:()=>je,mergeMapTo:()=>_r,mergeScan:()=>br,mergeWith:()=>wr,min:()=>Er,multicast:()=>Cr,never:()=>Qe,noop:()=>E,observable:()=>k,observeOn:()=>$t,of:()=>ne,onErrorResumeNext:()=>rn,pairs:()=>on,pairwise:()=>Nr,partition:()=>un,pipe:()=>F,pluck:()=>Sr,publish:()=>xr,publishBehavior:()=>Tr,publishLast:()=>Or,publishReplay:()=>Dr,queue:()=>Nt,queueScheduler:()=>Ct,race:()=>cn,raceWith:()=>Ar,range:()=>fn,reduce:()=>Cn,refCount:()=>G,repeat:()=>Pr,repeatWhen:()=>Mr,retry:()=>jr,retryWhen:()=>Lr,sample:()=>kr,sampleTime:()=>Ir,scan:()=>Fr,scheduled:()=>te,sequenceEqual:()=>Rr,share:()=>Hr,shareReplay:()=>Br,single:()=>Wr,skip:()=>qr,skipLast:()=>Vr,skipUntil:()=>Gr,skipWhile:()=>zr,startWith:()=>Kr,subscribeOn:()=>Jt,switchAll:()=>Yr,switchMap:()=>Xr,switchMapTo:()=>$r,switchScan:()=>Jr,take:()=>Bn,takeLast:()=>dr,takeUntil:()=>Zr,takeWhile:()=>Qr,tap:()=>to,throttle:()=>no,throttleTime:()=>ro,throwError:()=>re,throwIfEmpty:()=>Jn,timeInterval:()=>oo,timeout:()=>ve,timeoutWith:()=>ao,timer:()=>Ye,timestamp:()=>so,toArray:()=>Sn,using:()=>hn,window:()=>uo,windowCount:()=>co,windowTime:()=>lo,windowToggle:()=>fo,windowWhen:()=>ho,withLatestFrom:()=>po,zip:()=>dn,zipAll:()=>vo,zipWith:()=>mo});var r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},r(t,e)};function o(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function i(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}function a(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function s(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function u(t,e,n){if(n||2===arguments.length)for(var r,o=0,i=e.length;o<i;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))}function c(t){return this instanceof c?(this.v=t,this):new c(t)}function l(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(t,e||[]),i=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(t){o[t]&&(r[t]=function(e){return new Promise((function(n,r){i.push([t,e,n,r])>1||s(t,e)}))})}function s(t,e){try{(n=o[t](e)).value instanceof c?Promise.resolve(n.value.v).then(u,l):f(i[0][2],n)}catch(t){f(i[0][3],t)}var n}function u(t){s("next",t)}function l(t){s("throw",t)}function f(t,e){t(e),i.shift(),i.length&&s(i[0][0],i[0][1])}}function f(t){return"function"==typeof t}function h(t){var e=t((function(t){Error.call(t),t.stack=(new Error).stack}));return e.prototype=Object.create(Error.prototype),e.prototype.constructor=e,e}Object.create,Object.create;var d=h((function(t){return function(e){t(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}}));function p(t,e){if(t){var n=t.indexOf(e);0<=n&&t.splice(n,1)}}var v=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._teardowns=null}return t.prototype.unsubscribe=function(){var t,e,n,r,o;if(!this.closed){this.closed=!0;var i=this._parentage;if(i)if(this._parentage=null,Array.isArray(i))try{for(var c=a(i),l=c.next();!l.done;l=c.next())l.value.remove(this)}catch(e){t={error:e}}finally{try{l&&!l.done&&(e=c.return)&&e.call(c)}finally{if(t)throw t.error}}else i.remove(this);var h=this.initialTeardown;if(f(h))try{h()}catch(t){o=t instanceof d?t.errors:[t]}var p=this._teardowns;if(p){this._teardowns=null;try{for(var v=a(p),y=v.next();!y.done;y=v.next()){var m=y.value;try{_(m)}catch(t){o=null!=o?o:[],t instanceof d?o=u(u([],s(o)),s(t.errors)):o.push(t)}}}catch(t){n={error:t}}finally{try{y&&!y.done&&(r=v.return)&&r.call(v)}finally{if(n)throw n.error}}}if(o)throw new d(o)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)_(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._teardowns=null!==(n=this._teardowns)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&p(e,t)},t.prototype.remove=function(e){var n=this._teardowns;n&&p(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=function(){var e=new t;return e.closed=!0,e}(),t}(),y=v.EMPTY;function m(t){return t instanceof v||t&&"closed"in t&&f(t.remove)&&f(t.add)&&f(t.unsubscribe)}function _(t){f(t)?t():t.unsubscribe()}var b={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},g={setTimeout:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=g.delegate;return((null==n?void 0:n.setTimeout)||setTimeout).apply(void 0,u([],s(t)))},clearTimeout:function(t){var e=g.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function w(t){g.setTimeout((function(){var e=b.onUnhandledError;if(!e)throw t;e(t)}))}function E(){}var C=N("C",void 0,void 0);function N(t,e,n){return{kind:t,value:e,error:n}}var S=null;function x(t){if(b.useDeprecatedSynchronousErrorHandling){var e=!S;if(e&&(S={errorThrown:!1,error:null}),t(),e){var n=S,r=n.errorThrown,o=n.error;if(S=null,r)throw o}}else t()}var T=function(t){function e(e){var n=t.call(this)||this;return n.isStopped=!1,e?(n.destination=e,m(e)&&e.add(n)):n.destination=L,n}return o(e,t),e.create=function(t,e,n){return new P(t,e,n)},e.prototype.next=function(t){this.isStopped?j(function(t){return N("N",t,void 0)}(t),this):this._next(t)},e.prototype.error=function(t){this.isStopped?j(N("E",void 0,t),this):(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped?j(C,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(v),O=Function.prototype.bind;function D(t,e){return O.call(t,e)}var A=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var e=this.partialObserver;if(e.next)try{e.next(t)}catch(t){M(t)}},t.prototype.error=function(t){var e=this.partialObserver;if(e.error)try{e.error(t)}catch(t){M(t)}else M(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){M(t)}},t}(),P=function(t){function e(e,n,r){var o,i,a=t.call(this)||this;return f(e)||!e?o={next:null!=e?e:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:a&&b.useDeprecatedNextContext?((i=Object.create(e)).unsubscribe=function(){return a.unsubscribe()},o={next:e.next&&D(e.next,i),error:e.error&&D(e.error,i),complete:e.complete&&D(e.complete,i)}):o=e,a.destination=new A(o),a}return o(e,t),e}(T);function M(t){var e;b.useDeprecatedSynchronousErrorHandling?(e=t,b.useDeprecatedSynchronousErrorHandling&&S&&(S.errorThrown=!0,S.error=e)):w(t)}function j(t,e){var n=b.onStoppedNotification;n&&g.setTimeout((function(){return n(t,e)}))}var L={closed:!0,next:E,error:function(t){throw t},complete:E},k="function"==typeof Symbol&&Symbol.observable||"@@observable";function I(t){return t}function F(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return R(t)}function R(t){return 0===t.length?I:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}var H=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r,o=this,i=(r=t)&&r instanceof T||function(t){return t&&f(t.next)&&f(t.error)&&f(t.complete)}(r)&&m(r)?t:new P(t,e,n);return x((function(){var t=o,e=t.operator,n=t.source;i.add(e?e.call(i,n):n?o._subscribe(i):o._trySubscribe(i))})),i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=U(e))((function(e,r){var o=new P({next:function(e){try{t(e)}catch(t){r(t),o.unsubscribe()}},error:r,complete:e});n.subscribe(o)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[k]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return R(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=U(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function U(t){var e;return null!==(e=null!=t?t:b.Promise)&&void 0!==e?e:Promise}function B(t){return f(null==t?void 0:t.lift)}function W(t){return function(e){if(B(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function q(t,e,n,r,o){return new V(t,e,n,r,o)}var V=function(t){function e(e,n,r,o,i,a){var s=t.call(this,e)||this;return s.onFinalize=i,s.shouldUnsubscribe=a,s._next=n?function(t){try{n(t)}catch(t){e.error(t)}}:t.prototype._next,s._error=o?function(t){try{o(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,s._complete=r?function(){try{r()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,s}return o(e,t),e.prototype.unsubscribe=function(){var e;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;t.prototype.unsubscribe.call(this),!n&&(null===(e=this.onFinalize)||void 0===e||e.call(this))}},e}(T);function G(){return W((function(t,e){var n=null;t._refCount++;var r=q(e,void 0,void 0,void 0,(function(){if(!t||t._refCount<=0||0<--t._refCount)n=null;else{var r=t._connection,o=n;n=null,!r||o&&r!==o||r.unsubscribe(),e.unsubscribe()}}));t.subscribe(r),r.closed||(n=t.connect())}))}var z=function(t){function e(e,n){var r=t.call(this)||this;return r.source=e,r.subjectFactory=n,r._subject=null,r._refCount=0,r._connection=null,B(e)&&(r.lift=e.lift),r}return o(e,t),e.prototype._subscribe=function(t){return this.getSubject().subscribe(t)},e.prototype.getSubject=function(){var t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject},e.prototype._teardown=function(){this._refCount=0;var t=this._connection;this._subject=this._connection=null,null==t||t.unsubscribe()},e.prototype.connect=function(){var t=this,e=this._connection;if(!e){e=this._connection=new v;var n=this.getSubject();e.add(this.source.subscribe(q(n,void 0,(function(){t._teardown(),n.complete()}),(function(e){t._teardown(),n.error(e)}),(function(){return t._teardown()})))),e.closed&&(this._connection=null,e=v.EMPTY)}return e},e.prototype.refCount=function(){return G()(this)},e}(H),K={now:function(){return(K.delegate||performance).now()},delegate:void 0},X={schedule:function(t){var e=requestAnimationFrame,n=cancelAnimationFrame,r=X.delegate;r&&(e=r.requestAnimationFrame,n=r.cancelAnimationFrame);var o=e((function(e){n=void 0,t(e)}));return new v((function(){return null==n?void 0:n(o)}))},requestAnimationFrame:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=X.delegate;return((null==n?void 0:n.requestAnimationFrame)||requestAnimationFrame).apply(void 0,u([],s(t)))},cancelAnimationFrame:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=X.delegate;return((null==n?void 0:n.cancelAnimationFrame)||cancelAnimationFrame).apply(void 0,u([],s(t)))},delegate:void 0};function Y(t){return t?$(t):Z}function $(t){var e=X.schedule;return new H((function(n){var r=new v,o=t||K,i=o.now(),a=function(s){var u=o.now();n.next({timestamp:t?u:s,elapsed:u-i}),n.closed||r.add(e(a))};return r.add(e(a)),r}))}var J,Z=$(),Q=h((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),tt=function(t){function e(){var e=t.call(this)||this;return e.closed=!1,e.observers=[],e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return o(e,t),e.prototype.lift=function(t){var e=new et(this,this);return e.operator=t,e},e.prototype._throwIfClosed=function(){if(this.closed)throw new Q},e.prototype.next=function(t){var e=this;x((function(){var n,r;if(e._throwIfClosed(),!e.isStopped){var o=e.observers.slice();try{for(var i=a(o),s=i.next();!s.done;s=i.next())s.value.next(t)}catch(t){n={error:t}}finally{try{s&&!s.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}}}))},e.prototype.error=function(t){var e=this;x((function(){if(e._throwIfClosed(),!e.isStopped){e.hasError=e.isStopped=!0,e.thrownError=t;for(var n=e.observers;n.length;)n.shift().error(t)}}))},e.prototype.complete=function(){var t=this;x((function(){if(t._throwIfClosed(),!t.isStopped){t.isStopped=!0;for(var e=t.observers;e.length;)e.shift().complete()}}))},e.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=null},Object.defineProperty(e.prototype,"observed",{get:function(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0},enumerable:!1,configurable:!0}),e.prototype._trySubscribe=function(e){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},e.prototype._innerSubscribe=function(t){var e=this,n=e.hasError,r=e.isStopped,o=e.observers;return n||r?y:(o.push(t),new v((function(){return p(o,t)})))},e.prototype._checkFinalizedStatuses=function(t){var e=this,n=e.hasError,r=e.thrownError,o=e.isStopped;n?t.error(r):o&&t.complete()},e.prototype.asObservable=function(){var t=new H;return t.source=this,t},e.create=function(t,e){return new et(t,e)},e}(H),et=function(t){function e(e,n){var r=t.call(this)||this;return r.destination=e,r.source=n,r}return o(e,t),e.prototype.next=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.next)||void 0===n||n.call(e,t)},e.prototype.error=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.error)||void 0===n||n.call(e,t)},e.prototype.complete=function(){var t,e;null===(e=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===e||e.call(t)},e.prototype._subscribe=function(t){var e,n;return null!==(n=null===(e=this.source)||void 0===e?void 0:e.subscribe(t))&&void 0!==n?n:y},e}(tt),nt=function(t){function e(e){var n=t.call(this)||this;return n._value=e,n}return o(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),e.prototype._subscribe=function(e){var n=t.prototype._subscribe.call(this,e);return!n.closed&&e.next(this._value),n},e.prototype.getValue=function(){var t=this,e=t.hasError,n=t.thrownError,r=t._value;if(e)throw n;return this._throwIfClosed(),r},e.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},e}(tt),rt={now:function(){return(rt.delegate||Date).now()},delegate:void 0},ot=function(t){function e(e,n,r){void 0===e&&(e=1/0),void 0===n&&(n=1/0),void 0===r&&(r=rt);var o=t.call(this)||this;return o._bufferSize=e,o._windowTime=n,o._timestampProvider=r,o._buffer=[],o._infiniteTimeWindow=!0,o._infiniteTimeWindow=n===1/0,o._bufferSize=Math.max(1,e),o._windowTime=Math.max(1,n),o}return o(e,t),e.prototype.next=function(e){var n=this,r=n.isStopped,o=n._buffer,i=n._infiniteTimeWindow,a=n._timestampProvider,s=n._windowTime;r||(o.push(e),!i&&o.push(a.now()+s)),this._trimBuffer(),t.prototype.next.call(this,e)},e.prototype._subscribe=function(t){this._throwIfClosed(),this._trimBuffer();for(var e=this._innerSubscribe(t),n=this._infiniteTimeWindow,r=this._buffer.slice(),o=0;o<r.length&&!t.closed;o+=n?1:2)t.next(r[o]);return this._checkFinalizedStatuses(t),e},e.prototype._trimBuffer=function(){var t=this,e=t._bufferSize,n=t._timestampProvider,r=t._buffer,o=t._infiniteTimeWindow,i=(o?1:2)*e;if(e<1/0&&i<r.length&&r.splice(0,r.length-i),!o){for(var a=n.now(),s=0,u=1;u<r.length&&r[u]<=a;u+=2)s=u;s&&r.splice(0,s+1)}},e}(tt),it=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e._value=null,e._hasValue=!1,e._isComplete=!1,e}return o(e,t),e.prototype._checkFinalizedStatuses=function(t){var e=this,n=e.hasError,r=e._hasValue,o=e._value,i=e.thrownError,a=e.isStopped,s=e._isComplete;n?t.error(i):(a||s)&&(r&&t.next(o),t.complete())},e.prototype.next=function(t){this.isStopped||(this._value=t,this._hasValue=!0)},e.prototype.complete=function(){var e=this,n=e._hasValue,r=e._value;e._isComplete||(this._isComplete=!0,n&&t.prototype.next.call(this,r),t.prototype.complete.call(this))},e}(tt),at=function(t){function e(e,n){return t.call(this)||this}return o(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(v),st={setInterval:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=st.delegate;return((null==n?void 0:n.setInterval)||setInterval).apply(void 0,u([],s(t)))},clearInterval:function(t){var e=st.delegate;return((null==e?void 0:e.clearInterval)||clearInterval)(t)},delegate:void 0},ut=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return o(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},e.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),st.setInterval(t.flush.bind(t,this),n)},e.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return e;st.clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var n,r=!1;try{this.work(t)}catch(t){r=!0,n=t||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),n},e.prototype.unsubscribe=function(){if(!this.closed){var e=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,p(r,this),null!=e&&(this.id=this.recycleAsyncId(n,e,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},e}(at),ct=1,lt={};function ft(t){return t in lt&&(delete lt[t],!0)}var ht=function(t){var e=ct++;return lt[e]=!0,J||(J=Promise.resolve()),J.then((function(){return ft(e)&&t()})),e},dt=function(t){ft(t)},pt={setImmediate:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=pt.delegate;return((null==n?void 0:n.setImmediate)||ht).apply(void 0,u([],s(t)))},clearImmediate:function(t){var e=pt.delegate;return((null==e?void 0:e.clearImmediate)||dt)(t)},delegate:void 0},vt=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return o(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e._scheduled||(e._scheduled=pt.setImmediate(e.flush.bind(e,void 0))))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!=r&&r>0||null==r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);e.actions.some((function(t){return t.id===n}))||(pt.clearImmediate(n),e._scheduled=void 0)},e}(ut),yt=function(){function t(e,n){void 0===n&&(n=t.now),this.schedulerActionCtor=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.schedulerActionCtor(this,t).schedule(n,e)},t.now=rt.now,t}(),mt=function(t){function e(e,n){void 0===n&&(n=yt.now);var r=t.call(this,e,n)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return o(e,t),e.prototype.flush=function(t){var e=this.actions;if(this._active)e.push(t);else{var n;this._active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this._active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},e}(yt),_t=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.flush=function(t){this._active=!0;var e=this._scheduled;this._scheduled=void 0;var n,r=this.actions;t=t||r.shift();do{if(n=t.execute(t.state,t.delay))break}while((t=r[0])&&t.id===e&&r.shift());if(this._active=!1,n){for(;(t=r[0])&&t.id===e&&r.shift();)t.unsubscribe();throw n}},e}(mt))(vt),bt=_t,gt=new mt(ut),wt=gt,Et=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return o(e,t),e.prototype.schedule=function(e,n){return void 0===n&&(n=0),n>0?t.prototype.schedule.call(this,e,n):(this.delay=n,this.state=e,this.scheduler.flush(this),this)},e.prototype.execute=function(e,n){return n>0||this.closed?t.prototype.execute.call(this,e,n):this._execute(e,n)},e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!=r&&r>0||null==r&&this.delay>0?t.prototype.requestAsyncId.call(this,e,n,r):e.flush(this)},e}(ut),Ct=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e}(mt))(Et),Nt=Ct,St=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return o(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e._scheduled||(e._scheduled=X.requestAnimationFrame((function(){return e.flush(void 0)}))))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!=r&&r>0||null==r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);e.actions.some((function(t){return t.id===n}))||(X.cancelAnimationFrame(n),e._scheduled=void 0)},e}(ut),xt=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.flush=function(t){this._active=!0;var e=this._scheduled;this._scheduled=void 0;var n,r=this.actions;t=t||r.shift();do{if(n=t.execute(t.state,t.delay))break}while((t=r[0])&&t.id===e&&r.shift());if(this._active=!1,n){for(;(t=r[0])&&t.id===e&&r.shift();)t.unsubscribe();throw n}},e}(mt))(St),Tt=xt,Ot=function(t){function e(e,n){void 0===e&&(e=Dt),void 0===n&&(n=1/0);var r=t.call(this,e,(function(){return r.frame}))||this;return r.maxFrames=n,r.frame=0,r.index=-1,r}return o(e,t),e.prototype.flush=function(){for(var t,e,n=this.actions,r=this.maxFrames;(e=n[0])&&e.delay<=r&&(n.shift(),this.frame=e.delay,!(t=e.execute(e.state,e.delay))););if(t){for(;e=n.shift();)e.unsubscribe();throw t}},e.frameTimeFactor=10,e}(mt),Dt=function(t){function e(e,n,r){void 0===r&&(r=e.index+=1);var o=t.call(this,e,n)||this;return o.scheduler=e,o.work=n,o.index=r,o.active=!0,o.index=e.index=r,o}return o(e,t),e.prototype.schedule=function(n,r){if(void 0===r&&(r=0),Number.isFinite(r)){if(!this.id)return t.prototype.schedule.call(this,n,r);this.active=!1;var o=new e(this.scheduler,this.work);return this.add(o),o.schedule(n,r)}return v.EMPTY},e.prototype.requestAsyncId=function(t,n,r){void 0===r&&(r=0),this.delay=t.frame+r;var o=t.actions;return o.push(this),o.sort(e.sortActions),!0},e.prototype.recycleAsyncId=function(t,e,n){void 0===n&&(n=0)},e.prototype._execute=function(e,n){if(!0===this.active)return t.prototype._execute.call(this,e,n)},e.sortActions=function(t,e){return t.delay===e.delay?t.index===e.index?0:t.index>e.index?1:-1:t.delay>e.delay?1:-1},e}(ut),At=new H((function(t){return t.complete()}));function Pt(t){return t?function(t){return new H((function(e){return t.schedule((function(){return e.complete()}))}))}(t):At}function Mt(t){return t&&f(t.schedule)}function jt(t){return t[t.length-1]}function Lt(t){return f(jt(t))?t.pop():void 0}function kt(t){return Mt(jt(t))?t.pop():void 0}function It(t,e){return"number"==typeof jt(t)?t.pop():e}var Ft=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function Rt(t){return f(null==t?void 0:t.then)}function Ht(t){return f(t[k])}function Ut(t){return Symbol.asyncIterator&&f(null==t?void 0:t[Symbol.asyncIterator])}function Bt(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var Wt,qt="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function Vt(t){return f(null==t?void 0:t[qt])}function Gt(t){return l(this,arguments,(function(){var e,n,r;return i(this,(function(o){switch(o.label){case 0:e=t.getReader(),o.label=1;case 1:o.trys.push([1,,9,10]),o.label=2;case 2:return[4,c(e.read())];case 3:return n=o.sent(),r=n.value,n.done?[4,c(void 0)]:[3,5];case 4:return[2,o.sent()];case 5:return[4,c(r)];case 6:return[4,o.sent()];case 7:return o.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function zt(t){return f(null==t?void 0:t.getReader)}function Kt(t){if(t instanceof H)return t;if(null!=t){if(Ht(t))return o=t,new H((function(t){var e=o[k]();if(f(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(Ft(t))return r=t,new H((function(t){for(var e=0;e<r.length&&!t.closed;e++)t.next(r[e]);t.complete()}));if(Rt(t))return n=t,new H((function(t){n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,w)}));if(Ut(t))return Xt(t);if(Vt(t))return e=t,new H((function(t){var n,r;try{for(var o=a(e),i=o.next();!i.done;i=o.next()){var s=i.value;if(t.next(s),t.closed)return}}catch(t){n={error:t}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}t.complete()}));if(zt(t))return Xt(Gt(t))}var e,n,r,o;throw Bt(t)}function Xt(t){return new H((function(e){(function(t,e){var n,r,o,s,u,c,l,f;return u=this,c=void 0,f=function(){var u,c;return i(this,(function(i){switch(i.label){case 0:i.trys.push([0,5,6,11]),n=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=a(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,o){!function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)}(r,o,(e=t[n](e)).done,e.value)}))}}}(t),i.label=1;case 1:return[4,n.next()];case 2:if((r=i.sent()).done)return[3,4];if(u=r.value,e.next(u),e.closed)return[2];i.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return c=i.sent(),o={error:c},[3,11];case 6:return i.trys.push([6,,9,10]),r&&!r.done&&(s=n.return)?[4,s.call(n)]:[3,8];case 7:i.sent(),i.label=8;case 8:return[3,10];case 9:if(o)throw o.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,e){function n(t){try{o(f.next(t))}catch(t){e(t)}}function r(t){try{o(f.throw(t))}catch(t){e(t)}}function o(e){var o;e.done?t(e.value):(o=e.value,o instanceof l?o:new l((function(t){t(o)}))).then(n,r)}o((f=f.apply(u,c||[])).next())}))})(t,e).catch((function(t){return e.error(t)}))}))}function Yt(t,e,n,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var i=e.schedule((function(){n(),o?t.add(this.schedule(null,r)):this.unsubscribe()}),r);if(t.add(i),!o)return i}function $t(t,e){return void 0===e&&(e=0),W((function(n,r){n.subscribe(q(r,(function(n){return Yt(r,t,(function(){return r.next(n)}),e)}),(function(){return Yt(r,t,(function(){return r.complete()}),e)}),(function(n){return Yt(r,t,(function(){return r.error(n)}),e)})))}))}function Jt(t,e){return void 0===e&&(e=0),W((function(n,r){r.add(t.schedule((function(){return n.subscribe(r)}),e))}))}function Zt(t,e){return new H((function(n){var r;return Yt(n,e,(function(){r=t[qt](),Yt(n,e,(function(){var t,e,o;try{e=(t=r.next()).value,o=t.done}catch(t){return void n.error(t)}o?n.complete():n.next(e)}),0,!0)})),function(){return f(null==r?void 0:r.return)&&r.return()}}))}function Qt(t,e){if(!t)throw new Error("Iterable cannot be null");return new H((function(n){Yt(n,e,(function(){var r=t[Symbol.asyncIterator]();Yt(n,e,(function(){r.next().then((function(t){t.done?n.complete():n.next(t.value)}))}),0,!0)}))}))}function te(t,e){if(null!=t){if(Ht(t))return function(t,e){return Kt(t).pipe(Jt(e),$t(e))}(t,e);if(Ft(t))return function(t,e){return new H((function(n){var r=0;return e.schedule((function(){r===t.length?n.complete():(n.next(t[r++]),n.closed||this.schedule())}))}))}(t,e);if(Rt(t))return function(t,e){return Kt(t).pipe(Jt(e),$t(e))}(t,e);if(Ut(t))return Qt(t,e);if(Vt(t))return Zt(t,e);if(zt(t))return function(t,e){return Qt(Gt(t),e)}(t,e)}throw Bt(t)}function ee(t,e){return e?te(t,e):Kt(t)}function ne(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=kt(t);return ee(t,n)}function re(t,e){var n=f(t)?t:function(){return t},r=function(t){return t.error(n())};return new H(e?function(t){return e.schedule(r,0,t)}:r)}!function(t){t.NEXT="N",t.ERROR="E",t.COMPLETE="C"}(Wt||(Wt={}));var oe=function(){function t(t,e,n){this.kind=t,this.value=e,this.error=n,this.hasValue="N"===t}return t.prototype.observe=function(t){return ie(this,t)},t.prototype.do=function(t,e,n){var r=this,o=r.kind,i=r.value,a=r.error;return"N"===o?null==t?void 0:t(i):"E"===o?null==e?void 0:e(a):null==n?void 0:n()},t.prototype.accept=function(t,e,n){var r;return f(null===(r=t)||void 0===r?void 0:r.next)?this.observe(t):this.do(t,e,n)},t.prototype.toObservable=function(){var t=this,e=t.kind,n=t.value,r=t.error,o="N"===e?ne(n):"E"===e?re((function(){return r})):"C"===e?At:0;if(!o)throw new TypeError("Unexpected notification kind "+e);return o},t.createNext=function(e){return new t("N",e)},t.createError=function(e){return new t("E",void 0,e)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t}();function ie(t,e){var n,r,o,i=t,a=i.kind,s=i.value,u=i.error;if("string"!=typeof a)throw new TypeError('Invalid notification, missing "kind"');"N"===a?null===(n=e.next)||void 0===n||n.call(e,s):"E"===a?null===(r=e.error)||void 0===r||r.call(e,u):null===(o=e.complete)||void 0===o||o.call(e)}function ae(t){return!!t&&(t instanceof H||f(t.lift)&&f(t.subscribe))}var se=h((function(t){return function(){t(this),this.name="EmptyError",this.message="no elements in sequence"}}));function ue(t,e){var n="object"==typeof e;return new Promise((function(r,o){var i,a=!1;t.subscribe({next:function(t){i=t,a=!0},error:o,complete:function(){a?r(i):n?r(e.defaultValue):o(new se)}})}))}function ce(t,e){var n="object"==typeof e;return new Promise((function(r,o){var i=new P({next:function(t){r(t),i.unsubscribe()},error:o,complete:function(){n?r(e.defaultValue):o(new se)}});t.subscribe(i)}))}var le=h((function(t){return function(){t(this),this.name="ArgumentOutOfRangeError",this.message="argument out of range"}})),fe=h((function(t){return function(e){t(this),this.name="NotFoundError",this.message=e}})),he=h((function(t){return function(e){t(this),this.name="SequenceError",this.message=e}}));function de(t){return t instanceof Date&&!isNaN(t)}var pe=h((function(t){return function(e){void 0===e&&(e=null),t(this),this.message="Timeout has occurred",this.name="TimeoutError",this.info=e}}));function ve(t,e){var n=de(t)?{first:t}:"number"==typeof t?{each:t}:t,r=n.first,o=n.each,i=n.with,a=void 0===i?ye:i,s=n.scheduler,u=void 0===s?null!=e?e:gt:s,c=n.meta,l=void 0===c?null:c;if(null==r&&null==o)throw new TypeError("No timeout provided.");return W((function(t,e){var n,i,s=null,c=0,f=function(t){i=Yt(e,u,(function(){try{n.unsubscribe(),Kt(a({meta:l,lastValue:s,seen:c})).subscribe(e)}catch(t){e.error(t)}}),t)};n=t.subscribe(q(e,(function(t){null==i||i.unsubscribe(),c++,e.next(s=t),o>0&&f(o)}),void 0,void 0,(function(){(null==i?void 0:i.closed)||null==i||i.unsubscribe(),s=null}))),f(null!=r?"number"==typeof r?r:+r-u.now():o)}))}function ye(t){throw new pe(t)}function me(t,e){return W((function(n,r){var o=0;n.subscribe(q(r,(function(n){r.next(t.call(e,n,o++))})))}))}var _e=Array.isArray;function be(t){return me((function(e){return function(t,e){return _e(e)?t.apply(void 0,u([],s(e))):t(e)}(t,e)}))}function ge(t,e,n,r){if(n){if(!Mt(n))return function(){for(var o=[],i=0;i<arguments.length;i++)o[i]=arguments[i];return ge(t,e,r).apply(this,o).pipe(be(n))};r=n}return r?function(){for(var n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];return ge(t,e).apply(this,n).pipe(Jt(r),$t(r))}:function(){for(var n=this,r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];var i=new it,a=!0;return new H((function(o){var c=i.subscribe(o);if(a){a=!1;var l=!1,f=!1;e.apply(n,u(u([],s(r)),[function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];if(t){var r=e.shift();if(null!=r)return void i.error(r)}i.next(1<e.length?e:e[0]),f=!0,l&&i.complete()}])),f&&i.complete(),l=!0}return c}))}}function we(t,e,n){return ge(!1,t,e,n)}function Ee(t,e,n){return ge(!0,t,e,n)}var Ce=Array.isArray,Ne=Object.getPrototypeOf,Se=Object.prototype,xe=Object.keys;function Te(t){if(1===t.length){var e=t[0];if(Ce(e))return{args:e,keys:null};if((r=e)&&"object"==typeof r&&Ne(r)===Se){var n=xe(e);return{args:n.map((function(t){return e[t]})),keys:n}}}var r;return{args:t,keys:null}}function Oe(t,e){return t.reduce((function(t,n,r){return t[n]=e[r],t}),{})}function De(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=kt(t),r=Lt(t),o=Te(t),i=o.args,a=o.keys;if(0===i.length)return ee([],n);var s=new H(Ae(i,n,a?function(t){return Oe(a,t)}:I));return r?s.pipe(be(r)):s}function Ae(t,e,n){return void 0===n&&(n=I),function(r){Pe(e,(function(){for(var o=t.length,i=new Array(o),a=o,s=o,u=function(o){Pe(e,(function(){var u=ee(t[o],e),c=!1;u.subscribe(q(r,(function(t){i[o]=t,c||(c=!0,s--),s||r.next(n(i.slice()))}),(function(){--a||r.complete()})))}),r)},c=0;c<o;c++)u(c)}),r)}}function Pe(t,e,n){t?Yt(n,t,e):e()}function Me(t,e,n,r,o,i,a,s){var u=[],c=0,l=0,f=!1,h=function(){!f||u.length||c||e.complete()},d=function(t){return c<r?p(t):u.push(t)},p=function(t){i&&e.next(t),c++;var s=!1;Kt(n(t,l++)).subscribe(q(e,(function(t){null==o||o(t),i?d(t):e.next(t)}),(function(){s=!0}),void 0,(function(){if(s)try{c--;for(var t=function(){var t=u.shift();a?Yt(e,a,(function(){return p(t)})):p(t)};u.length&&c<r;)t();h()}catch(t){e.error(t)}})))};return t.subscribe(q(e,d,(function(){f=!0,h()}))),function(){null==s||s()}}function je(t,e,n){return void 0===n&&(n=1/0),f(e)?je((function(n,r){return me((function(t,o){return e(n,t,r,o)}))(Kt(t(n,r)))}),n):("number"==typeof e&&(n=e),W((function(e,r){return Me(e,r,t,n)})))}function Le(t){return void 0===t&&(t=1/0),je(I,t)}function ke(){return Le(1)}function Ie(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return ke()(ee(t,kt(t)))}function Fe(t){return new H((function(e){Kt(t()).subscribe(e)}))}var Re={connector:function(){return new tt},resetOnDisconnect:!0};function He(t,e){void 0===e&&(e=Re);var n=null,r=e.connector,o=e.resetOnDisconnect,i=void 0===o||o,a=r(),s=new H((function(t){return a.subscribe(t)}));return s.connect=function(){return n&&!n.closed||(n=Fe((function(){return t})).subscribe(a),i&&n.add((function(){return a=r()}))),n},s}function Ue(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Lt(t),r=Te(t),o=r.args,i=r.keys,a=new H((function(t){var e=o.length;if(e)for(var n=new Array(e),r=e,a=e,s=function(e){var s=!1;Kt(o[e]).subscribe(q(t,(function(t){s||(s=!0,a--),n[e]=t}),(function(){return r--}),void 0,(function(){r&&s||(a||t.next(i?Oe(i,n):n),t.complete())})))},u=0;u<e;u++)s(u);else t.complete()}));return n?a.pipe(be(n)):a}var Be=["addListener","removeListener"],We=["addEventListener","removeEventListener"],qe=["on","off"];function Ve(t,e,n,r){if(f(n)&&(r=n,n=void 0),r)return Ve(t,e,n).pipe(be(r));var o=s(function(t){return f(t.addEventListener)&&f(t.removeEventListener)}(t)?We.map((function(r){return function(o){return t[r](e,o,n)}})):function(t){return f(t.addListener)&&f(t.removeListener)}(t)?Be.map(Ge(t,e)):function(t){return f(t.on)&&f(t.off)}(t)?qe.map(Ge(t,e)):[],2),i=o[0],a=o[1];if(!i&&Ft(t))return je((function(t){return Ve(t,e,n)}))(Kt(t));if(!i)throw new TypeError("Invalid event target");return new H((function(t){var e=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.next(1<e.length?e:e[0])};return i(e),function(){return a(e)}}))}function Ge(t,e){return function(n){return function(r){return t[n](e,r)}}}function ze(t,e,n){return n?ze(t,e).pipe(be(n)):new H((function(n){var r=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return n.next(1===t.length?t[0]:t)},o=t(r);return f(e)?function(){return e(r,o)}:void 0}))}function Ke(t,e,n,r,o){var a,s,u,c;function l(){var t;return i(this,(function(r){switch(r.label){case 0:t=c,r.label=1;case 1:return e&&!e(t)?[3,4]:[4,u(t)];case 2:r.sent(),r.label=3;case 3:return t=n(t),[3,1];case 4:return[2]}}))}return 1===arguments.length?(c=(a=t).initialState,e=a.condition,n=a.iterate,s=a.resultSelector,u=void 0===s?I:s,o=a.scheduler):(c=t,!r||Mt(r)?(u=I,o=r):u=r),Fe(o?function(){return Zt(l(),o)}:l)}function Xe(t,e,n){return Fe((function(){return t()?e:n}))}function Ye(t,e,n){void 0===t&&(t=0),void 0===n&&(n=wt);var r=-1;return null!=e&&(Mt(e)?n=e:r=e),new H((function(e){var o=de(t)?+t-n.now():t;o<0&&(o=0);var i=0;return n.schedule((function(){e.closed||(e.next(i++),0<=r?this.schedule(void 0,r):e.complete())}),o)}))}function $e(t,e){return void 0===t&&(t=0),void 0===e&&(e=gt),t<0&&(t=0),Ye(t,t,e)}function Je(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=kt(t),r=It(t,1/0),o=t;return o.length?1===o.length?Kt(o[0]):Le(r)(ee(o,n)):At}var Ze=new H(E);function Qe(){return Ze}var tn=Array.isArray;function en(t){return 1===t.length&&tn(t[0])?t[0]:t}function nn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=en(t);return W((function(t,e){var r=u([t],s(n)),o=function(){if(!e.closed)if(r.length>0){var t=void 0;try{t=Kt(r.shift())}catch(t){return void o()}var n=q(e,void 0,E,E);t.subscribe(n),n.add(o)}else e.complete()};o()}))}function rn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return nn(en(t))(At)}function on(t,e){return ee(Object.entries(t),e)}function an(t,e){return function(n,r){return!t.call(e,n,r)}}function sn(t,e){return W((function(n,r){var o=0;n.subscribe(q(r,(function(n){return t.call(e,n,o++)&&r.next(n)})))}))}function un(t,e,n){return[sn(e,n)(Kt(t)),sn(an(e,n))(Kt(t))]}function cn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 1===(t=en(t)).length?Kt(t[0]):new H(ln(t))}function ln(t){return function(e){for(var n=[],r=function(r){n.push(Kt(t[r]).subscribe(q(e,(function(t){if(n){for(var o=0;o<n.length;o++)o!==r&&n[o].unsubscribe();n=null}e.next(t)}))))},o=0;n&&!e.closed&&o<t.length;o++)r(o)}}function fn(t,e,n){if(null==e&&(e=t,t=0),e<=0)return At;var r=e+t;return new H(n?function(e){var o=t;return n.schedule((function(){o<r?(e.next(o++),this.schedule()):e.complete()}))}:function(e){for(var n=t;n<r&&!e.closed;)e.next(n++);e.complete()})}function hn(t,e){return new H((function(n){var r=t(),o=e(r);return(o?Kt(o):At).subscribe(n),function(){r&&r.unsubscribe()}}))}function dn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Lt(t),r=en(t);return r.length?new H((function(t){var e=r.map((function(){return[]})),o=r.map((function(){return!1}));t.add((function(){e=o=null}));for(var i=function(i){Kt(r[i]).subscribe(q(t,(function(r){if(e[i].push(r),e.every((function(t){return t.length}))){var a=e.map((function(t){return t.shift()}));t.next(n?n.apply(void 0,u([],s(a))):a),e.some((function(t,e){return!t.length&&o[e]}))&&t.complete()}}),(function(){o[i]=!0,!e[i].length&&t.complete()})))},a=0;!t.closed&&a<r.length;a++)i(a);return function(){e=o=null}})):At}function pn(t){return W((function(e,n){var r=!1,o=null,i=null,a=!1,s=function(){if(null==i||i.unsubscribe(),i=null,r){r=!1;var t=o;o=null,n.next(t)}a&&n.complete()},u=function(){i=null,a&&n.complete()};e.subscribe(q(n,(function(e){r=!0,o=e,i||Kt(t(e)).subscribe(i=q(n,s,u))}),(function(){a=!0,(!r||!i||i.closed)&&n.complete()})))}))}function vn(t,e){return void 0===e&&(e=gt),pn((function(){return Ye(t,e)}))}function yn(t){return W((function(e,n){var r=[];return e.subscribe(q(n,(function(t){return r.push(t)}),(function(){n.next(r),n.complete()}))),t.subscribe(q(n,(function(){var t=r;r=[],n.next(t)}),E)),function(){r=null}}))}function mn(t,e){return void 0===e&&(e=null),e=null!=e?e:t,W((function(n,r){var o=[],i=0;n.subscribe(q(r,(function(n){var s,u,c,l,f=null;i++%e==0&&o.push([]);try{for(var h=a(o),d=h.next();!d.done;d=h.next())(m=d.value).push(n),t<=m.length&&(f=null!=f?f:[]).push(m)}catch(t){s={error:t}}finally{try{d&&!d.done&&(u=h.return)&&u.call(h)}finally{if(s)throw s.error}}if(f)try{for(var v=a(f),y=v.next();!y.done;y=v.next()){var m=y.value;p(o,m),r.next(m)}}catch(t){c={error:t}}finally{try{y&&!y.done&&(l=v.return)&&l.call(v)}finally{if(c)throw c.error}}}),(function(){var t,e;try{for(var n=a(o),i=n.next();!i.done;i=n.next()){var s=i.value;r.next(s)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(e=n.return)&&e.call(n)}finally{if(t)throw t.error}}r.complete()}),void 0,(function(){o=null})))}))}function _n(t){for(var e,n,r=[],o=1;o<arguments.length;o++)r[o-1]=arguments[o];var i=null!==(e=kt(r))&&void 0!==e?e:gt,s=null!==(n=r[0])&&void 0!==n?n:null,u=r[1]||1/0;return W((function(e,n){var r=[],o=!1,c=function(t){var e=t.buffer;t.subs.unsubscribe(),p(r,t),n.next(e),o&&l()},l=function(){if(r){var e=new v;n.add(e);var o={buffer:[],subs:e};r.push(o),Yt(e,i,(function(){return c(o)}),t)}};null!==s&&s>=0?Yt(n,i,l,s,!0):o=!0,l();var f=q(n,(function(t){var e,n,o=r.slice();try{for(var i=a(o),s=i.next();!s.done;s=i.next()){var l=s.value,f=l.buffer;f.push(t),u<=f.length&&c(l)}}catch(t){e={error:t}}finally{try{s&&!s.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}}),(function(){for(;null==r?void 0:r.length;)n.next(r.shift().buffer);null==f||f.unsubscribe(),n.complete(),n.unsubscribe()}),void 0,(function(){return r=null}));e.subscribe(f)}))}function bn(t,e){return W((function(n,r){var o=[];Kt(t).subscribe(q(r,(function(t){var n=[];o.push(n);var i=new v;i.add(Kt(e(t)).subscribe(q(r,(function(){p(o,n),r.next(n),i.unsubscribe()}),E)))}),E)),n.subscribe(q(r,(function(t){var e,n;try{for(var r=a(o),i=r.next();!i.done;i=r.next())i.value.push(t)}catch(t){e={error:t}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}}),(function(){for(;o.length>0;)r.next(o.shift());r.complete()})))}))}function gn(t){return W((function(e,n){var r=null,o=null,i=function(){null==o||o.unsubscribe();var e=r;r=[],e&&n.next(e),Kt(t()).subscribe(o=q(n,i,E))};i(),e.subscribe(q(n,(function(t){return null==r?void 0:r.push(t)}),(function(){r&&n.next(r),n.complete()}),void 0,(function(){return r=o=null})))}))}function wn(t){return W((function(e,n){var r,o=null,i=!1;o=e.subscribe(q(n,void 0,void 0,(function(a){r=Kt(t(a,wn(t)(e))),o?(o.unsubscribe(),o=null,r.subscribe(n)):i=!0}))),i&&(o.unsubscribe(),o=null,r.subscribe(n))}))}function En(t,e,n,r,o){return function(i,a){var s=n,u=e,c=0;i.subscribe(q(a,(function(e){var n=c++;u=s?t(u,e,n):(s=!0,e),r&&a.next(u)}),o&&function(){s&&a.next(u),a.complete()}))}}function Cn(t,e){return W(En(t,e,arguments.length>=2,!1,!0))}var Nn=function(t,e){return t.push(e),t};function Sn(){return W((function(t,e){Cn(Nn,[])(t).subscribe(e)}))}function xn(t,e){return F(Sn(),je((function(e){return t(e)})),e?be(e):I)}function Tn(t){return xn(De,t)}var On=Tn;function Dn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Lt(t);return n?F(Dn.apply(void 0,u([],s(t))),be(n)):W((function(e,n){Ae(u([e],s(en(t))))(n)}))}function An(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return Dn.apply(void 0,u([],s(t)))}function Pn(t,e){return f(e)?je(t,e,1):je(t,1)}function Mn(t,e){return f(e)?Pn((function(){return t}),e):Pn((function(){return t}))}function jn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=kt(t);return W((function(e,r){ke()(ee(u([e],s(t)),n)).subscribe(r)}))}function Ln(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return jn.apply(void 0,u([],s(t)))}var kn={connector:function(){return new tt}};function In(t,e){void 0===e&&(e=kn);var n=e.connector;return W((function(e,r){var o,i=n();ee(t((o=i,new H((function(t){return o.subscribe(t)}))))).subscribe(r),r.add(e.subscribe(i))}))}function Fn(t){return Cn((function(e,n,r){return!t||t(n,r)?e+1:e}),0)}function Rn(t){return W((function(e,n){var r=!1,o=null,i=null,a=function(){if(null==i||i.unsubscribe(),i=null,r){r=!1;var t=o;o=null,n.next(t)}};e.subscribe(q(n,(function(e){null==i||i.unsubscribe(),r=!0,o=e,i=q(n,a,E),Kt(t(e)).subscribe(i)}),(function(){a(),n.complete()}),void 0,(function(){o=i=null})))}))}function Hn(t,e){return void 0===e&&(e=gt),W((function(n,r){var o=null,i=null,a=null,s=function(){if(o){o.unsubscribe(),o=null;var t=i;i=null,r.next(t)}};function u(){var n=a+t,i=e.now();if(i<n)return o=this.schedule(void 0,n-i),void r.add(o);s()}n.subscribe(q(r,(function(n){i=n,a=e.now(),o||(o=e.schedule(u,t),r.add(o))}),(function(){s(),r.complete()}),void 0,(function(){i=o=null})))}))}function Un(t){return W((function(e,n){var r=!1;e.subscribe(q(n,(function(t){r=!0,n.next(t)}),(function(){r||n.next(t),n.complete()})))}))}function Bn(t){return t<=0?function(){return At}:W((function(e,n){var r=0;e.subscribe(q(n,(function(e){++r<=t&&(n.next(e),t<=r&&n.complete())})))}))}function Wn(){return W((function(t,e){t.subscribe(q(e,E))}))}function qn(t){return me((function(){return t}))}function Vn(t,e){return e?function(n){return Ie(e.pipe(Bn(1),Wn()),n.pipe(Vn(t)))}:je((function(e,n){return t(e,n).pipe(Bn(1),qn(e))}))}function Gn(t,e){void 0===e&&(e=gt);var n=Ye(t,e);return Vn((function(){return n}))}function zn(){return W((function(t,e){t.subscribe(q(e,(function(t){return ie(t,e)})))}))}function Kn(t,e){return W((function(n,r){var o=new Set;n.subscribe(q(r,(function(e){var n=t?t(e):e;o.has(n)||(o.add(n),r.next(e))}))),null==e||e.subscribe(q(r,(function(){return o.clear()}),E))}))}function Xn(t,e){return void 0===e&&(e=I),t=null!=t?t:Yn,W((function(n,r){var o,i=!0;n.subscribe(q(r,(function(n){var a=e(n);!i&&t(o,a)||(i=!1,o=a,r.next(n))})))}))}function Yn(t,e){return t===e}function $n(t,e){return Xn((function(n,r){return e?e(n[t],r[t]):n[t]===r[t]}))}function Jn(t){return void 0===t&&(t=Zn),W((function(e,n){var r=!1;e.subscribe(q(n,(function(t){r=!0,n.next(t)}),(function(){return r?n.complete():n.error(t())})))}))}function Zn(){return new se}function Qn(t,e){if(t<0)throw new le;var n=arguments.length>=2;return function(r){return r.pipe(sn((function(e,n){return n===t})),Bn(1),n?Un(e):Jn((function(){return new le})))}}function tr(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return Ie(e,ne.apply(void 0,u([],s(t))))}}function er(t,e){return W((function(n,r){var o=0;n.subscribe(q(r,(function(i){t.call(e,i,o++,n)||(r.next(!1),r.complete())}),(function(){r.next(!0),r.complete()})))}))}function nr(){return W((function(t,e){var n=!1,r=null;t.subscribe(q(e,(function(t){r||(r=Kt(t).subscribe(q(e,void 0,(function(){r=null,n&&e.complete()}))))}),(function(){n=!0,!r&&e.complete()})))}))}var rr=nr;function or(t,e){return e?function(n){return n.pipe(or((function(n,r){return Kt(t(n,r)).pipe(me((function(t,o){return e(n,t,r,o)})))})))}:W((function(e,n){var r=0,o=null,i=!1;e.subscribe(q(n,(function(e){o||(o=q(n,void 0,(function(){o=null,i&&n.complete()})),Kt(t(e,r++)).subscribe(o))}),(function(){i=!0,!o&&n.complete()})))}))}function ir(t,e,n){return void 0===e&&(e=1/0),e=(e||0)<1?1/0:e,W((function(r,o){return Me(r,o,t,e,void 0,!0,n)}))}function ar(t){return W((function(e,n){try{e.subscribe(n)}finally{n.add(t)}}))}function sr(t,e){return W(ur(t,e,"value"))}function ur(t,e,n){var r="index"===n;return function(n,o){var i=0;n.subscribe(q(o,(function(a){var s=i++;t.call(e,a,s,n)&&(o.next(r?s:a),o.complete())}),(function(){o.next(r?-1:void 0),o.complete()})))}}function cr(t,e){return W(ur(t,e,"index"))}function lr(t,e){var n=arguments.length>=2;return function(r){return r.pipe(t?sn((function(e,n){return t(e,n,r)})):I,Bn(1),n?Un(e):Jn((function(){return new se})))}}function fr(t,e,n,r){return W((function(o,i){var a;e&&"function"!=typeof e?(n=e.duration,a=e.element,r=e.connector):a=e;var s=new Map,u=function(t){s.forEach(t),t(i)},c=function(t){return u((function(e){return e.error(t)}))},l=0,f=!1,h=new V(i,(function(e){try{var o=t(e),u=s.get(o);if(!u){s.set(o,u=r?r():new tt);var d=(v=o,y=u,(m=new H((function(t){l++;var e=y.subscribe(t);return function(){e.unsubscribe(),0==--l&&f&&h.unsubscribe()}}))).key=v,m);if(i.next(d),n){var p=q(u,(function(){u.complete(),null==p||p.unsubscribe()}),void 0,void 0,(function(){return s.delete(o)}));h.add(Kt(n(d)).subscribe(p))}}u.next(a?a(e):e)}catch(t){c(t)}var v,y,m}),(function(){return u((function(t){return t.complete()}))}),c,(function(){return s.clear()}),(function(){return f=!0,0===l}));o.subscribe(h)}))}function hr(){return W((function(t,e){t.subscribe(q(e,(function(){e.next(!1),e.complete()}),(function(){e.next(!0),e.complete()})))}))}function dr(t){return t<=0?function(){return At}:W((function(e,n){var r=[];e.subscribe(q(n,(function(e){r.push(e),t<r.length&&r.shift()}),(function(){var t,e;try{for(var o=a(r),i=o.next();!i.done;i=o.next()){var s=i.value;n.next(s)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(e=o.return)&&e.call(o)}finally{if(t)throw t.error}}n.complete()}),void 0,(function(){r=null})))}))}function pr(t,e){var n=arguments.length>=2;return function(r){return r.pipe(t?sn((function(e,n){return t(e,n,r)})):I,dr(1),n?Un(e):Jn((function(){return new se})))}}function vr(){return W((function(t,e){t.subscribe(q(e,(function(t){e.next(oe.createNext(t))}),(function(){e.next(oe.createComplete()),e.complete()}),(function(t){e.next(oe.createError(t)),e.complete()})))}))}function yr(t){return Cn(f(t)?function(e,n){return t(e,n)>0?e:n}:function(t,e){return t>e?t:e})}var mr=je;function _r(t,e,n){return void 0===n&&(n=1/0),f(e)?je((function(){return t}),e,n):("number"==typeof e&&(n=e),je((function(){return t}),n))}function br(t,e,n){return void 0===n&&(n=1/0),W((function(r,o){var i=e;return Me(r,o,(function(e,n){return t(i,e,n)}),n,(function(t){i=t}),!1,void 0,(function(){return i=null}))}))}function gr(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=kt(t),r=It(t,1/0);return t=en(t),W((function(e,o){Le(r)(ee(u([e],s(t)),n)).subscribe(o)}))}function wr(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return gr.apply(void 0,u([],s(t)))}function Er(t){return Cn(f(t)?function(e,n){return t(e,n)<0?e:n}:function(t,e){return t<e?t:e})}function Cr(t,e){var n=f(t)?t:function(){return t};return f(e)?In(e,{connector:n}):function(t){return new z(t,n)}}function Nr(){return W((function(t,e){var n,r=!1;t.subscribe(q(e,(function(t){var o=n;n=t,r&&e.next([o,t]),r=!0})))}))}function Sr(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t.length;if(0===n)throw new Error("list of properties cannot be empty.");return me((function(e){for(var r=e,o=0;o<n;o++){var i=null==r?void 0:r[t[o]];if(void 0===i)return;r=i}return r}))}function xr(t){return t?function(e){return In(t)(e)}:function(t){return Cr(new tt)(t)}}function Tr(t){return function(e){var n=new nt(t);return new z(e,(function(){return n}))}}function Or(){return function(t){var e=new it;return new z(t,(function(){return e}))}}function Dr(t,e,n,r){n&&!f(n)&&(r=n);var o=f(n)?n:void 0;return function(n){return Cr(new ot(t,e,r),o)(n)}}function Ar(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return t.length?W((function(e,n){ln(u([e],s(t)))(n)})):I}function Pr(t){var e,n,r=1/0;return null!=t&&("object"==typeof t?(e=t.count,r=void 0===e?1/0:e,n=t.delay):r=t),r<=0?function(){return At}:W((function(t,e){var o,i=0,a=function(){if(null==o||o.unsubscribe(),o=null,null!=n){var t="number"==typeof n?Ye(n):Kt(n(i)),r=q(e,(function(){r.unsubscribe(),s()}));t.subscribe(r)}else s()},s=function(){var n=!1;o=t.subscribe(q(e,void 0,(function(){++i<r?o?a():n=!0:e.complete()}))),n&&a()};s()}))}function Mr(t){return W((function(e,n){var r,o,i=!1,a=!1,s=!1,u=function(){return s&&a&&(n.complete(),!0)},c=function(){s=!1,r=e.subscribe(q(n,void 0,(function(){s=!0,!u()&&(o||(o=new tt,t(o).subscribe(q(n,(function(){r?c():i=!0}),(function(){a=!0,u()})))),o).next()}))),i&&(r.unsubscribe(),r=null,i=!1,c())};c()}))}function jr(t){var e;void 0===t&&(t=1/0);var n=(e=t&&"object"==typeof t?t:{count:t}).count,r=void 0===n?1/0:n,o=e.delay,i=e.resetOnSuccess,a=void 0!==i&&i;return r<=0?I:W((function(t,e){var n,i=0,s=function(){var u=!1;n=t.subscribe(q(e,(function(t){a&&(i=0),e.next(t)}),void 0,(function(t){if(i++<r){var a=function(){n?(n.unsubscribe(),n=null,s()):u=!0};if(null!=o){var c="number"==typeof o?Ye(o):Kt(o(t,i)),l=q(e,(function(){l.unsubscribe(),a()}),(function(){e.complete()}));c.subscribe(l)}else a()}else e.error(t)}))),u&&(n.unsubscribe(),n=null,s())};s()}))}function Lr(t){return W((function(e,n){var r,o,i=!1,a=function(){r=e.subscribe(q(n,void 0,void 0,(function(e){o||(o=new tt,t(o).subscribe(q(n,(function(){return r?a():i=!0})))),o&&o.next(e)}))),i&&(r.unsubscribe(),r=null,i=!1,a())};a()}))}function kr(t){return W((function(e,n){var r=!1,o=null;e.subscribe(q(n,(function(t){r=!0,o=t}))),t.subscribe(q(n,(function(){if(r){r=!1;var t=o;o=null,n.next(t)}}),E))}))}function Ir(t,e){return void 0===e&&(e=gt),kr($e(t,e))}function Fr(t,e){return W(En(t,e,arguments.length>=2,!0))}function Rr(t,e){return void 0===e&&(e=function(t,e){return t===e}),W((function(n,r){var o={buffer:[],complete:!1},i={buffer:[],complete:!1},a=function(t){r.next(t),r.complete()},s=function(t,n){var o=q(r,(function(r){var o=n.buffer,i=n.complete;0===o.length?i?a(!1):t.buffer.push(r):!e(r,o.shift())&&a(!1)}),(function(){t.complete=!0;var e=n.complete,r=n.buffer;e&&a(0===r.length),null==o||o.unsubscribe()}));return o};n.subscribe(s(o,i)),t.subscribe(s(i,o))}))}function Hr(t){void 0===t&&(t={});var e=t.connector,n=void 0===e?function(){return new tt}:e,r=t.resetOnError,o=void 0===r||r,i=t.resetOnComplete,a=void 0===i||i,s=t.resetOnRefCountZero,u=void 0===s||s;return function(t){var e=null,r=null,i=null,s=0,c=!1,l=!1,f=function(){null==r||r.unsubscribe(),r=null},h=function(){f(),e=i=null,c=l=!1},d=function(){var t=e;h(),null==t||t.unsubscribe()};return W((function(t,p){s++,l||c||f();var v=i=null!=i?i:n();p.add((function(){0!=--s||l||c||(r=Ur(d,u))})),v.subscribe(p),e||(e=new P({next:function(t){return v.next(t)},error:function(t){l=!0,f(),r=Ur(h,o,t),v.error(t)},complete:function(){c=!0,f(),r=Ur(h,a),v.complete()}}),ee(t).subscribe(e))}))(t)}}function Ur(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];return!0===e?(t(),null):!1===e?null:e.apply(void 0,u([],s(n))).pipe(Bn(1)).subscribe((function(){return t()}))}function Br(t,e,n){var r,o,i,a=!1;return t&&"object"==typeof t?(i=null!==(r=t.bufferSize)&&void 0!==r?r:1/0,e=null!==(o=t.windowTime)&&void 0!==o?o:1/0,a=!!t.refCount,n=t.scheduler):i=null!=t?t:1/0,Hr({connector:function(){return new ot(i,e,n)},resetOnError:!0,resetOnComplete:!1,resetOnRefCountZero:a})}function Wr(t){return W((function(e,n){var r,o=!1,i=!1,a=0;e.subscribe(q(n,(function(s){i=!0,t&&!t(s,a++,e)||(o&&n.error(new he("Too many matching values")),o=!0,r=s)}),(function(){o?(n.next(r),n.complete()):n.error(i?new fe("No matching values"):new se)})))}))}function qr(t){return sn((function(e,n){return t<=n}))}function Vr(t){return t<=0?I:W((function(e,n){var r=new Array(t),o=0;return e.subscribe(q(n,(function(e){var i=o++;if(i<t)r[i]=e;else{var a=i%t,s=r[a];r[a]=e,n.next(s)}}))),function(){r=null}}))}function Gr(t){return W((function(e,n){var r=!1,o=q(n,(function(){null==o||o.unsubscribe(),r=!0}),E);Kt(t).subscribe(o),e.subscribe(q(n,(function(t){return r&&n.next(t)})))}))}function zr(t){return W((function(e,n){var r=!1,o=0;e.subscribe(q(n,(function(e){return(r||(r=!t(e,o++)))&&n.next(e)})))}))}function Kr(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=kt(t);return W((function(e,r){(n?Ie(t,e,n):Ie(t,e)).subscribe(r)}))}function Xr(t,e){return W((function(n,r){var o=null,i=0,a=!1,s=function(){return a&&!o&&r.complete()};n.subscribe(q(r,(function(n){null==o||o.unsubscribe();var a=0,u=i++;Kt(t(n,u)).subscribe(o=q(r,(function(t){return r.next(e?e(n,t,u,a++):t)}),(function(){o=null,s()})))}),(function(){a=!0,s()})))}))}function Yr(){return Xr(I)}function $r(t,e){return f(e)?Xr((function(){return t}),e):Xr((function(){return t}))}function Jr(t,e){return W((function(n,r){var o=e;return Xr((function(e,n){return t(o,e,n)}),(function(t,e){return o=e,e}))(n).subscribe(r),function(){o=null}}))}function Zr(t){return W((function(e,n){Kt(t).subscribe(q(n,(function(){return n.complete()}),E)),!n.closed&&e.subscribe(n)}))}function Qr(t,e){return void 0===e&&(e=!1),W((function(n,r){var o=0;n.subscribe(q(r,(function(n){var i=t(n,o++);(i||e)&&r.next(n),!i&&r.complete()})))}))}function to(t,e,n){var r=f(t)||e||n?{next:t,error:e,complete:n}:t;return r?W((function(t,e){var n;null===(n=r.subscribe)||void 0===n||n.call(r);var o=!0;t.subscribe(q(e,(function(t){var n;null===(n=r.next)||void 0===n||n.call(r,t),e.next(t)}),(function(){var t;o=!1,null===(t=r.complete)||void 0===t||t.call(r),e.complete()}),(function(t){var n;o=!1,null===(n=r.error)||void 0===n||n.call(r,t),e.error(t)}),(function(){var t,e;o&&(null===(t=r.unsubscribe)||void 0===t||t.call(r)),null===(e=r.finalize)||void 0===e||e.call(r)})))})):I}var eo={leading:!0,trailing:!1};function no(t,e){return void 0===e&&(e=eo),W((function(n,r){var o=e.leading,i=e.trailing,a=!1,s=null,u=null,c=!1,l=function(){null==u||u.unsubscribe(),u=null,i&&(d(),c&&r.complete())},f=function(){u=null,c&&r.complete()},h=function(e){return u=Kt(t(e)).subscribe(q(r,l,f))},d=function(){if(a){a=!1;var t=s;s=null,r.next(t),!c&&h(t)}};n.subscribe(q(r,(function(t){a=!0,s=t,(!u||u.closed)&&(o?d():h(t))}),(function(){c=!0,(!(i&&a&&u)||u.closed)&&r.complete()})))}))}function ro(t,e,n){void 0===e&&(e=gt),void 0===n&&(n=eo);var r=Ye(t,e);return no((function(){return r}),n)}function oo(t){return void 0===t&&(t=gt),W((function(e,n){var r=t.now();e.subscribe(q(n,(function(e){var o=t.now(),i=o-r;r=o,n.next(new io(e,i))})))}))}var io=function(t,e){this.value=t,this.interval=e};function ao(t,e,n){var r,o,i;if(n=null!=n?n:wt,de(t)?r=t:"number"==typeof t&&(o=t),!e)throw new TypeError("No observable provided to switch to");if(i=function(){return e},null==r&&null==o)throw new TypeError("No timeout provided.");return ve({first:r,each:o,scheduler:n,with:i})}function so(t){return void 0===t&&(t=rt),me((function(e){return{value:e,timestamp:t.now()}}))}function uo(t){return W((function(e,n){var r=new tt;n.next(r.asObservable());var o=function(t){r.error(t),n.error(t)};return e.subscribe(q(n,(function(t){return null==r?void 0:r.next(t)}),(function(){r.complete(),n.complete()}),o)),t.subscribe(q(n,(function(){r.complete(),n.next(r=new tt)}),E,o)),function(){null==r||r.unsubscribe(),r=null}}))}function co(t,e){void 0===e&&(e=0);var n=e>0?e:t;return W((function(e,r){var o=[new tt],i=0;r.next(o[0].asObservable()),e.subscribe(q(r,(function(e){var s,u;try{for(var c=a(o),l=c.next();!l.done;l=c.next())l.value.next(e)}catch(t){s={error:t}}finally{try{l&&!l.done&&(u=c.return)&&u.call(c)}finally{if(s)throw s.error}}var f=i-t+1;if(f>=0&&f%n==0&&o.shift().complete(),++i%n==0){var h=new tt;o.push(h),r.next(h.asObservable())}}),(function(){for(;o.length>0;)o.shift().complete();r.complete()}),(function(t){for(;o.length>0;)o.shift().error(t);r.error(t)}),(function(){o=null})))}))}function lo(t){for(var e,n,r=[],o=1;o<arguments.length;o++)r[o-1]=arguments[o];var i=null!==(e=kt(r))&&void 0!==e?e:gt,a=null!==(n=r[0])&&void 0!==n?n:null,s=r[1]||1/0;return W((function(e,n){var r=[],o=!1,u=function(t){var e=t.window,n=t.subs;e.complete(),n.unsubscribe(),p(r,t),o&&c()},c=function(){if(r){var e=new v;n.add(e);var o=new tt,a={window:o,subs:e,seen:0};r.push(a),n.next(o.asObservable()),Yt(e,i,(function(){return u(a)}),t)}};null!==a&&a>=0?Yt(n,i,c,a,!0):o=!0,c();var l=function(t){return r.slice().forEach(t)},f=function(t){l((function(e){var n=e.window;return t(n)})),t(n),n.unsubscribe()};return e.subscribe(q(n,(function(t){l((function(e){e.window.next(t),s<=++e.seen&&u(e)}))}),(function(){return f((function(t){return t.complete()}))}),(function(t){return f((function(e){return e.error(t)}))}))),function(){r=null}}))}function fo(t,e){return W((function(n,r){var o=[],i=function(t){for(;0<o.length;)o.shift().error(t);r.error(t)};Kt(t).subscribe(q(r,(function(t){var n=new tt;o.push(n);var a,s=new v;try{a=Kt(e(t))}catch(t){return void i(t)}r.next(n.asObservable()),s.add(a.subscribe(q(r,(function(){p(o,n),n.complete(),s.unsubscribe()}),E,i)))}),E)),n.subscribe(q(r,(function(t){var e,n,r=o.slice();try{for(var i=a(r),s=i.next();!s.done;s=i.next())s.value.next(t)}catch(t){e={error:t}}finally{try{s&&!s.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}}),(function(){for(;0<o.length;)o.shift().complete();r.complete()}),i,(function(){for(;0<o.length;)o.shift().unsubscribe()})))}))}function ho(t){return W((function(e,n){var r,o,i=function(t){r.error(t),n.error(t)},a=function(){var e;null==o||o.unsubscribe(),null==r||r.complete(),r=new tt,n.next(r.asObservable());try{e=Kt(t())}catch(t){return void i(t)}e.subscribe(o=q(n,a,a,i))};a(),e.subscribe(q(n,(function(t){return r.next(t)}),(function(){r.complete(),n.complete()}),i,(function(){null==o||o.unsubscribe(),r=null})))}))}function po(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Lt(t);return W((function(e,r){for(var o=t.length,i=new Array(o),a=t.map((function(){return!1})),c=!1,l=function(e){Kt(t[e]).subscribe(q(r,(function(t){i[e]=t,c||a[e]||(a[e]=!0,(c=a.every(I))&&(a=null))}),E))},f=0;f<o;f++)l(f);e.subscribe(q(r,(function(t){if(c){var e=u([t],s(i));r.next(n?n.apply(void 0,u([],s(e))):e)}})))}))}function vo(t){return xn(dn,t)}function yo(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return W((function(e,n){dn.apply(void 0,u([e],s(t))).subscribe(n)}))}function mo(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return yo.apply(void 0,u([],s(t)))}},621:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CategoriesService=e.HEADERS=void 0;const r=n(652),o=n(768);e.HEADERS={AUTHORIZATION:"Authorization",ACCEPT_LANGUAGE:"Accept-Language"},e.CategoriesService=class{constructor(t="en",e){this.language=t,this.accessToken=e,this.CATEGORIES_URL=`${o.ENVIRONMENT.apiUrl}/categories`}setLanguage(t){this.language=t}setAccessToken(t){this.accessToken=t}getInitialData(){return new r.Observable((t=>{var n=new XMLHttpRequest;n.open("GET",this.CATEGORIES_URL,!1),n.setRequestHeader(e.HEADERS.ACCEPT_LANGUAGE,this.language),this.accessToken&&n.setRequestHeader(e.HEADERS.AUTHORIZATION,`Bearer ${this.accessToken}`),n.onreadystatechange=()=>{n.readyState===XMLHttpRequest.DONE&&(this.categories=JSON.parse(n.responseText).categories,t.next(JSON.parse(n.responseText).categories))},n.send()}))}getCategories(){return this.categories?(0,r.of)(this.categories):this.getInitialData()}getObjectTypesByCategoryId(t){return this.getInitialData().pipe((0,r.map)((e=>(e=>{var n;return(null===(n=e.find((e=>e.id.toString()===t)))||void 0===n?void 0:n.subcategories)||[]})(e))))}getObjectTypesByObjectTypeId(t){return this.getInitialData().pipe((0,r.map)((e=>{let n=[];return e.forEach((t=>{t.subcategories&&(n=n.concat(t.subcategories))})),(e=>{var n;return(null===(n=e.find((e=>e.id.toString()===t)))||void 0===n?void 0:n.subcategories)||[]})(n)})))}}},384:(t,e,n)=>{"use strict";e.D=void 0;const r=n(652),o=n(621);n(575);const i=n(788);e.D=["category-id","object-type-id","language","token"];class a extends HTMLElement{constructor(){super(),this.cards=[],this.attributesSubject=new r.Subject,this.attributes$=this.attributesSubject.asObservable(),this.attachShadow({mode:"open"}),this.addStylesToShadowRoot(),this.attributes$.pipe((0,r.debounceTime)(500)).subscribe((()=>{this.categoriesService=new o.CategoriesService(this.language,this.token),this.buildComponent()}))}connectedCallback(){this.attributesSubject.next()}static get observedAttributes(){return["category-id","object-type-id","language","token"]}attributeChangedCallback(t,n,r){e.D.includes(t)&&(this[t]=r,this.attributesSubject.next())}addStylesToShadowRoot(){const t=document.createElement("style");t.appendChild(document.createTextNode(i.default)),this.shadowRoot.appendChild(t)}buildComponent(){this["category-id"]&&this["object-type-id"]?this.getObjectTypesByObjectTypeId(this["object-type-id"]).pipe((0,r.take)(1)).subscribe((t=>{this.initCards(t)})):this["category-id"]&&!this["object-type-id"]?this.getObjectTypesByCategoryId(this["category-id"]).pipe((0,r.take)(1)).subscribe((t=>{this.initCards(t)})):this["object-type-id"]&&!this["category-id"]?console.error("WCategoryCards: Missing category-id attribute"):this.getCategories().pipe((0,r.take)(1)).subscribe((t=>{this.initCards(t)}))}initCards(t){this.cards=t,this.emitEmptyState(),this.appendSlider()}getCategories(){return this.categoriesService.getCategories()}getObjectTypesByCategoryId(t){return this.categoriesService.getObjectTypesByCategoryId(t)}getObjectTypesByObjectTypeId(t){return this.categoriesService.getObjectTypesByObjectTypeId(t)}appendSlider(){var t;null===(t=this.containerElement)||void 0===t||t.remove(),this.shadowRoot.append(this.buildSlider())}buildSlider(){return this.containerElement=document.createElement("div"),this.containerElement.classList.add("WCategoryCards"),this.cards.forEach((t=>{this.containerElement.appendChild(this.buildCard(t))})),this.containerElement}buildCard(t){const e=document.createElement("div");e.classList.add("WCategoryCards__card"),t.presentation.image_url||e.classList.add("WCategoryCards__card--no-image"),e.addEventListener("click",(()=>{this.dispatchEvent(new CustomEvent("cardClick",{detail:{id:t.id}}))}));const n=document.createElement("span");if(n.classList.add("WCategoryCards__card__title"),e.style.backgroundColor=`#${t.presentation.background_color}`,n.innerText=t.name,n.style.color=`#${t.presentation.title_color}`,e.appendChild(n),t.presentation.image_url){const n=document.createElement("img");n.classList.add("WCategoryCards__card__image"),n.src=t.presentation.image_url,e.appendChild(n)}return e}emitEmptyState(){this.dispatchEvent(new CustomEvent("empty",{detail:{empty:!this.cards.length}}))}}window.customElements.define("w-category-cards",a)},768:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ENVIRONMENT=void 0,e.ENVIRONMENT={apiUrl:"https://api.wallapop.com/api/v3"}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={exports:{}};return t[r].call(i.exports,i,i.exports,n),i.exports}n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n(384)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,