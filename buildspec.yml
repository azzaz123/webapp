version: 0.2

env:
  variables:
    ECR: "567828013335.dkr.ecr.eu-west-1.amazonaws.com"
    ECR_REPO: "567828013335.dkr.ecr.eu-west-1.amazonaws.com/devel/webapp"
    NODE_IMAGE: "nodejs12"
  parameter-store:
    build_ssh_key: "BuildSSHKey"
    code_build_token: "/corp/releasebot/codebuild/token"

phases:
  install:
    commands:
      - mkdir -p ~/.ssh
      - echo "$build_ssh_key" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - ssh-keygen -F github.com || ssh-keyscan github.com >> ~/.ssh/known_hosts
      - git config --global url."git@github.com:".insteadOf "https://github.com/"

  pre_build:
    commands:
      # LOG IN INTO ECR
      - $(aws ecr get-login --no-include-email --region eu-west-1)

  build:
    commands:
      # RUN cfn-lint ON CLOUDFORMATION TEMPLATE FILES
      - docker run -v "$PWD":/code -w /code $ECR/cfn-lint:latest -t infrastructure/*/*.yaml

      # OBTAIN WORKING BRANCH FROM ENV VARIABLE
      - echo $BRANCH

      # EXPORT TAG ENV FROM BRANCH
      - export ENV="dockx"
      - if [ "`echo $BRANCH | grep master`" != "" ]; then export ENV="prod"; fi
      - if [ "`echo $BRANCH | grep release/`" != "" ]; then export ENV="beta"; fi
      - if [ "`echo $BRANCH | grep hotfix/`" != "" ]; then export ENV="beta"; fi
      - echo $ENV

      # EXPORT TAG IMAGE_TAG FROM BRANCH
      - export IMAGE_TAG=feature-$(echo $BRANCH | cut -d '/' -f 2)
      - if [ "`echo $BRANCH | grep master`" != "" ]; then export IMAGE_TAG="stable"; fi
      - if [ "`echo $BRANCH | grep release/`" != "" ]; then export IMAGE_TAG="release"; fi
      - if [ "`echo $BRANCH | grep hotfix/`" != "" ]; then export IMAGE_TAG="release"; fi
      - if [ "`echo $BRANCH | grep develop`" != "" ]; then export IMAGE_TAG="latest"; fi
      - echo $IMAGE_TAG

      # INSTALL NODE DEPENDENCIES
      - docker run -v ${PWD}:/root -w /root -v /tmp/.cache/yarn:/root/.cache/yarn -v ~/.ssh:/root/.ssh --rm --name ${NODE_IMAGE} $ECR/${NODE_IMAGE}:stable yarn install

      # RUN PHRASE INTEGRATION
      - docker run -v ${PWD}:/root -w /root -v /tmp/.cache/yarn:/root/.cache/yarn -v ~/.ssh:/root/.ssh --rm --name ${NODE_IMAGE} $ECR/${NODE_IMAGE}:stable yarn i18n-helper:merge-phrase

      # ADD DOCKNUM 137 TO ENVIRONMENT FOR TESTS
      - ./scripts/docknum/update.sh 137

      # LAUNCH TEST
      - docker run -v ${PWD}:/root -w /root -v /tmp/.cache/yarn:/root/.cache/yarn -v ~/.ssh:/root/.ssh --rm --name ${NODE_IMAGE} $ECR/${NODE_IMAGE}:stable yarn test-ci

      # INSTALL ENV
      - >
        if [ "`echo $ENV | grep prod`" != "" ]; then
          docker run -v ${PWD}:/root -w /root -v /tmp/.cache/yarn:/root/.cache/yarn --rm --name ${NODE_IMAGE} $ECR/${NODE_IMAGE}:stable yarn buildprod
          mv dist/es ./
          zip -r webapp-${IMAGE_TAG}.zip es/*
          mv dist/en ./
          zip -r webapp-${IMAGE_TAG}.zip en/*
          mv dist/it ./
          zip -r webapp-${IMAGE_TAG}.zip it/*
          mv it/assets ./
          zip -r webapp-${IMAGE_TAG}.zip assets/*
          rm -rf dist
        fi

      - >
        if [ "`echo $ENV | grep beta`" != "" ]; then
          docker run -v ${PWD}:/root -w /root -v /tmp/.cache/yarn:/root/.cache/yarn --rm --name ${NODE_IMAGE} $ECR/${NODE_IMAGE}:stable yarn buildbeta
          mv dist/es ./
          zip -r webapp-${IMAGE_TAG}.zip es/*
          mv dist/en ./
          zip -r webapp-${IMAGE_TAG}.zip en/*
          mv dist/it ./
          zip -r webapp-${IMAGE_TAG}.zip it/*
          mv it/assets ./
          zip -r webapp-${IMAGE_TAG}.zip assets/*
          rm -rf dist
        fi

      # BUILD AND PUSH IMAGE
      - docker run -v ${PWD}:/root -w /root -v /tmp/.cache/yarn:/root/.cache/yarn --rm --name ${NODE_IMAGE} $ECR/${NODE_IMAGE}:stable yarn builddocker
      - docker build -f docker/Dockerfile -t $ECR_REPO:$IMAGE_TAG .
      - docker push "$ECR_REPO:$IMAGE_TAG"

      # OBTAIN COMMIT ID
      - COMMIT=$CODEBUILD_RESOLVED_SOURCE_VERSION
      - echo $COMMIT

      # TRIGGER BETA/PROD INFRASTRUCTURE PIPELINES
      - zip -r webapp-${IMAGE_TAG}.zip infrastructure/* dist/*
      - |
        aws s3 cp webapp-${IMAGE_TAG}.zip s3://wallapop-trigger-link-cicd/webapp/ \
          --metadata commit=$COMMIT,codepipeline-artifact-revision-summary="$COMMIT"

      # SEND RELEASE EMAIL
      - >
        if [ "`echo $BRANCH | grep release/`" != "" ]; then
          RELEASE_BOT_COMMAND='email_release repo=webapp jira_tag_prefix=WEBAPP email_destination=frontend@wallapop.com,qa@wallapop.com'
          curl -X POST https://releasebot.wallapop.com/event-handler -d "{\"headers\":{},\"body\":{\"token\":\"$code_build_token\",\"event\":{\"type\":\"message\",\"text\":\"$RELEASE_BOT_COMMAND\",\"channel\":\"\",\"channel_type\":\"im\"}}}"
        fi

cache:
  paths:
    - /tmp/.cache/yarn/**/*
