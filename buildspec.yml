version: 0.2

env:
  parameter-store:
    build_ssh_key: "BuildSSHKey"
    code_build_token: "/corp/releasebot/codebuild/token"

phases:
  install:
    commands:
      - mkdir -p ~/.ssh
      - echo "$build_ssh_key" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - ssh-keygen -F github.com || ssh-keyscan github.com >> ~/.ssh/known_hosts
      - git config --global url."git@github.com:".insteadOf "https://github.com/"

  pre_build:
    commands:
      - $(aws ecr get-login --no-include-email --region eu-west-1)

  build:
    commands:
      # RUN cfn-lint ON CLOUDFORMATION TEMPLATE FILES
      - ecr="745640521341.dkr.ecr.eu-west-1.amazonaws.com"
      - docker run -v "$PWD":/code -w /code $ecr/cfn-lint:stable -t infrastructure/*/*.yaml

      # OBTAIN WORKING BRANCH
      - BRANCH=$(git branch --contains $CODEBUILD_SOURCE_VERSION | sed '1d')
      - echo $BRANCH

      # EXPORT TAG ENV FROM BRANCH
      - export ENV="dockx"
      - if [ "`echo $BRANCH | grep master`" != "" ]; then export ENV="prod"; fi
      - if [ "`echo $BRANCH | grep release/`" != "" ]; then export ENV="beta"; fi
      - if [ "`echo $BRANCH | grep hotfix/`" != "" ]; then export ENV="beta"; fi
      - echo $ENV

      # EXPORT TAG IMAGE_TAG FROM BRANCH
      - export IMAGE_TAG=feature-$(echo $BRANCH | cut -d '/' -f 2)
      - if [ "`echo $BRANCH | grep master`" != "" ]; then export IMAGE_TAG="stable"; fi
      - if [ "`echo $BRANCH | grep release/`" != "" ]; then export IMAGE_TAG="release"; fi
      - if [ "`echo $BRANCH | grep hotfix/`" != "" ]; then export IMAGE_TAG="release"; fi
      - echo $IMAGE_TAG

      # LOAD YARN DEPENDENCIES
      - docker run -v ${PWD}:/root -w /root -v /tmp/.cache/yarn:/root/.cache/yarn -v ~/.ssh:/root/.ssh --rm --name nodejs8 745640521341.dkr.ecr.eu-west-1.amazonaws.com/nodejs8:stable yarn

      # LAUNCH TEST
      - docker run -v ${PWD}:/root -w /root -v /tmp/.cache/yarn:/root/.cache/yarn -v ~/.ssh:/root/.ssh --rm --name nodejs8 745640521341.dkr.ecr.eu-west-1.amazonaws.com/nodejs8:stable yarn run test --watch=false --no-progress

      # INSTALL ENV
      - >
        if [ "`echo $ENV | grep prod`" != "" ]; then
          docker run -v ${PWD}:/root -w /root -v /tmp/.cache/yarn:/root/.cache/yarn --rm --name nodejs8 745640521341.dkr.ecr.eu-west-1.amazonaws.com/nodejs8:stable npm run buildprod
          aws s3 sync dist s3://web-es.wallapop.com --delete
          aws s3 cp dist/index.html s3://web-es.wallapop.com/index.html --cache-control max-age=0
          docker run -v ${PWD}:/root -w /root -v /tmp/.cache/yarn:/root/.cache/yarn --rm --name nodejs8 745640521341.dkr.ecr.eu-west-1.amazonaws.com/nodejs8:stable npm run buildprod-en
          aws s3 sync dist s3://web-en.wallapop.com --delete
          aws s3 cp dist/index.html s3://web-en.wallapop.com/index.html --cache-control max-age=0
          docker run -v ${PWD}:/root -w /root -v /tmp/.cache/yarn:/root/.cache/yarn --rm --name nodejs8 745640521341.dkr.ecr.eu-west-1.amazonaws.com/nodejs8:stable npm run builddocker
          docker build -f docker/Dockerfile -t 745640521341.dkr.ecr.eu-west-1.amazonaws.com/devel/webapp:stable .
          docker push "745640521341.dkr.ecr.eu-west-1.amazonaws.com/devel/webapp:stable"
        fi

      - >
        if [ "`echo $ENV | grep beta`" != "" ]; then
          docker run -v ${PWD}:/root -w /root -v /tmp/.cache/yarn:/root/.cache/yarn --rm --name nodejs8 745640521341.dkr.ecr.eu-west-1.amazonaws.com/nodejs8:stable npm run buildbeta
          aws s3 sync dist s3://web-es.beta.wallapop.com --delete
          aws s3 cp dist/index.html s3://web-es.beta.wallapop.com/index.html --cache-control max-age=0
          docker run -v ${PWD}:/root -w /root -v /tmp/.cache/yarn:/root/.cache/yarn --rm --name nodejs8 745640521341.dkr.ecr.eu-west-1.amazonaws.com/nodejs8:stable npm run buildbeta-en
          aws s3 sync dist s3://web-en.beta.wallapop.com --delete
          aws s3 cp dist/index.html s3://web-en.beta.wallapop.com/index.html --cache-control max-age=0
          docker run -v ${PWD}:/root -w /root -v /tmp/.cache/yarn:/root/.cache/yarn --rm --name nodejs8 745640521341.dkr.ecr.eu-west-1.amazonaws.com/nodejs8:stable npm run builddocker
          docker build -f docker/Dockerfile -t 745640521341.dkr.ecr.eu-west-1.amazonaws.com/devel/webapp:release .
          docker push "745640521341.dkr.ecr.eu-west-1.amazonaws.com/devel/webapp:release"
        fi

      - >
        if [ "`echo $ENV | grep dockx`" != "" ]; then
          TAG_BRANCH=feature-$(echo $BRANCH | cut -d '/' -f 2)
          echo $TAG_BRANCH
          if [ "`echo $BRANCH | grep develop`" != "" ]; then export TAG_BRANCH="latest"; fi
          docker run -v ${PWD}:/root -w /root -v /tmp/.cache/yarn:/root/.cache/yarn --rm --name nodejs8 745640521341.dkr.ecr.eu-west-1.amazonaws.com/nodejs8:stable npm run buildbeta
          docker build -f docker/Dockerfile -t 745640521341.dkr.ecr.eu-west-1.amazonaws.com/devel/webapp:$TAG_BRANCH .
          docker push "745640521341.dkr.ecr.eu-west-1.amazonaws.com/devel/webapp:$TAG_BRANCH"
        fi

      # TRIGGER BETA/PROD INFRASTRUCTURE PIPELINES
      - zip -r webapp-${IMAGE_TAG}.zip infrastructure/*
      - aws s3 cp webapp-${IMAGE_TAG}.zip s3://wallapop-trigger-link-cicd/webapp/

      # SEND RELEASE EMAIL
      - >
        if [ "`echo $BRANCH | grep release/`" != "" ]; then
          RELEASE_BOT_COMMAND='email_release repo=webapp jira_tag_prefix=MOD email_destination=frontend@wallapop.com,qa@wallapop.com'
          curl -X POST https://releasebot.wallapop.com/event-handler -d "{\"headers\":{},\"body\":{\"token\":\"$code_build_token\",\"event\":{\"type\":\"message\",\"text\":\"$RELEASE_BOT_COMMAND\",\"channel\":\"\",\"channel_type\":\"im\"}}}"
        fi

cache:
  paths:
    - /tmp/.cache/yarn/**/*
